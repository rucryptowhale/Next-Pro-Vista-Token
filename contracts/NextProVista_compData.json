{
	"compilerInput": "{\"language\":\"Solidity\",\"sources\":{\"NextProVista.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.22;\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {ERC20PermitUpgradeable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport {ERC20VotesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/proxy/utils/Initializable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/utils/NoncesUpgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/access/OwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"@openzeppelin/contracts-upgradeable@5.2.0/proxy/utils/UUPSUpgradeable.sol\\\";\\n\\n/// @custom:security-contact rucryptowhale@gmail.com\\ncontract NextProVista is Initializable, ERC20Upgradeable, ERC20PermitUpgradeable, ERC20VotesUpgradeable, OwnableUpgradeable, UUPSUpgradeable {\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address recipient, address initialOwner)\\n        public initializer\\n    {\\n        __ERC20_init(\\\"Next Pro Vista\\\", \\\"NPV\\\");\\n        __ERC20Permit_init(\\\"Next Pro Vista\\\");\\n        __ERC20Votes_init();\\n        __Ownable_init(initialOwner);\\n        __UUPSUpgradeable_init();\\n\\n        _mint(recipient, 381654729 * 10 ** decimals());\\n    }\\n\\n    function clock() public view override returns (uint48) {\\n        return uint48(block.timestamp);\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public pure override returns (string memory) {\\n        return \\\"mode=timestamp\\\";\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    // The following functions are overrides required by Solidity.\\n\\n    function _update(address from, address to, uint256 value)\\n        internal\\n        override(ERC20Upgradeable, ERC20VotesUpgradeable)\\n    {\\n        super._update(from, to, value);\\n    }\\n\\n    function nonces(address owner)\\n        public\\n        view\\n        override(ERC20PermitUpgradeable, NoncesUpgradeable)\\n        returns (uint256)\\n    {\\n        return super.nonces(owner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC-1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC-1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC-1967 compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC-1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/utils/NoncesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract NoncesUpgradeable is Initializable {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\\n    struct NoncesStorage {\\n        mapping(address account => uint256) _nonces;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Nonces\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\\n\\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\\n        assembly {\\n            $.slot := NoncesStorageLocation\\n        }\\n    }\\n\\n    function __Nonces_init() internal onlyInitializing {\\n    }\\n\\n    function __Nonces_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        return $._nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return $._nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {VotesUpgradeable} from \\\"../../../governance/utils/VotesUpgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC-20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {Votes-delegate} function directly, or by providing a signature to be used with {Votes-delegateBySig}. Voting\\n * power can be queried through the public accessors {Votes-getVotes} and {Votes-getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, ERC20Upgradeable, VotesUpgradeable {\\n    /**\\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\\n     */\\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\\n\\n    function __ERC20Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\\n     *\\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\\n     * so that checkpoints can be stored in the Trace208 structure used by {Votes}. Increasing this value will not\\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\\n     * {Votes-_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\\n     * returned.\\n     */\\n    function _maxSupply() internal view virtual returns (uint256) {\\n        return type(uint208).max;\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n        if (from == address(0)) {\\n            uint256 supply = totalSupply();\\n            uint256 cap = _maxSupply();\\n            if (supply > cap) {\\n                revert ERC20ExceededSafeSupply(supply, cap);\\n            }\\n        }\\n        _transferVotingUnits(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Returns the voting units of an `account`.\\n     *\\n     * WARNING: Overriding this function may compromise the internal vote accounting.\\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\\n     */\\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return _numCheckpoints(account);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _checkpoints(account, pos);\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Permit} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../../../utils/NoncesUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20Permit, EIP712Upgradeable, NoncesUpgradeable {\\n    bytes32 private constant PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /**\\n     * @dev Permit deadline has expired.\\n     */\\n    error ERC2612ExpiredSignature(uint256 deadline);\\n\\n    /**\\n     * @dev Mismatched signature.\\n     */\\n    error ERC2612InvalidSigner(address signer, address owner);\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC-20 token name.\\n     */\\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\\n        __EIP712_init_unchained(name, \\\"1\\\");\\n    }\\n\\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > deadline) {\\n            revert ERC2612ExpiredSignature(deadline);\\n        }\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        if (signer != owner) {\\n            revert ERC2612InvalidSigner(signer, owner);\\n        }\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    function nonces(address owner) public view virtual override(IERC20Permit, NoncesUpgradeable) returns (uint256) {\\n        return super.nonces(owner);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC20Permit\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC-20\\n * applications.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     *\\n     * ```solidity\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance < type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace224 storage self,\\n        uint32 key,\\n        uint224 value\\n    ) internal returns (uint224 oldValue, uint224 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint224 value\\n    ) private returns (uint224 oldValue, uint224 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint224 storage last = _unsafeAccess(self, pos - 1);\\n            uint32 lastKey = last._key;\\n            uint224 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace208 storage self,\\n        uint48 key,\\n        uint208 value\\n    ) internal returns (uint208 oldValue, uint208 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint208 value\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint208 storage last = _unsafeAccess(self, pos - 1);\\n            uint48 lastKey = last._key;\\n            uint208 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(\\n        Trace160 storage self,\\n        uint96 key,\\n        uint160 value\\n    ) internal returns (uint160 oldValue, uint160 newValue) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 storage ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint160 value\\n    ) private returns (uint160 oldValue, uint160 newValue) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            Checkpoint160 storage last = _unsafeAccess(self, pos - 1);\\n            uint96 lastKey = last._key;\\n            uint160 lastValue = last._value;\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (lastKey > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (lastKey == key) {\\n                last._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (lastValue, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key strictly bigger than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key greater or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/governance/utils/VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (governance/utils/Votes.sol)\\npragma solidity ^0.8.20;\\n\\nimport {IERC5805} from \\\"@openzeppelin/contracts/interfaces/IERC5805.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../../utils/NoncesUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Time} from \\\"@openzeppelin/contracts/utils/types/Time.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\\n * \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in\\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\\n *\\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\\n * example, see {ERC721Votes}.\\n *\\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\\n * cost of this history tracking optional.\\n *\\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\\n * previous example, it would be included in {ERC721-_update}).\\n */\\nabstract contract VotesUpgradeable is Initializable, ContextUpgradeable, EIP712Upgradeable, NoncesUpgradeable, IERC5805 {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 private constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Votes\\n    struct VotesStorage {\\n        mapping(address account => address) _delegatee;\\n\\n        mapping(address delegatee => Checkpoints.Trace208) _delegateCheckpoints;\\n\\n        Checkpoints.Trace208 _totalCheckpoints;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Votes\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant VotesStorageLocation = 0xe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d00;\\n\\n    function _getVotesStorage() private pure returns (VotesStorage storage $) {\\n        assembly {\\n            $.slot := VotesStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The clock was incorrectly modified.\\n     */\\n    error ERC6372InconsistentClock();\\n\\n    /**\\n     * @dev Lookup to future votes is not available.\\n     */\\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\\n\\n    function __Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\\n     */\\n    function clock() public view virtual returns (uint48) {\\n        return Time.blockNumber();\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in ERC-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory) {\\n        // Check that the clock was not modified\\n        if (clock() != Time.blockNumber()) {\\n            revert ERC6372InconsistentClock();\\n        }\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Validate that a timepoint is in the past, and return it as a uint48.\\n     */\\n    function _validateTimepoint(uint256 timepoint) internal view returns (uint48) {\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        return SafeCast.toUint48(timepoint);\\n    }\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].latest();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.upperLookupRecent(_validateTimepoint(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the current total supply of votes.\\n     */\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegatee[account];\\n    }\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        address account = _msgSender();\\n        _delegate(account, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > expiry) {\\n            revert VotesExpiredSignature(expiry);\\n        }\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        _useCheckedNonce(signer, nonce);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address account, address delegatee) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        address oldDelegate = delegates(account);\\n        $._delegatee[account] = delegatee;\\n\\n        emit DelegateChanged(account, oldDelegate, delegatee);\\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\\n    }\\n\\n    /**\\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\\n     */\\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from == address(0)) {\\n            _push($._totalCheckpoints, _add, SafeCast.toUint208(amount));\\n        }\\n        if (to == address(0)) {\\n            _push($._totalCheckpoints, _subtract, SafeCast.toUint208(amount));\\n        }\\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Moves delegated votes from one delegate to another.\\n     */\\n    function _moveDelegateVotes(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from != to && amount > 0) {\\n            if (from != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[from],\\n                    _subtract,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(from, oldValue, newValue);\\n            }\\n            if (to != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[to],\\n                    _add,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(to, oldValue, newValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return SafeCast.toUint32($._delegateCheckpoints[account].length());\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function _checkpoints(\\n        address account,\\n        uint32 pos\\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].at(pos);\\n    }\\n\\n    function _push(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint208 delta\\n    ) private returns (uint208 oldValue, uint208 newValue) {\\n        return store.push(clock(), op(store.latest(), delta));\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Must return the voting units held by an account.\\n     */\\n    function _getVotingUnits(address) internal view virtual returns (uint256);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly (\\\"memory-safe\\\") {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"},\"@openzeppelin/contracts-upgradeable@5.2.0/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.22;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {IERC1967} from \\\"../../interfaces/IERC1967.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This library provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[ERC-1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit IERC1967.Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by ERC-1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the ERC-1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit IERC1967.AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the ERC-1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit IERC1967.BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n\\n        (bool success, bytes memory returndata) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            _revert(returndata);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {Errors.FailedCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\\n     * of an unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {Errors.FailedCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            assembly (\\\"memory-safe\\\") {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert Errors.FailedCall();\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   ↓           ↓       ↓ [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(\\n        Delay self,\\n        uint48 timepoint\\n    ) private pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        (valueBefore, valueAfter, effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IVotes} from \\\"../governance/utils/IVotes.sol\\\";\\nimport {IERC6372} from \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"}},\"settings\":{\"optimizer\":{\"enabled\":true,\"runs\":200},\"outputSelection\":{\"*\":{\"\":[\"ast\"],\"*\":[\"abi\",\"metadata\",\"devdoc\",\"userdoc\",\"storageLayout\",\"evm.legacyAssembly\",\"evm.bytecode\",\"evm.deployedBytecode\",\"evm.methodIdentifiers\",\"evm.gasEstimates\",\"evm.assembly\"]}},\"remappings\":[],\"evmVersion\":\"shanghai\"}}",
	"name": "NextProVista",
	"metadata": "{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"struct Checkpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"rucryptowhale@gmail.com\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"CheckpointUnorderedInsertion()\":[{\"details\":\"A value was attempted to be inserted on a past checkpoint.\"}],\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"ERC20ExceededSafeSupply(uint256,uint256)\":[{\"details\":\"Total supply cap has been exceeded, introducing a risk of votes overflowing.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"ERC5805FutureLookup(uint256,uint48)\":[{\"details\":\"Lookup to future votes is not available.\"}],\"ERC6372InconsistentClock()\":[{\"details\":\"The clock was incorrectly modified.\"}],\"FailedCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeCastOverflowedUintDowncast(uint8,uint256)\":[{\"details\":\"Value doesn't fit in an uint of `bits` size.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}],\"VotesExpiredSignature(uint256)\":[{\"details\":\"The signature used has expired.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"DelegateChanged(address,address,address)\":{\"details\":\"Emitted when an account changes their delegate.\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"details\":\"Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"CLOCK_MODE()\":{\"details\":\"Machine-readable description of the clock as specified in ERC-6372.\"},\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"checkpoints(address,uint32)\":{\"details\":\"Get the `pos`-th checkpoint for `account`.\"},\"clock()\":{\"details\":\"Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"delegate(address)\":{\"details\":\"Delegates votes from the sender to `delegatee`.\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Delegates votes from signer to `delegatee`.\"},\"delegates(address)\":{\"details\":\"Returns the delegate that `account` has chosen.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"getPastTotalSupply(uint256)\":{\"details\":\"Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getPastVotes(address,uint256)\":{\"details\":\"Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\"},\"getVotes(address)\":{\"details\":\"Returns the current amount of votes that `account` has.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"numCheckpoints(address)\":{\"details\":\"Get number of checkpoints for `account`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"NextProVista.sol\":\"NextProVista\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable@5.2.0/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/governance/utils/VotesUpgradeable.sol\":{\"keccak256\":\"0xe031deb896a4cf2dbfad99a6d3c926b5000953033a4da11aa74a69c29c1724b0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ab01f480db11236d89733b3835ac46f2c6f39f166699768c2cb200227dd8befc\",\"dweb:/ipfs/QmbrRHFhDQjpL2jhSrnRf5oaPcMNarkV4rFzV9xr6uFFJ9\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0xd861907d1168dcaec2a7846edbaed12feb8bad2d6781dba987be01374f90b495\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://12ff809243040419e2fc2aa7ef0aaa60b3e6ebc901553ba1de970ceeef208c4c\",\"dweb:/ipfs/QmX2dwMVNrQAahqVzEx94gqcVB6Z8ovifPYdEfHZzj7aEb\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x5c54228bbb2f1f8616179c51bdb90b7960f4a3414c390ad5c6ead6763eb55a59\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://745fe72596bb8fde5f294d9d6b943db942202e4445536ee00da3ba011f876e86\",\"dweb:/ipfs/QmcjeESkk4rbhUVaSBfyq5f8rY56Jms1TwcJXaRD55K3UH\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/extensions/ERC20PermitUpgradeable.sol\":{\"keccak256\":\"0x4c6100a8ab53ef249c937067f7d9779ee0966fb55b39903628c169428fdeee76\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2b96738706660e46a7d77d13e14191d658b87720e2000a52c02890505183c118\",\"dweb:/ipfs/QmRUjhpmBAEmVEqD4L5LznnDR9gQdgXg17kZExC9N55Q63\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"keccak256\":\"0xd29cb0592b4aadc1ba10795eff133e7459d5d54fdca3972c1d55ff26cfa49f34\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a806d696b5b3996dc24a8d2d4249d227bf1ac23e9b4690d464a56da5a690b2c0\",\"dweb:/ipfs/QmfVyjXQgsd6yz9ouV1AZP7NC3bn1VN9L49kBhUuxvwtCq\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/utils/NoncesUpgradeable.sol\":{\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://851d3dfe724e918ff0a064b206e1ef46b27ab0df2aa2c8af976973a22ef59827\",\"dweb:/ipfs/Qmd4wb7zX8ueYhMVBy5PJjfsANK3Ra3pKPN7qQkNsdwGHn\"]},\"@openzeppelin/contracts-upgradeable@5.2.0/utils/cryptography/EIP712Upgradeable.sol\":{\"keccak256\":\"0x7a618cd9a1eea21201ec2ed8484080ca6225215e8883723bef34b9dcf22aa3b5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://287a73451277e35206f1f8b9f20b2cd41732081bd23523f5a2c64e1e67694c33\",\"dweb:/ipfs/QmdPVK7KACRpoavNUoixGsi8jBWeZUJfNYCzZbHGSGz5yu\"]},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://348fc8e291d54314bb22437b532f443d5dbfb80c8cc9591567c1af6554ccf856\",\"dweb:/ipfs/QmP8ZTyitZinxcpwAHeYHhwj7u21zPpKXSiww38V74sXC2\"]},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"keccak256\":\"0xb25a4f11fa80c702bf5cd85adec90e6f6f507f32f4a8e6f5dbc31e8c10029486\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6917f8a323e7811f041aecd4d9fd6e92455a6fba38a797ac6f6e208c7912b79d\",\"dweb:/ipfs/QmShuYv55wYHGi4EFkDB8QfF7ZCHoKk2efyz3AWY1ExSq7\"]},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7373d5dbb8eb2381aa0883a456fac89283fcaf52f42fa805d4188f270716742a\",\"dweb:/ipfs/QmVnZDmT4ABvNhRJMaQnbCzsCA8HpyHPVaxi4fCi92LFv2\"]},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://49bf13f6c2a38a9bcc7b852d4e2b9cebb4068b832642cce61069cdb5f06bb2fb\",\"dweb:/ipfs/QmdKAJVE7rR2kENCZnEM1yKswrGii7WuE9gZpsQvnXJhwn\"]},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0xc42facb5094f2f35f066a7155bda23545e39a3156faef3ddc00185544443ba7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d3b36282ab029b46bd082619a308a2ea11c309967b9425b7b7a6eb0b0c1c3196\",\"dweb:/ipfs/QmP2YVfDB2FoREax3vJu7QhDnyYRMw52WPrCD4vdT2kuDA\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x8decfa54cec979c824b044b8128cd91d713f72c71fd7dfa54974624d8c949898\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://271f914261a19d87117a777e0924ada545c16191ef9b00cc40b0134fc14ebc70\",\"dweb:/ipfs/QmdvVNWHGHQrGGPonZJs5NuzTevTjZRM2zayKrDJf7WBA2\"]},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa\",\"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x27dbc90e5136ffe46c04f7596fc2dbcc3acebd8d504da3d93fdb8496e6de04f6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea8b92e4245d75a5579c10f22f118f7b4ba07c57341f181f0b2a85ff8663de3\",\"dweb:/ipfs/Qme3Ss5ByjmkxxkMdLpyu7fQ1PCtjNFH1wEFszt2BZePiG\"]},\"@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaaa1d17c1129b127a4a401db2fbd72960e2671474be3d08cae71ccdc42f7624c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cb2f27cd3952aa667e198fba0d9b7bcec52fbb12c16f013c25fe6fb52b29cc0e\",\"dweb:/ipfs/QmeuohBFoeyDPZA9JNCTEDz3VBfBD4EABWuWXVhHAuEpKR\"]},\"@openzeppelin/contracts/utils/Errors.sol\":{\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf\",\"dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB\"]},\"@openzeppelin/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b\",\"dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM\"]},\"@openzeppelin/contracts/utils/Strings.sol\":{\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251\",\"dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d\"]},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0x69f54c02b7d81d505910ec198c11ed4c6a728418a868b906b4a0cf29946fda84\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8e25e4bdb7ae1f21d23bfee996e22736fc0ab44cfabedac82a757b1edc5623b9\",\"dweb:/ipfs/QmQdWQvB6JCP9ZMbzi8EvQ1PTETqkcTWrbcVurS7DKpa5n\"]},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d\",\"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1\"]},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"keccak256\":\"0x66364cd3247ea71cdb58f080f5d5ed6732433a8001413139661841535494692f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0f87914c6645b58eaf75f00a156037a7da91129f3a56aec44aebfc715b19ea44\",\"dweb:/ipfs/QmNX7NLSMXyWuogvf8wfCwjUGwLhLBZrGktWPSdoHtERGp\"]},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"keccak256\":\"0x36776530f012618bc7526ceb28e77b85e582cb12d9b9466a71d4bd6bf952e4cc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f867d046908497287d8a67643dd5d7e38c4027af4ab0a74ffbe1d6790c383c6\",\"dweb:/ipfs/QmQ7s9gMP1nkwThFmoDifnGgpUMsMe5q5ZrAxGDsNnRGza\"]},\"NextProVista.sol\":{\"keccak256\":\"0xa10adfabf138098c7ee70652da2d13b01fc55ae3d1ddb407960bd4d0b6ab41c0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a53bb192c2e9a0ec7f5da4f2ff607586a49e6bc91738c9657e945a429fbca640\",\"dweb:/ipfs/QmRM544yZMkyRdhaYBJf1jMeVi58zBYkSCsJno9YNMHe4k\"]}},\"version\":1}",
	"bytecode": {
		"functionDebugData": {
			"@_10943": {
				"entryPoint": null,
				"id": 10943,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_disableInitializers_1061": {
				"entryPoint": 37,
				"id": 1061,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_getInitializableStorage_1092": {
				"entryPoint": null,
				"id": 1092,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:216:35",
					"nodeType": "YulBlock",
					"src": "0:216:35",
					"statements": [
						{
							"nativeSrc": "6:3:35",
							"nodeType": "YulBlock",
							"src": "6:3:35",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "113:101:35",
								"nodeType": "YulBlock",
								"src": "113:101:35",
								"statements": [
									{
										"nativeSrc": "123:26:35",
										"nodeType": "YulAssignment",
										"src": "123:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "135:9:35",
													"nodeType": "YulIdentifier",
													"src": "135:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "146:2:35",
													"nodeType": "YulLiteral",
													"src": "146:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "131:3:35",
												"nodeType": "YulIdentifier",
												"src": "131:3:35"
											},
											"nativeSrc": "131:18:35",
											"nodeType": "YulFunctionCall",
											"src": "131:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "123:4:35",
												"nodeType": "YulIdentifier",
												"src": "123:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "165:9:35",
													"nodeType": "YulIdentifier",
													"src": "165:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "180:6:35",
															"nodeType": "YulIdentifier",
															"src": "180:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "196:2:35",
																			"nodeType": "YulLiteral",
																			"src": "196:2:35",
																			"type": "",
																			"value": "64"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "200:1:35",
																			"nodeType": "YulLiteral",
																			"src": "200:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "192:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "192:3:35"
																	},
																	"nativeSrc": "192:10:35",
																	"nodeType": "YulFunctionCall",
																	"src": "192:10:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "204:1:35",
																	"nodeType": "YulLiteral",
																	"src": "204:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "188:3:35",
																"nodeType": "YulIdentifier",
																"src": "188:3:35"
															},
															"nativeSrc": "188:18:35",
															"nodeType": "YulFunctionCall",
															"src": "188:18:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "176:3:35",
														"nodeType": "YulIdentifier",
														"src": "176:3:35"
													},
													"nativeSrc": "176:31:35",
													"nodeType": "YulFunctionCall",
													"src": "176:31:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "158:6:35",
												"nodeType": "YulIdentifier",
												"src": "158:6:35"
											},
											"nativeSrc": "158:50:35",
											"nodeType": "YulFunctionCall",
											"src": "158:50:35"
										},
										"nativeSrc": "158:50:35",
										"nodeType": "YulExpressionStatement",
										"src": "158:50:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed",
							"nativeSrc": "14:200:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "82:9:35",
									"nodeType": "YulTypedName",
									"src": "82:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "93:6:35",
									"nodeType": "YulTypedName",
									"src": "93:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "104:4:35",
									"nodeType": "YulTypedName",
									"src": "104:4:35",
									"type": ""
								}
							],
							"src": "14:200:35"
						}
					]
				},
				"contents": "{\n    { }\n    function abi_encode_tuple_t_uint64__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(64, 1), 1)))\n    }\n}",
				"id": 35,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"linkReferences": {},
		"object": "60a06040523060805234801562000014575f80fd5b506200001f62000025565b620000d9565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000765760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d65780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051612b91620001005f395f81816110200152818161104901526111880152612b915ff3fe6080604052600436106101c5575f3560e01c8063715018a6116100f25780639ab24eb011610092578063d505accf11610062578063d505accf1461056b578063dd62ed3e1461058a578063f1127ed8146105a9578063f2fde38b146105f4575f80fd5b80639ab24eb0146104de578063a9059cbb146104fd578063ad3cb1cc1461051c578063c3cda5201461054c575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461044d5780638e539e8c1461048957806391ddadf4146104a857806395d89b41146104ca575f80fd5b8063715018a6146103f35780637ecebe001461040757806384b0196e14610426575f80fd5b8063485cc95511610168578063587cde1e11610138578063587cde1e1461034a5780635c19a95c146103815780636fcfff45146103a057806370a08231146103d4575f80fd5b8063485cc955146102cc5780634bf5d7e9146102ed5780634f1ef2861461032357806352d1902d14610336575f80fd5b806323b872dd116101a357806323b872dd1461025f578063313ce5671461027e5780633644e515146102995780633a46b1a8146102ad575f80fd5b806306fdde03146101c9578063095ea7b3146101f357806318160ddd14610222575b5f80fd5b3480156101d4575f80fd5b506101dd610613565b6040516101ea9190612430565b60405180910390f35b3480156101fe575f80fd5b5061021261020d36600461245d565b6106b8565b60405190151581526020016101ea565b34801561022d575f80fd5b507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016101ea565b34801561026a575f80fd5b50610212610279366004612485565b6106d1565b348015610289575f80fd5b50604051601281526020016101ea565b3480156102a4575f80fd5b506102516106f6565b3480156102b8575f80fd5b506102516102c736600461245d565b610704565b3480156102d7575f80fd5b506102eb6102e63660046124be565b61074f565b005b3480156102f8575f80fd5b5060408051808201909152600e81526d06d6f64653d74696d657374616d760941b60208201526101dd565b6102eb610331366004612503565b61090b565b348015610341575f80fd5b5061025161092a565b348015610355575f80fd5b506103696103643660046125bf565b610945565b6040516001600160a01b0390911681526020016101ea565b34801561038c575f80fd5b506102eb61039b3660046125bf565b61096e565b3480156103ab575f80fd5b506103bf6103ba3660046125bf565b610979565b60405163ffffffff90911681526020016101ea565b3480156103df575f80fd5b506102516103ee3660046125bf565b610983565b3480156103fe575f80fd5b506102eb6109b3565b348015610412575f80fd5b506102516104213660046125bf565b6109c6565b348015610431575f80fd5b5061043a6109d0565b6040516101ea97969594939291906125d8565b348015610458575f80fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610369565b348015610494575f80fd5b506102516104a336600461266f565b610a7e565b3480156104b3575f80fd5b5060405165ffffffffffff421681526020016101ea565b3480156104d5575f80fd5b506101dd610ab3565b3480156104e9575f80fd5b506102516104f83660046125bf565b610af1565b348015610508575f80fd5b5061021261051736600461245d565b610b3f565b348015610527575f80fd5b506101dd604051806040016040528060058152602001640352e302e360dc1b81525081565b348015610557575f80fd5b506102eb610566366004612696565b610b4c565b348015610576575f80fd5b506102eb6105853660046126ea565b610bff565b348015610595575f80fd5b506102516105a43660046124be565b610d18565b3480156105b4575f80fd5b506105c86105c336600461274f565b610d61565b60408051825165ffffffffffff1681526020928301516001600160d01b031692810192909252016101ea565b3480156105ff575f80fd5b506102eb61060e3660046125bf565b610d7e565b60605f5f80516020612afc8339815191525b90508060030180546106369061278c565b80601f01602080910402602001604051908101604052809291908181526020018280546106629061278c565b80156106ad5780601f10610684576101008083540402835291602001916106ad565b820191905f5260205f20905b81548152906001019060200180831161069057829003601f168201915b505050505091505090565b5f336106c5818585610dbb565b60019150505b92915050565b5f336106de858285610dcd565b6106e9858585610e31565b60019150505b9392505050565b5f6106ff610e8e565b905090565b5f5f80516020612adc83398151915261073e61071f84610e97565b6001600160a01b0386165f908152600184016020526040902090610edb565b6001600160d01b0316949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f811580156107945750825b90505f8267ffffffffffffffff1660011480156107b05750303b155b9050811580156107be575080155b156107dc5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561080657845460ff60401b1916600160401b1785555b6108516040518060400160405280600e81526020016d4e6578742050726f20566973746160901b8152506040518060400160405280600381526020016227282b60e91b815250610f8b565b6108806040518060400160405280600e81526020016d4e6578742050726f20566973746160901b815250610f9d565b610888610fc8565b61089186610fd0565b610899610fc8565b6108bc876108a96012600a6128b8565b6108b7906316bf96c96128c6565b610fe1565b831561090257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610913611015565b61091c826110b9565b61092682826110c1565b5050565b5f61093361117d565b505f80516020612b3c83398151915290565b6001600160a01b039081165f9081525f80516020612adc83398151915260205260409020541690565b3361092681836111c6565b5f6106cb8261124d565b5f805f80516020612afc8339815191525b6001600160a01b039093165f9081526020939093525050604090205490565b6109bb61129c565b6109c45f6112f7565b565b5f6106cb82611367565b5f60608082808083815f80516020612b1c83398151915280549091501580156109fb57506001810154155b610a445760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064015b60405180910390fd5b610a4c611371565b610a546113af565b604080515f80825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b5f5f80516020612adc833981519152610aa3610a9984610e97565b6002830190610edb565b6001600160d01b03169392505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f80516020612afc833981519152916106369061278c565b6001600160a01b0381165f9081527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d01602052604081205f80516020612adc83398151915290610aa3906113c5565b5f336106c5818585610e31565b83421115610b7057604051632341d78760e11b815260048101859052602401610a3b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610be990610be19060a001604051602081830303815290604052805190602001206113fc565b858585611428565b9050610bf58187611454565b61090281886111c6565b83421115610c235760405163313c898160e11b815260048101859052602401610a3b565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610c518c611492565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610cab826113fc565b90505f610cba82878787611428565b9050896001600160a01b0316816001600160a01b031614610d01576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610a3b565b610d0c8a8a8a610dbb565b50505050505050505050565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b604080518082019091525f80825260208201526106ef83836114d3565b610d8661129c565b6001600160a01b038116610daf57604051631e4fbdf760e01b81525f6004820152602401610a3b565b610db8816112f7565b50565b610dc8838383600161153c565b505050565b5f610dd88484610d18565b90505f19811015610e2b5781811015610e1d57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610a3b565b610e2b84848484035f61153c565b50505050565b6001600160a01b038316610e5a57604051634b637e8f60e11b81525f6004820152602401610a3b565b6001600160a01b038216610e835760405163ec442f0560e01b81525f6004820152602401610a3b565b610dc8838383611620565b5f6106ff61162b565b5f4265ffffffffffff81168310610ed257604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610a3b565b6106ef8361169e565b81545f9081816005811115610f37575f610ef4846116d4565b610efe90856128dd565b5f8881526020902090915081015465ffffffffffff9081169087161015610f2757809150610f35565b610f328160016128f0565b92505b505b5f610f4487878585611827565b90508015610f7e57610f6887610f5b6001846128dd565b5f91825260209091200190565b54600160301b90046001600160d01b0316610f80565b5f5b979650505050505050565b610f93611886565b61092682826118cf565b610fa5611886565b610db881604051806040016040528060018152602001603160f81b81525061191f565b6109c4611886565b610fd8611886565b610db88161197e565b6001600160a01b03821661100a5760405163ec442f0560e01b81525f6004820152602401610a3b565b6109265f8383611620565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061109b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661108f5f80516020612b3c833981519152546001600160a01b031690565b6001600160a01b031614155b156109c45760405163703e46dd60e11b815260040160405180910390fd5b610db861129c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561111b575060408051601f3d908101601f1916820190925261111891810190612903565b60015b61114357604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a3b565b5f80516020612b3c833981519152811461117357604051632a87526960e21b815260048101829052602401610a3b565b610dc88383611986565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c45760405163703e46dd60e11b815260040160405180910390fd5b5f80516020612adc8339815191525f6111de84610945565b6001600160a01b038581165f8181526020869052604080822080546001600160a01b031916898616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610e2b8184611248876119db565b6119e5565b6001600160a01b0381165f9081527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0160205260408120545f80516020612adc833981519152906106ef90611b5b565b336112ce7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146109c45760405163118cdaa760e01b8152336004820152602401610a3b565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f6106cb82611b8b565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10280546060915f80516020612b1c833981519152916106369061278c565b60605f5f80516020612b1c833981519152610625565b80545f9080156113f4576113de83610f5b6001846128dd565b54600160301b90046001600160d01b03166106ef565b5f9392505050565b5f6106cb611408610e8e565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061143888888888611bb3565b9250925092506114488282611c7b565b50909695505050505050565b5f61145e83611492565b9050808214610dc8576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610a3b565b6001600160a01b03165f9081527f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb006020526040902080546001810190915590565b6040805180820182525f80825260208083018290526001600160a01b03861682527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d019052919091205f80516020612adc833981519152906115349084611d33565b949350505050565b5f80516020612afc8339815191526001600160a01b0385166115735760405163e602df0560e01b81525f6004820152602401610a3b565b6001600160a01b03841661159c57604051634a1406b160e11b81525f6004820152602401610a3b565b6001600160a01b038086165f9081526001830160209081526040808320938816835292905220839055811561161957836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161161091815260200190565b60405180910390a35b5050505050565b610dc8838383611da0565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611655611e25565b61165d611e8d565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff8211156116d0576040516306dfcc6560e41b81526030600482015260248101839052604401610a3b565b5090565b5f600182116116e1575090565b816001600160801b82106116fa5760809190911c9060401b5b600160401b82106117105760409190911c9060201b5b64010000000082106117275760209190911c9060101b5b62010000821061173c5760109190911c9060081b5b61010082106117505760089190911c9060041b5b601082106117635760049190911c9060021b5b6004821061176f5760011b5b600302600190811c908185816117875761178761291a565b048201901c9050600181858161179f5761179f61291a565b048201901c905060018185816117b7576117b761291a565b048201901c905060018185816117cf576117cf61291a565b048201901c905060018185816117e7576117e761291a565b048201901c905060018185816117ff576117ff61291a565b048201901c905061181e8185816118185761181861291a565b04821190565b90039392505050565b5f5b8183101561187e575f61183c8484611ecf565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561186a57809250611878565b6118758160016128f0565b93505b50611829565b509392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166109c457604051631afcd79f60e31b815260040160405180910390fd5b6118d7611886565b5f80516020612afc8339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036119108482612972565b5060048101610e2b8382612972565b611927611886565b5f80516020612b1c8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026119608482612972565b506003810161196f8382612972565b505f8082556001909101555050565b610d86611886565b61198f82611ee9565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156119d357610dc88282611f4c565b610926611fbe565b5f6106cb82610983565b5f80516020612adc8339815191526001600160a01b0384811690841614801590611a0e57505f82115b15610e2b576001600160a01b03841615611ab7576001600160a01b0384165f90815260018201602052604081208190611a5290611fdd611a4d87611fe8565b61201b565b6001600160d01b031691506001600160d01b03169150856001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611aac929190918252602082015260400190565b60405180910390a250505b6001600160a01b03831615610e2b576001600160a01b0383165f90815260018201602052604081208190611af19061204c611a4d87611fe8565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b4b929190918252602082015260400190565b60405180910390a2505050505050565b5f63ffffffff8211156116d0576040516306dfcc6560e41b81526020600482015260248101839052604401610a3b565b5f807f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00610994565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611bec57505f91506003905082611c71565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611c3d573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116611c6857505f925060019150829050611c71565b92505f91508190505b9450945094915050565b5f826003811115611c8e57611c8e612a32565b03611c97575050565b6001826003811115611cab57611cab612a32565b03611cc95760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611cdd57611cdd612a32565b03611cfe5760405163fce698f760e01b815260048101829052602401610a3b565b6003826003811115611d1257611d12612a32565b03610926576040516335e2f38360e21b815260048101829052602401610a3b565b604080518082019091525f8082526020820152825f018263ffffffff1681548110611d6057611d60612a46565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611dab838383612057565b6001600160a01b038316611e1a575f611de27f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace025490565b90506001600160d01b0380821115611e1757604051630e58ae9360e11b81526004810183905260248101829052604401610a3b565b50505b610dc8838383612190565b5f5f80516020612b1c83398151915281611e3d611371565b805190915015611e5557805160209091012092915050565b81548015611e64579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b5f5f80516020612b1c83398151915281611ea56113af565b805190915015611ebd57805160209091012092915050565b60018201548015611e64579392505050565b5f611edd6002848418612a5a565b6106ef908484166128f0565b806001600160a01b03163b5f03611f1e57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a3b565b5f80516020612b3c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051611f689190612a79565b5f60405180830381855af49150503d805f8114611fa0576040519150601f19603f3d011682016040523d82523d5f602084013e611fa5565b606091505b5091509150611fb5858383612201565b95945050505050565b34156109c45760405163b398979f60e01b815260040160405180910390fd5b5f6106ef8284612a94565b5f6001600160d01b038211156116d0576040516306dfcc6560e41b815260d0600482015260248101839052604401610a3b565b5f8061203f4261203761202d886113c5565b868863ffffffff16565b87919061225d565b915091505b935093915050565b5f6106ef8284612abb565b5f80516020612afc8339815191526001600160a01b0384166120915781816002015f82825461208691906128f0565b909155506121019050565b6001600160a01b0384165f90815260208290526040902054828110156120e35760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610a3b565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b03831661211f57600281018054839003905561213d565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161218291815260200190565b60405180910390a350505050565b5f80516020612adc8339815191526001600160a01b0384166121c2576121bf8160020161204c611a4d85611fe8565b50505b6001600160a01b0383166121e6576121e381600201611fdd611a4d85611fe8565b50505b610e2b6121f285610945565b6121fb85610945565b846119e5565b606082612216576122118261226a565b6106ef565b815115801561222d57506001600160a01b0384163b155b1561225657604051639996b31560e01b81526001600160a01b0385166004820152602401610a3b565b50806106ef565b5f8061203f858585612293565b80511561227a5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b82545f9081908015612389575f6122af87610f5b6001856128dd565b805490915065ffffffffffff80821691600160301b90046001600160d01b03169088168211156122f257604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff160361232b57825465ffffffffffff16600160301b6001600160d01b0389160217835561237b565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f555f8f81529190912094519151909216600160301b029216919091179101555b945085935061204492505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081612044565b5f5b838110156123fd5781810151838201526020016123e5565b50505f910152565b5f815180845261241c8160208601602086016123e3565b601f01601f19169290920160200192915050565b602081525f6106ef6020830184612405565b80356001600160a01b0381168114612458575f80fd5b919050565b5f806040838503121561246e575f80fd5b61247783612442565b946020939093013593505050565b5f805f60608486031215612497575f80fd5b6124a084612442565b92506124ae60208501612442565b9150604084013590509250925092565b5f80604083850312156124cf575f80fd5b6124d883612442565b91506124e660208401612442565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215612514575f80fd5b61251d83612442565b9150602083013567ffffffffffffffff80821115612539575f80fd5b818501915085601f83011261254c575f80fd5b81358181111561255e5761255e6124ef565b604051601f8201601f19908116603f01168101908382118183101715612586576125866124ef565b8160405282815288602084870101111561259e575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f602082840312156125cf575f80fd5b6106ef82612442565b60ff60f81b881681525f602060e060208401526125f860e084018a612405565b838103604085015261260a818a612405565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b8181101561265d57835183529284019291840191600101612641565b50909c9b505050505050505050505050565b5f6020828403121561267f575f80fd5b5035919050565b803560ff81168114612458575f80fd5b5f805f805f8060c087890312156126ab575f80fd5b6126b487612442565b955060208701359450604087013593506126d060608801612686565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a031215612700575f80fd5b61270988612442565b965061271760208901612442565b9550604088013594506060880135935061273360808901612686565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215612760575f80fd5b61276983612442565b9150602083013563ffffffff81168114612781575f80fd5b809150509250929050565b600181811c908216806127a057607f821691505b6020821081036127be57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561281257815f19048211156127f8576127f86127c4565b8085161561280557918102915b93841c93908002906127dd565b509250929050565b5f82612828575060016106cb565b8161283457505f6106cb565b816001811461284a576002811461285457612870565b60019150506106cb565b60ff841115612865576128656127c4565b50506001821b6106cb565b5060208310610133831016604e8410600b8410161715612893575081810a6106cb565b61289d83836127d8565b805f19048211156128b0576128b06127c4565b029392505050565b5f6106ef60ff84168361281a565b80820281158282048414176106cb576106cb6127c4565b818103818111156106cb576106cb6127c4565b808201808211156106cb576106cb6127c4565b5f60208284031215612913575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b601f821115610dc857805f5260205f20601f840160051c810160208510156129535750805b601f840160051c820191505b81811015611619575f815560010161295f565b815167ffffffffffffffff81111561298c5761298c6124ef565b6129a08161299a845461278c565b8461292e565b602080601f8311600181146129d3575f84156129bc5750858301515b5f19600386901b1c1916600185901b178555612a2a565b5f85815260208120601f198616915b82811015612a01578886015182559484019460019091019084016129e2565b5085821015612a1e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f82612a7457634e487b7160e01b5f52601260045260245ffd5b500490565b5f8251612a8a8184602087016123e3565b9190910192915050565b6001600160d01b03828116828216039080821115612ab457612ab46127c4565b5092915050565b6001600160d01b03818116838216019080821115612ab457612ab46127c456fee8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220ca54c6c59aca917cfd139c6ebb26882ae2ff0ba831e27d74043d1b416a13538764736f6c63430008160033",
		"opcodes": "PUSH1 0xA0 PUSH1 0x40 MSTORE ADDRESS PUSH1 0x80 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x14 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH3 0x1F PUSH3 0x25 JUMP JUMPDEST PUSH3 0xD9 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH9 0x10000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x76 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 AND EQ PUSH3 0xD6 JUMPI DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x2B91 PUSH3 0x100 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x1020 ADD MSTORE DUP2 DUP2 PUSH2 0x1049 ADD MSTORE PUSH2 0x1188 ADD MSTORE PUSH2 0x2B91 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x9AB24EB0 GT PUSH2 0x92 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x62 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x56B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x58A JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x51C JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x54C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xCD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x44D JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4CA JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x426 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x485CC955 GT PUSH2 0x168 JUMPI DUP1 PUSH4 0x587CDE1E GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x336 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x2AD JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x222 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DD PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EA SWAP2 SWAP1 PUSH2 0x2430 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x245D JUMP JUMPDEST PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x2485 JUMP JUMPDEST PUSH2 0x6D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x6F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x245D JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x74F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH14 0x6D6F64653D74696D657374616D7 PUSH1 0x94 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1DD JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x2503 JUMP JUMPDEST PUSH2 0x90B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x341 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x92A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x369 PUSH2 0x364 CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x96E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x3BA CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x979 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x9B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x412 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x421 CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x9C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x431 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x43A PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EA SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x369 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x266F JUMP JUMPDEST PUSH2 0xA7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF TIMESTAMP AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DD PUSH2 0xAB3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0xAF1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0x245D JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x557 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x566 CALLDATASIZE PUSH1 0x4 PUSH2 0x2696 JUMP JUMPDEST PUSH2 0xB4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x576 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x585 CALLDATASIZE PUSH1 0x4 PUSH2 0x26EA JUMP JUMPDEST PUSH2 0xBFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x595 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x5A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0xD18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C8 PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x274F JUMP JUMPDEST PUSH2 0xD61 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x60E CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x636 SWAP1 PUSH2 0x278C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x662 SWAP1 PUSH2 0x278C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x684 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x690 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x6C5 DUP2 DUP6 DUP6 PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x6DE DUP6 DUP3 DUP6 PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x6E9 DUP6 DUP6 DUP6 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6FF PUSH2 0xE8E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x73E PUSH2 0x71F DUP5 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x794 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x7B0 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x7BE JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x806 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x851 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4E6578742050726F205669737461 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x27282B PUSH1 0xE9 SHL DUP2 MSTORE POP PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x880 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4E6578742050726F205669737461 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x888 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x891 DUP7 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x899 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x8BC DUP8 PUSH2 0x8A9 PUSH1 0x12 PUSH1 0xA PUSH2 0x28B8 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 PUSH4 0x16BF96C9 PUSH2 0x28C6 JUMP JUMPDEST PUSH2 0xFE1 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x902 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x913 PUSH2 0x1015 JUMP JUMPDEST PUSH2 0x91C DUP3 PUSH2 0x10B9 JUMP JUMPDEST PUSH2 0x926 DUP3 DUP3 PUSH2 0x10C1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x933 PUSH2 0x117D JUMP JUMPDEST POP PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x926 DUP2 DUP4 PUSH2 0x11C6 JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x124D JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x9BB PUSH2 0x129C JUMP JUMPDEST PUSH2 0x9C4 PUSH0 PUSH2 0x12F7 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x1367 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 DUP2 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD SWAP1 SWAP2 POP ISZERO DUP1 ISZERO PUSH2 0x9FB JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD ISZERO JUMPDEST PUSH2 0xA44 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1152540DCC4C8E88155B9A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA4C PUSH2 0x1371 JUMP JUMPDEST PUSH2 0xA54 PUSH2 0x13AF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP13 SWAP4 SWAP12 POP SWAP2 SWAP10 POP CHAINID SWAP9 POP ADDRESS SWAP8 POP SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xAA3 PUSH2 0xA99 DUP5 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SWAP1 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x636 SWAP1 PUSH2 0x278C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0xE8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0xAA3 SWAP1 PUSH2 0x13C5 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x6C5 DUP2 DUP6 DUP6 PUSH2 0xE31 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2341D787 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0xBE9 SWAP1 PUSH2 0xBE1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x13FC JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x1428 JUMP JUMPDEST SWAP1 POP PUSH2 0xBF5 DUP2 DUP8 PUSH2 0x1454 JUMP JUMPDEST PUSH2 0x902 DUP2 DUP9 PUSH2 0x11C6 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xC51 DUP13 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xCAB DUP3 PUSH2 0x13FC JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xCBA DUP3 DUP8 DUP8 DUP8 PUSH2 0x1428 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD01 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xD0C DUP11 DUP11 DUP11 PUSH2 0xDBB JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6EF DUP4 DUP4 PUSH2 0x14D3 JUMP JUMPDEST PUSH2 0xD86 PUSH2 0x129C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDAF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xDB8 DUP2 PUSH2 0x12F7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x153C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xDD8 DUP5 DUP5 PUSH2 0xD18 JUMP JUMPDEST SWAP1 POP PUSH0 NOT DUP2 LT ISZERO PUSH2 0xE2B JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE1D JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xE2B DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x153C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH2 0x1620 JUMP JUMPDEST PUSH0 PUSH2 0x6FF PUSH2 0x162B JUMP JUMPDEST PUSH0 TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP4 LT PUSH2 0xED2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7669FC0F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x6EF DUP4 PUSH2 0x169E JUMP JUMPDEST DUP2 SLOAD PUSH0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xF37 JUMPI PUSH0 PUSH2 0xEF4 DUP5 PUSH2 0x16D4 JUMP JUMPDEST PUSH2 0xEFE SWAP1 DUP6 PUSH2 0x28DD JUMP JUMPDEST PUSH0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP8 AND LT ISZERO PUSH2 0xF27 JUMPI DUP1 SWAP2 POP PUSH2 0xF35 JUMP JUMPDEST PUSH2 0xF32 DUP2 PUSH1 0x1 PUSH2 0x28F0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST PUSH0 PUSH2 0xF44 DUP8 DUP8 DUP6 DUP6 PUSH2 0x1827 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xF7E JUMPI PUSH2 0xF68 DUP8 PUSH2 0xF5B PUSH1 0x1 DUP5 PUSH2 0x28DD JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0xF80 JUMP JUMPDEST PUSH0 JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF93 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0x926 DUP3 DUP3 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0xFA5 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0xDB8 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x191F JUMP JUMPDEST PUSH2 0x9C4 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0xFD8 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0xDB8 DUP2 PUSH2 0x197E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x926 PUSH0 DUP4 DUP4 PUSH2 0x1620 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x109B JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x108F PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB8 PUSH2 0x129C JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x111B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1118 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2903 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1143 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1173 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 PUSH2 0x1986 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH0 PUSH2 0x11DE DUP5 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP10 DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP5 SWAP6 POP SWAP4 SWAP3 DUP6 AND SWAP3 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0xE2B DUP2 DUP5 PUSH2 0x1248 DUP8 PUSH2 0x19DB JUMP JUMPDEST PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0xE8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x6EF SWAP1 PUSH2 0x1B5B JUMP JUMPDEST CALLER PUSH2 0x12CE PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x1B8B JUMP JUMPDEST PUSH32 0xA16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D102 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x636 SWAP1 PUSH2 0x278C JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x625 JUMP JUMPDEST DUP1 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0x13F4 JUMPI PUSH2 0x13DE DUP4 PUSH2 0xF5B PUSH1 0x1 DUP5 PUSH2 0x28DD JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0x6EF JUMP JUMPDEST PUSH0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6CB PUSH2 0x1408 PUSH2 0xE8E JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x1438 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1BB3 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1448 DUP3 DUP3 PUSH2 0x1C7B JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x145E DUP4 PUSH2 0x1492 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0xDC8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D4B623 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH32 0xE8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x1534 SWAP1 DUP5 PUSH2 0x1D33 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1573 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x159C JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP2 ISZERO PUSH2 0x1619 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1610 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH2 0x1DA0 JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1655 PUSH2 0x1E25 JUMP JUMPDEST PUSH2 0x165D PUSH2 0x1E8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP3 GT PUSH2 0x16E1 JUMPI POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x16FA JUMPI PUSH1 0x80 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x40 SHL JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0x1710 JUMPI PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x20 SHL JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x1727 JUMPI PUSH1 0x20 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x10 SHL JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x173C JUMPI PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x8 SHL JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x1750 JUMPI PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x4 SHL JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x1763 JUMPI PUSH1 0x4 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x2 SHL JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x176F JUMPI PUSH1 0x1 SHL JUMPDEST PUSH1 0x3 MUL PUSH1 0x1 SWAP1 DUP2 SHR SWAP1 DUP2 DUP6 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1787 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x179F JUMPI PUSH2 0x179F PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17B7 JUMPI PUSH2 0x17B7 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17CF JUMPI PUSH2 0x17CF PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17E7 JUMPI PUSH2 0x17E7 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17FF JUMPI PUSH2 0x17FF PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0x181E DUP2 DUP6 DUP2 PUSH2 0x1818 JUMPI PUSH2 0x1818 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 GT SWAP1 JUMP JUMPDEST SWAP1 SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x187E JUMPI PUSH0 PUSH2 0x183C DUP5 DUP5 PUSH2 0x1ECF JUMP JUMPDEST PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH6 0xFFFFFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x186A JUMPI DUP1 SWAP3 POP PUSH2 0x1878 JUMP JUMPDEST PUSH2 0x1875 DUP2 PUSH1 0x1 PUSH2 0x28F0 JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x1829 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18D7 PUSH2 0x1886 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 PUSH2 0x1910 DUP5 DUP3 PUSH2 0x2972 JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD PUSH2 0xE2B DUP4 DUP3 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x1927 PUSH2 0x1886 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH32 0xA16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D102 PUSH2 0x1960 DUP5 DUP3 PUSH2 0x2972 JUMP JUMPDEST POP PUSH1 0x3 DUP2 ADD PUSH2 0x196F DUP4 DUP3 PUSH2 0x2972 JUMP JUMPDEST POP PUSH0 DUP1 DUP3 SSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE POP POP JUMP JUMPDEST PUSH2 0xD86 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0x198F DUP3 PUSH2 0x1EE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x19D3 JUMPI PUSH2 0xDC8 DUP3 DUP3 PUSH2 0x1F4C JUMP JUMPDEST PUSH2 0x926 PUSH2 0x1FBE JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP1 DUP5 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x1A0E JUMPI POP PUSH0 DUP3 GT JUMPDEST ISZERO PUSH2 0xE2B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1AB7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1A52 SWAP1 PUSH2 0x1FDD PUSH2 0x1A4D DUP8 PUSH2 0x1FE8 JUMP JUMPDEST PUSH2 0x201B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1AAC SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xE2B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1AF1 SWAP1 PUSH2 0x204C PUSH2 0x1A4D DUP8 PUSH2 0x1FE8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1B4B SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 PUSH32 0x5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00 PUSH2 0x994 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0x1BEC JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0x1C71 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C3D JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C68 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0x1C71 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1C8E JUMPI PUSH2 0x1C8E PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x1C97 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1CAB JUMPI PUSH2 0x1CAB PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x1CC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1CDD JUMPI PUSH2 0x1CDD PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x1CFE JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1D12 JUMPI PUSH2 0x1D12 PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x926 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH0 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1D60 JUMPI PUSH2 0x1D60 PUSH2 0x2A46 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1DAB DUP4 DUP4 DUP4 PUSH2 0x2057 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1E1A JUMPI PUSH0 PUSH2 0x1DE2 PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1E17 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE58AE93 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH2 0x2190 JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 PUSH2 0x1E3D PUSH2 0x1371 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1E55 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP1 ISZERO PUSH2 0x1E64 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 PUSH2 0x1EA5 PUSH2 0x13AF JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1EBD JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x1E64 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1EDD PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x2A5A JUMP JUMPDEST PUSH2 0x6EF SWAP1 DUP5 DUP5 AND PUSH2 0x28F0 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0x1F1E JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x1F68 SWAP2 SWAP1 PUSH2 0x2A79 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1FA0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FA5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FB5 DUP6 DUP4 DUP4 PUSH2 0x2201 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x6EF DUP3 DUP5 PUSH2 0x2A94 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0xD0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x203F TIMESTAMP PUSH2 0x2037 PUSH2 0x202D DUP9 PUSH2 0x13C5 JUMP JUMPDEST DUP7 DUP9 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6EF DUP3 DUP5 PUSH2 0x2ABB JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2091 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x2086 SWAP2 SWAP1 PUSH2 0x28F0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2101 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x20E3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x211F JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 0x213D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x2182 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x21C2 JUMPI PUSH2 0x21BF DUP2 PUSH1 0x2 ADD PUSH2 0x204C PUSH2 0x1A4D DUP6 PUSH2 0x1FE8 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x21E6 JUMPI PUSH2 0x21E3 DUP2 PUSH1 0x2 ADD PUSH2 0x1FDD PUSH2 0x1A4D DUP6 PUSH2 0x1FE8 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xE2B PUSH2 0x21F2 DUP6 PUSH2 0x945 JUMP JUMPDEST PUSH2 0x21FB DUP6 PUSH2 0x945 JUMP JUMPDEST DUP5 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x2216 JUMPI PUSH2 0x2211 DUP3 PUSH2 0x226A JUMP JUMPDEST PUSH2 0x6EF JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x222D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x2256 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST POP DUP1 PUSH2 0x6EF JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x203F DUP6 DUP6 DUP6 PUSH2 0x2293 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x227A JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD6BDA275 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x2389 JUMPI PUSH0 PUSH2 0x22AF DUP8 PUSH2 0xF5B PUSH1 0x1 DUP6 PUSH2 0x28DD JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP1 DUP9 AND DUP3 GT ISZERO PUSH2 0x22F2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2520601D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP8 PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND SUB PUSH2 0x232B JUMPI DUP3 SLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP10 AND MUL OR DUP4 SSTORE PUSH2 0x237B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP11 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP11 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP14 SLOAD PUSH1 0x1 DUP2 ADD DUP16 SSTORE PUSH0 DUP16 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST SWAP5 POP DUP6 SWAP4 POP PUSH2 0x2044 SWAP3 POP POP POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH2 0x2044 JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23FD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x23E5 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x241C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x23E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x6EF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2405 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2458 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x246E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2477 DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2497 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24A0 DUP5 PUSH2 0x2442 JUMP JUMPDEST SWAP3 POP PUSH2 0x24AE PUSH1 0x20 DUP6 ADD PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24CF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24D8 DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH2 0x24E6 PUSH1 0x20 DUP5 ADD PUSH2 0x2442 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2514 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x251D DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2539 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x254C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x255E JUMPI PUSH2 0x255E PUSH2 0x24EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2586 JUMPI PUSH2 0x2586 PUSH2 0x24EF JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x259E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25CF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x6EF DUP3 PUSH2 0x2442 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x25F8 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x2405 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x260A DUP2 DUP11 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x265D JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2641 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x267F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2458 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x26AB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x26B4 DUP8 PUSH2 0x2442 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x26D0 PUSH1 0x60 DUP9 ADD PUSH2 0x2686 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2700 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2709 DUP9 PUSH2 0x2442 JUMP JUMPDEST SWAP7 POP PUSH2 0x2717 PUSH1 0x20 DUP10 ADD PUSH2 0x2442 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2733 PUSH1 0x80 DUP10 ADD PUSH2 0x2686 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2760 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2769 DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2781 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x27A0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x27BE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2812 JUMPI DUP2 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x27F8 JUMPI PUSH2 0x27F8 PUSH2 0x27C4 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2805 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x27DD JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x2828 JUMPI POP PUSH1 0x1 PUSH2 0x6CB JUMP JUMPDEST DUP2 PUSH2 0x2834 JUMPI POP PUSH0 PUSH2 0x6CB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x284A JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2854 JUMPI PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x6CB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2865 JUMPI PUSH2 0x2865 PUSH2 0x27C4 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x6CB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2893 JUMPI POP DUP2 DUP2 EXP PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x289D DUP4 DUP4 PUSH2 0x27D8 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x28B0 JUMPI PUSH2 0x28B0 PUSH2 0x27C4 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6EF PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x281A JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x27C4 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x27C4 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x27C4 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2913 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xDC8 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2953 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1619 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x295F JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x298C JUMPI PUSH2 0x298C PUSH2 0x24EF JUMP JUMPDEST PUSH2 0x29A0 DUP2 PUSH2 0x299A DUP5 SLOAD PUSH2 0x278C JUMP JUMPDEST DUP5 PUSH2 0x292E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29D3 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x29BC JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2A2A JUMP JUMPDEST PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2A01 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x29E2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2A1E JUMPI DUP8 DUP6 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP5 PUSH1 0x1 SHL ADD DUP6 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0x2A74 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x2A8A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x23E3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2AB4 JUMPI PUSH2 0x2AB4 PUSH2 0x27C4 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2AB4 JUMPI PUSH2 0x2AB4 PUSH2 0x27C4 JUMP INVALID 0xE8 0xB2 PUSH13 0x30FAD74198956032A3533D9033 DUP6 0xD5 PUSH14 0xD795AF560196F9C78D4AF40D0052 0xC6 ORIGIN SELFBALANCE 0xE1 DELEGATECALL PUSH30 0xB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00A16A46D942 PUSH2 0xC751 PUSH29 0xC8FF89F61C0CE93598E3C849801011DEE649A6A557D100360894A13BA1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220CA SLOAD 0xC6 0xC5 SWAP11 0xCA SWAP2 PUSH29 0xFD139C6EBB26882AE2FF0BA831E27D74043D1B416A13538764736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ",
		"sourceMap": "955:1459:34:-:0;;;1171:4:3;1128:48;;1155:53:34;;;;;;;;;-1:-1:-1;1179:22:34;:20;:22::i;:::-;955:1459;;7711:422:2;8870:21;7900:15;;;;;;;7896:76;;;7938:23;;-1:-1:-1;;;7938:23:2;;;;;;;;;;;7896:76;7985:14;;-1:-1:-1;;;;;7985:14:2;;;:34;7981:146;;8035:33;;-1:-1:-1;;;;;;8035:33:2;-1:-1:-1;;;;;8035:33:2;;;;;8087:29;;158:50:35;;;8087:29:2;;146:2:35;131:18;8087:29:2;;;;;;;7981:146;7760:373;7711:422::o;14:200:35:-;955:1459:34;;;;;;;;;;;;;;;;;;;;;;"
	},
	"abi": [
		{
			"inputs": [],
			"stateMutability": "nonpayable",
			"type": "constructor"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "target",
					"type": "address"
				}
			],
			"name": "AddressEmptyCode",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "CheckpointUnorderedInsertion",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ECDSAInvalidSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "length",
					"type": "uint256"
				}
			],
			"name": "ECDSAInvalidSignatureLength",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "ECDSAInvalidSignatureS",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "implementation",
					"type": "address"
				}
			],
			"name": "ERC1967InvalidImplementation",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ERC1967NonPayable",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "increasedSupply",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "cap",
					"type": "uint256"
				}
			],
			"name": "ERC20ExceededSafeSupply",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "allowance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientAllowance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "balance",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "needed",
					"type": "uint256"
				}
			],
			"name": "ERC20InsufficientBalance",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "approver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidApprover",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "receiver",
					"type": "address"
				}
			],
			"name": "ERC20InvalidReceiver",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "sender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "ERC20InvalidSpender",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				}
			],
			"name": "ERC2612ExpiredSignature",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "signer",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "ERC2612InvalidSigner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "timepoint",
					"type": "uint256"
				},
				{
					"internalType": "uint48",
					"name": "clock",
					"type": "uint48"
				}
			],
			"name": "ERC5805FutureLookup",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "ERC6372InconsistentClock",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "FailedCall",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "currentNonce",
					"type": "uint256"
				}
			],
			"name": "InvalidAccountNonce",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "InvalidInitialization",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "NotInitializing",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "OwnableInvalidOwner",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "OwnableUnauthorizedAccount",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint8",
					"name": "bits",
					"type": "uint8"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "SafeCastOverflowedUintDowncast",
			"type": "error"
		},
		{
			"inputs": [],
			"name": "UUPSUnauthorizedCallContext",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "bytes32",
					"name": "slot",
					"type": "bytes32"
				}
			],
			"name": "UUPSUnsupportedProxiableUUID",
			"type": "error"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "expiry",
					"type": "uint256"
				}
			],
			"name": "VotesExpiredSignature",
			"type": "error"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Approval",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "delegator",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "fromDelegate",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "toDelegate",
					"type": "address"
				}
			],
			"name": "DelegateChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "delegate",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "previousVotes",
					"type": "uint256"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "newVotes",
					"type": "uint256"
				}
			],
			"name": "DelegateVotesChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [],
			"name": "EIP712DomainChanged",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": false,
					"internalType": "uint64",
					"name": "version",
					"type": "uint64"
				}
			],
			"name": "Initialized",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "previousOwner",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "OwnershipTransferred",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"indexed": true,
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"indexed": false,
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "Transfer",
			"type": "event"
		},
		{
			"anonymous": false,
			"inputs": [
				{
					"indexed": true,
					"internalType": "address",
					"name": "implementation",
					"type": "address"
				}
			],
			"name": "Upgraded",
			"type": "event"
		},
		{
			"inputs": [],
			"name": "CLOCK_MODE",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "pure",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "DOMAIN_SEPARATOR",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "UPGRADE_INTERFACE_VERSION",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				}
			],
			"name": "allowance",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "approve",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "balanceOf",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint32",
					"name": "pos",
					"type": "uint32"
				}
			],
			"name": "checkpoints",
			"outputs": [
				{
					"components": [
						{
							"internalType": "uint48",
							"name": "_key",
							"type": "uint48"
						},
						{
							"internalType": "uint208",
							"name": "_value",
							"type": "uint208"
						}
					],
					"internalType": "struct Checkpoints.Checkpoint208",
					"name": "",
					"type": "tuple"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "clock",
			"outputs": [
				{
					"internalType": "uint48",
					"name": "",
					"type": "uint48"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "decimals",
			"outputs": [
				{
					"internalType": "uint8",
					"name": "",
					"type": "uint8"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "delegatee",
					"type": "address"
				}
			],
			"name": "delegate",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "delegatee",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "nonce",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "expiry",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "delegateBySig",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "delegates",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "eip712Domain",
			"outputs": [
				{
					"internalType": "bytes1",
					"name": "fields",
					"type": "bytes1"
				},
				{
					"internalType": "string",
					"name": "name",
					"type": "string"
				},
				{
					"internalType": "string",
					"name": "version",
					"type": "string"
				},
				{
					"internalType": "uint256",
					"name": "chainId",
					"type": "uint256"
				},
				{
					"internalType": "address",
					"name": "verifyingContract",
					"type": "address"
				},
				{
					"internalType": "bytes32",
					"name": "salt",
					"type": "bytes32"
				},
				{
					"internalType": "uint256[]",
					"name": "extensions",
					"type": "uint256[]"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "uint256",
					"name": "timepoint",
					"type": "uint256"
				}
			],
			"name": "getPastTotalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "timepoint",
					"type": "uint256"
				}
			],
			"name": "getPastVotes",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "getVotes",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "recipient",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "initialOwner",
					"type": "address"
				}
			],
			"name": "initialize",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "name",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				}
			],
			"name": "nonces",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "account",
					"type": "address"
				}
			],
			"name": "numCheckpoints",
			"outputs": [
				{
					"internalType": "uint32",
					"name": "",
					"type": "uint32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "owner",
			"outputs": [
				{
					"internalType": "address",
					"name": "",
					"type": "address"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "owner",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "spender",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				},
				{
					"internalType": "uint256",
					"name": "deadline",
					"type": "uint256"
				},
				{
					"internalType": "uint8",
					"name": "v",
					"type": "uint8"
				},
				{
					"internalType": "bytes32",
					"name": "r",
					"type": "bytes32"
				},
				{
					"internalType": "bytes32",
					"name": "s",
					"type": "bytes32"
				}
			],
			"name": "permit",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "proxiableUUID",
			"outputs": [
				{
					"internalType": "bytes32",
					"name": "",
					"type": "bytes32"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "renounceOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "symbol",
			"outputs": [
				{
					"internalType": "string",
					"name": "",
					"type": "string"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [],
			"name": "totalSupply",
			"outputs": [
				{
					"internalType": "uint256",
					"name": "",
					"type": "uint256"
				}
			],
			"stateMutability": "view",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transfer",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "from",
					"type": "address"
				},
				{
					"internalType": "address",
					"name": "to",
					"type": "address"
				},
				{
					"internalType": "uint256",
					"name": "value",
					"type": "uint256"
				}
			],
			"name": "transferFrom",
			"outputs": [
				{
					"internalType": "bool",
					"name": "",
					"type": "bool"
				}
			],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newOwner",
					"type": "address"
				}
			],
			"name": "transferOwnership",
			"outputs": [],
			"stateMutability": "nonpayable",
			"type": "function"
		},
		{
			"inputs": [
				{
					"internalType": "address",
					"name": "newImplementation",
					"type": "address"
				},
				{
					"internalType": "bytes",
					"name": "data",
					"type": "bytes"
				}
			],
			"name": "upgradeToAndCall",
			"outputs": [],
			"stateMutability": "payable",
			"type": "function"
		}
	],
	"storageLayout": {
		"storage": [],
		"types": null
	},
	"web3Deploy": "var nextprovistaContract = new web3.eth.Contract([{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CheckpointUnorderedInsertion\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"increasedSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"ERC20ExceededSafeSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"clock\",\"type\":\"uint48\"}],\"name\":\"ERC5805FutureLookup\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC6372InconsistentClock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"bits\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"SafeCastOverflowedUintDowncast\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"}],\"name\":\"VotesExpiredSignature\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotes\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOCK_MODE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"pos\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"components\":[{\"internalType\":\"uint48\",\"name\":\"_key\",\"type\":\"uint48\"},{\"internalType\":\"uint208\",\"name\":\"_value\",\"type\":\"uint208\"}],\"internalType\":\"struct Checkpoints.Checkpoint208\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clock\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timepoint\",\"type\":\"uint256\"}],\"name\":\"getPastVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]);\nvar nextprovista = nextprovistaContract.deploy({\n     data: '0x60a06040523060805234801562000014575f80fd5b506200001f62000025565b620000d9565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff1615620000765760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b0390811614620000d65780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b608051612b91620001005f395f81816110200152818161104901526111880152612b915ff3fe6080604052600436106101c5575f3560e01c8063715018a6116100f25780639ab24eb011610092578063d505accf11610062578063d505accf1461056b578063dd62ed3e1461058a578063f1127ed8146105a9578063f2fde38b146105f4575f80fd5b80639ab24eb0146104de578063a9059cbb146104fd578063ad3cb1cc1461051c578063c3cda5201461054c575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461044d5780638e539e8c1461048957806391ddadf4146104a857806395d89b41146104ca575f80fd5b8063715018a6146103f35780637ecebe001461040757806384b0196e14610426575f80fd5b8063485cc95511610168578063587cde1e11610138578063587cde1e1461034a5780635c19a95c146103815780636fcfff45146103a057806370a08231146103d4575f80fd5b8063485cc955146102cc5780634bf5d7e9146102ed5780634f1ef2861461032357806352d1902d14610336575f80fd5b806323b872dd116101a357806323b872dd1461025f578063313ce5671461027e5780633644e515146102995780633a46b1a8146102ad575f80fd5b806306fdde03146101c9578063095ea7b3146101f357806318160ddd14610222575b5f80fd5b3480156101d4575f80fd5b506101dd610613565b6040516101ea9190612430565b60405180910390f35b3480156101fe575f80fd5b5061021261020d36600461245d565b6106b8565b60405190151581526020016101ea565b34801561022d575f80fd5b507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016101ea565b34801561026a575f80fd5b50610212610279366004612485565b6106d1565b348015610289575f80fd5b50604051601281526020016101ea565b3480156102a4575f80fd5b506102516106f6565b3480156102b8575f80fd5b506102516102c736600461245d565b610704565b3480156102d7575f80fd5b506102eb6102e63660046124be565b61074f565b005b3480156102f8575f80fd5b5060408051808201909152600e81526d06d6f64653d74696d657374616d760941b60208201526101dd565b6102eb610331366004612503565b61090b565b348015610341575f80fd5b5061025161092a565b348015610355575f80fd5b506103696103643660046125bf565b610945565b6040516001600160a01b0390911681526020016101ea565b34801561038c575f80fd5b506102eb61039b3660046125bf565b61096e565b3480156103ab575f80fd5b506103bf6103ba3660046125bf565b610979565b60405163ffffffff90911681526020016101ea565b3480156103df575f80fd5b506102516103ee3660046125bf565b610983565b3480156103fe575f80fd5b506102eb6109b3565b348015610412575f80fd5b506102516104213660046125bf565b6109c6565b348015610431575f80fd5b5061043a6109d0565b6040516101ea97969594939291906125d8565b348015610458575f80fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610369565b348015610494575f80fd5b506102516104a336600461266f565b610a7e565b3480156104b3575f80fd5b5060405165ffffffffffff421681526020016101ea565b3480156104d5575f80fd5b506101dd610ab3565b3480156104e9575f80fd5b506102516104f83660046125bf565b610af1565b348015610508575f80fd5b5061021261051736600461245d565b610b3f565b348015610527575f80fd5b506101dd604051806040016040528060058152602001640352e302e360dc1b81525081565b348015610557575f80fd5b506102eb610566366004612696565b610b4c565b348015610576575f80fd5b506102eb6105853660046126ea565b610bff565b348015610595575f80fd5b506102516105a43660046124be565b610d18565b3480156105b4575f80fd5b506105c86105c336600461274f565b610d61565b60408051825165ffffffffffff1681526020928301516001600160d01b031692810192909252016101ea565b3480156105ff575f80fd5b506102eb61060e3660046125bf565b610d7e565b60605f5f80516020612afc8339815191525b90508060030180546106369061278c565b80601f01602080910402602001604051908101604052809291908181526020018280546106629061278c565b80156106ad5780601f10610684576101008083540402835291602001916106ad565b820191905f5260205f20905b81548152906001019060200180831161069057829003601f168201915b505050505091505090565b5f336106c5818585610dbb565b60019150505b92915050565b5f336106de858285610dcd565b6106e9858585610e31565b60019150505b9392505050565b5f6106ff610e8e565b905090565b5f5f80516020612adc83398151915261073e61071f84610e97565b6001600160a01b0386165f908152600184016020526040902090610edb565b6001600160d01b0316949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f811580156107945750825b90505f8267ffffffffffffffff1660011480156107b05750303b155b9050811580156107be575080155b156107dc5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561080657845460ff60401b1916600160401b1785555b6108516040518060400160405280600e81526020016d4e6578742050726f20566973746160901b8152506040518060400160405280600381526020016227282b60e91b815250610f8b565b6108806040518060400160405280600e81526020016d4e6578742050726f20566973746160901b815250610f9d565b610888610fc8565b61089186610fd0565b610899610fc8565b6108bc876108a96012600a6128b8565b6108b7906316bf96c96128c6565b610fe1565b831561090257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610913611015565b61091c826110b9565b61092682826110c1565b5050565b5f61093361117d565b505f80516020612b3c83398151915290565b6001600160a01b039081165f9081525f80516020612adc83398151915260205260409020541690565b3361092681836111c6565b5f6106cb8261124d565b5f805f80516020612afc8339815191525b6001600160a01b039093165f9081526020939093525050604090205490565b6109bb61129c565b6109c45f6112f7565b565b5f6106cb82611367565b5f60608082808083815f80516020612b1c83398151915280549091501580156109fb57506001810154155b610a445760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064015b60405180910390fd5b610a4c611371565b610a546113af565b604080515f80825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b5f5f80516020612adc833981519152610aa3610a9984610e97565b6002830190610edb565b6001600160d01b03169392505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f80516020612afc833981519152916106369061278c565b6001600160a01b0381165f9081527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d01602052604081205f80516020612adc83398151915290610aa3906113c5565b5f336106c5818585610e31565b83421115610b7057604051632341d78760e11b815260048101859052602401610a3b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610be990610be19060a001604051602081830303815290604052805190602001206113fc565b858585611428565b9050610bf58187611454565b61090281886111c6565b83421115610c235760405163313c898160e11b815260048101859052602401610a3b565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610c518c611492565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610cab826113fc565b90505f610cba82878787611428565b9050896001600160a01b0316816001600160a01b031614610d01576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610a3b565b610d0c8a8a8a610dbb565b50505050505050505050565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b604080518082019091525f80825260208201526106ef83836114d3565b610d8661129c565b6001600160a01b038116610daf57604051631e4fbdf760e01b81525f6004820152602401610a3b565b610db8816112f7565b50565b610dc8838383600161153c565b505050565b5f610dd88484610d18565b90505f19811015610e2b5781811015610e1d57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610a3b565b610e2b84848484035f61153c565b50505050565b6001600160a01b038316610e5a57604051634b637e8f60e11b81525f6004820152602401610a3b565b6001600160a01b038216610e835760405163ec442f0560e01b81525f6004820152602401610a3b565b610dc8838383611620565b5f6106ff61162b565b5f4265ffffffffffff81168310610ed257604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610a3b565b6106ef8361169e565b81545f9081816005811115610f37575f610ef4846116d4565b610efe90856128dd565b5f8881526020902090915081015465ffffffffffff9081169087161015610f2757809150610f35565b610f328160016128f0565b92505b505b5f610f4487878585611827565b90508015610f7e57610f6887610f5b6001846128dd565b5f91825260209091200190565b54600160301b90046001600160d01b0316610f80565b5f5b979650505050505050565b610f93611886565b61092682826118cf565b610fa5611886565b610db881604051806040016040528060018152602001603160f81b81525061191f565b6109c4611886565b610fd8611886565b610db88161197e565b6001600160a01b03821661100a5760405163ec442f0560e01b81525f6004820152602401610a3b565b6109265f8383611620565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061109b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661108f5f80516020612b3c833981519152546001600160a01b031690565b6001600160a01b031614155b156109c45760405163703e46dd60e11b815260040160405180910390fd5b610db861129c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561111b575060408051601f3d908101601f1916820190925261111891810190612903565b60015b61114357604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a3b565b5f80516020612b3c833981519152811461117357604051632a87526960e21b815260048101829052602401610a3b565b610dc88383611986565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c45760405163703e46dd60e11b815260040160405180910390fd5b5f80516020612adc8339815191525f6111de84610945565b6001600160a01b038581165f8181526020869052604080822080546001600160a01b031916898616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610e2b8184611248876119db565b6119e5565b6001600160a01b0381165f9081527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0160205260408120545f80516020612adc833981519152906106ef90611b5b565b336112ce7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146109c45760405163118cdaa760e01b8152336004820152602401610a3b565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f6106cb82611b8b565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10280546060915f80516020612b1c833981519152916106369061278c565b60605f5f80516020612b1c833981519152610625565b80545f9080156113f4576113de83610f5b6001846128dd565b54600160301b90046001600160d01b03166106ef565b5f9392505050565b5f6106cb611408610e8e565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061143888888888611bb3565b9250925092506114488282611c7b565b50909695505050505050565b5f61145e83611492565b9050808214610dc8576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610a3b565b6001600160a01b03165f9081527f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb006020526040902080546001810190915590565b6040805180820182525f80825260208083018290526001600160a01b03861682527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d019052919091205f80516020612adc833981519152906115349084611d33565b949350505050565b5f80516020612afc8339815191526001600160a01b0385166115735760405163e602df0560e01b81525f6004820152602401610a3b565b6001600160a01b03841661159c57604051634a1406b160e11b81525f6004820152602401610a3b565b6001600160a01b038086165f9081526001830160209081526040808320938816835292905220839055811561161957836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161161091815260200190565b60405180910390a35b5050505050565b610dc8838383611da0565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611655611e25565b61165d611e8d565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff8211156116d0576040516306dfcc6560e41b81526030600482015260248101839052604401610a3b565b5090565b5f600182116116e1575090565b816001600160801b82106116fa5760809190911c9060401b5b600160401b82106117105760409190911c9060201b5b64010000000082106117275760209190911c9060101b5b62010000821061173c5760109190911c9060081b5b61010082106117505760089190911c9060041b5b601082106117635760049190911c9060021b5b6004821061176f5760011b5b600302600190811c908185816117875761178761291a565b048201901c9050600181858161179f5761179f61291a565b048201901c905060018185816117b7576117b761291a565b048201901c905060018185816117cf576117cf61291a565b048201901c905060018185816117e7576117e761291a565b048201901c905060018185816117ff576117ff61291a565b048201901c905061181e8185816118185761181861291a565b04821190565b90039392505050565b5f5b8183101561187e575f61183c8484611ecf565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561186a57809250611878565b6118758160016128f0565b93505b50611829565b509392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166109c457604051631afcd79f60e31b815260040160405180910390fd5b6118d7611886565b5f80516020612afc8339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036119108482612972565b5060048101610e2b8382612972565b611927611886565b5f80516020612b1c8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026119608482612972565b506003810161196f8382612972565b505f8082556001909101555050565b610d86611886565b61198f82611ee9565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156119d357610dc88282611f4c565b610926611fbe565b5f6106cb82610983565b5f80516020612adc8339815191526001600160a01b0384811690841614801590611a0e57505f82115b15610e2b576001600160a01b03841615611ab7576001600160a01b0384165f90815260018201602052604081208190611a5290611fdd611a4d87611fe8565b61201b565b6001600160d01b031691506001600160d01b03169150856001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611aac929190918252602082015260400190565b60405180910390a250505b6001600160a01b03831615610e2b576001600160a01b0383165f90815260018201602052604081208190611af19061204c611a4d87611fe8565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b4b929190918252602082015260400190565b60405180910390a2505050505050565b5f63ffffffff8211156116d0576040516306dfcc6560e41b81526020600482015260248101839052604401610a3b565b5f807f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00610994565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611bec57505f91506003905082611c71565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611c3d573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116611c6857505f925060019150829050611c71565b92505f91508190505b9450945094915050565b5f826003811115611c8e57611c8e612a32565b03611c97575050565b6001826003811115611cab57611cab612a32565b03611cc95760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611cdd57611cdd612a32565b03611cfe5760405163fce698f760e01b815260048101829052602401610a3b565b6003826003811115611d1257611d12612a32565b03610926576040516335e2f38360e21b815260048101829052602401610a3b565b604080518082019091525f8082526020820152825f018263ffffffff1681548110611d6057611d60612a46565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611dab838383612057565b6001600160a01b038316611e1a575f611de27f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace025490565b90506001600160d01b0380821115611e1757604051630e58ae9360e11b81526004810183905260248101829052604401610a3b565b50505b610dc8838383612190565b5f5f80516020612b1c83398151915281611e3d611371565b805190915015611e5557805160209091012092915050565b81548015611e64579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b5f5f80516020612b1c83398151915281611ea56113af565b805190915015611ebd57805160209091012092915050565b60018201548015611e64579392505050565b5f611edd6002848418612a5a565b6106ef908484166128f0565b806001600160a01b03163b5f03611f1e57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a3b565b5f80516020612b3c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051611f689190612a79565b5f60405180830381855af49150503d805f8114611fa0576040519150601f19603f3d011682016040523d82523d5f602084013e611fa5565b606091505b5091509150611fb5858383612201565b95945050505050565b34156109c45760405163b398979f60e01b815260040160405180910390fd5b5f6106ef8284612a94565b5f6001600160d01b038211156116d0576040516306dfcc6560e41b815260d0600482015260248101839052604401610a3b565b5f8061203f4261203761202d886113c5565b868863ffffffff16565b87919061225d565b915091505b935093915050565b5f6106ef8284612abb565b5f80516020612afc8339815191526001600160a01b0384166120915781816002015f82825461208691906128f0565b909155506121019050565b6001600160a01b0384165f90815260208290526040902054828110156120e35760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610a3b565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b03831661211f57600281018054839003905561213d565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161218291815260200190565b60405180910390a350505050565b5f80516020612adc8339815191526001600160a01b0384166121c2576121bf8160020161204c611a4d85611fe8565b50505b6001600160a01b0383166121e6576121e381600201611fdd611a4d85611fe8565b50505b610e2b6121f285610945565b6121fb85610945565b846119e5565b606082612216576122118261226a565b6106ef565b815115801561222d57506001600160a01b0384163b155b1561225657604051639996b31560e01b81526001600160a01b0385166004820152602401610a3b565b50806106ef565b5f8061203f858585612293565b80511561227a5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b82545f9081908015612389575f6122af87610f5b6001856128dd565b805490915065ffffffffffff80821691600160301b90046001600160d01b03169088168211156122f257604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff160361232b57825465ffffffffffff16600160301b6001600160d01b0389160217835561237b565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f555f8f81529190912094519151909216600160301b029216919091179101555b945085935061204492505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081612044565b5f5b838110156123fd5781810151838201526020016123e5565b50505f910152565b5f815180845261241c8160208601602086016123e3565b601f01601f19169290920160200192915050565b602081525f6106ef6020830184612405565b80356001600160a01b0381168114612458575f80fd5b919050565b5f806040838503121561246e575f80fd5b61247783612442565b946020939093013593505050565b5f805f60608486031215612497575f80fd5b6124a084612442565b92506124ae60208501612442565b9150604084013590509250925092565b5f80604083850312156124cf575f80fd5b6124d883612442565b91506124e660208401612442565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215612514575f80fd5b61251d83612442565b9150602083013567ffffffffffffffff80821115612539575f80fd5b818501915085601f83011261254c575f80fd5b81358181111561255e5761255e6124ef565b604051601f8201601f19908116603f01168101908382118183101715612586576125866124ef565b8160405282815288602084870101111561259e575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f602082840312156125cf575f80fd5b6106ef82612442565b60ff60f81b881681525f602060e060208401526125f860e084018a612405565b838103604085015261260a818a612405565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b8181101561265d57835183529284019291840191600101612641565b50909c9b505050505050505050505050565b5f6020828403121561267f575f80fd5b5035919050565b803560ff81168114612458575f80fd5b5f805f805f8060c087890312156126ab575f80fd5b6126b487612442565b955060208701359450604087013593506126d060608801612686565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a031215612700575f80fd5b61270988612442565b965061271760208901612442565b9550604088013594506060880135935061273360808901612686565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215612760575f80fd5b61276983612442565b9150602083013563ffffffff81168114612781575f80fd5b809150509250929050565b600181811c908216806127a057607f821691505b6020821081036127be57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561281257815f19048211156127f8576127f86127c4565b8085161561280557918102915b93841c93908002906127dd565b509250929050565b5f82612828575060016106cb565b8161283457505f6106cb565b816001811461284a576002811461285457612870565b60019150506106cb565b60ff841115612865576128656127c4565b50506001821b6106cb565b5060208310610133831016604e8410600b8410161715612893575081810a6106cb565b61289d83836127d8565b805f19048211156128b0576128b06127c4565b029392505050565b5f6106ef60ff84168361281a565b80820281158282048414176106cb576106cb6127c4565b818103818111156106cb576106cb6127c4565b808201808211156106cb576106cb6127c4565b5f60208284031215612913575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b601f821115610dc857805f5260205f20601f840160051c810160208510156129535750805b601f840160051c820191505b81811015611619575f815560010161295f565b815167ffffffffffffffff81111561298c5761298c6124ef565b6129a08161299a845461278c565b8461292e565b602080601f8311600181146129d3575f84156129bc5750858301515b5f19600386901b1c1916600185901b178555612a2a565b5f85815260208120601f198616915b82811015612a01578886015182559484019460019091019084016129e2565b5085821015612a1e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f82612a7457634e487b7160e01b5f52601260045260245ffd5b500490565b5f8251612a8a8184602087016123e3565b9190910192915050565b6001600160d01b03828116828216039080821115612ab457612ab46127c4565b5092915050565b6001600160d01b03818116838216019080821115612ab457612ab46127c456fee8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220ca54c6c59aca917cfd139c6ebb26882ae2ff0ba831e27d74043d1b416a13538764736f6c63430008160033', \n     arguments: [\n     ]\n}).send({\n     from: web3.eth.accounts[0], \n     gas: '4700000'\n   }, function (e, contract){\n    console.log(e, contract);\n    if (typeof contract.address !== 'undefined') {\n         console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);\n    }\n })",
	"metadataHash": "a881b239f2bec52e0672890fff2506d4977cfec2b41d44dcf47c953f88e144a4",
	"functionHashes": {
		"4bf5d7e9": "CLOCK_MODE()",
		"3644e515": "DOMAIN_SEPARATOR()",
		"ad3cb1cc": "UPGRADE_INTERFACE_VERSION()",
		"dd62ed3e": "allowance(address,address)",
		"095ea7b3": "approve(address,uint256)",
		"70a08231": "balanceOf(address)",
		"f1127ed8": "checkpoints(address,uint32)",
		"91ddadf4": "clock()",
		"313ce567": "decimals()",
		"5c19a95c": "delegate(address)",
		"c3cda520": "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)",
		"587cde1e": "delegates(address)",
		"84b0196e": "eip712Domain()",
		"8e539e8c": "getPastTotalSupply(uint256)",
		"3a46b1a8": "getPastVotes(address,uint256)",
		"9ab24eb0": "getVotes(address)",
		"485cc955": "initialize(address,address)",
		"06fdde03": "name()",
		"7ecebe00": "nonces(address)",
		"6fcfff45": "numCheckpoints(address)",
		"8da5cb5b": "owner()",
		"d505accf": "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
		"52d1902d": "proxiableUUID()",
		"715018a6": "renounceOwnership()",
		"95d89b41": "symbol()",
		"18160ddd": "totalSupply()",
		"a9059cbb": "transfer(address,uint256)",
		"23b872dd": "transferFrom(address,address,uint256)",
		"f2fde38b": "transferOwnership(address)",
		"4f1ef286": "upgradeToAndCall(address,bytes)"
	},
	"gasEstimates": {
		"Creation": {
			"codeDepositCost": "2230600",
			"executionCost": "infinite",
			"totalCost": "infinite"
		},
		"External": {
			"CLOCK_MODE()": "infinite",
			"DOMAIN_SEPARATOR()": "infinite",
			"UPGRADE_INTERFACE_VERSION()": "infinite",
			"allowance(address,address)": "infinite",
			"approve(address,uint256)": "infinite",
			"balanceOf(address)": "infinite",
			"checkpoints(address,uint32)": "infinite",
			"clock()": "270",
			"decimals()": "244",
			"delegate(address)": "infinite",
			"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"delegates(address)": "infinite",
			"eip712Domain()": "infinite",
			"getPastTotalSupply(uint256)": "infinite",
			"getPastVotes(address,uint256)": "infinite",
			"getVotes(address)": "infinite",
			"initialize(address,address)": "infinite",
			"name()": "infinite",
			"nonces(address)": "infinite",
			"numCheckpoints(address)": "infinite",
			"owner()": "2375",
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
			"proxiableUUID()": "infinite",
			"renounceOwnership()": "infinite",
			"symbol()": "infinite",
			"totalSupply()": "2371",
			"transfer(address,uint256)": "infinite",
			"transferFrom(address,address,uint256)": "infinite",
			"transferOwnership(address)": "28475",
			"upgradeToAndCall(address,bytes)": "infinite"
		},
		"Internal": {
			"_authorizeUpgrade(address)": "infinite",
			"_update(address,address,uint256)": "infinite"
		}
	},
	"devdoc": {
		"custom:security-contact": "rucryptowhale@gmail.com",
		"errors": {
			"AddressEmptyCode(address)": [
				{
					"details": "There's no code at `target` (it is not a contract)."
				}
			],
			"CheckpointUnorderedInsertion()": [
				{
					"details": "A value was attempted to be inserted on a past checkpoint."
				}
			],
			"ECDSAInvalidSignature()": [
				{
					"details": "The signature derives the `address(0)`."
				}
			],
			"ECDSAInvalidSignatureLength(uint256)": [
				{
					"details": "The signature has an invalid length."
				}
			],
			"ECDSAInvalidSignatureS(bytes32)": [
				{
					"details": "The signature has an S value that is in the upper half order."
				}
			],
			"ERC1967InvalidImplementation(address)": [
				{
					"details": "The `implementation` of the proxy is invalid."
				}
			],
			"ERC1967NonPayable()": [
				{
					"details": "An upgrade function sees `msg.value > 0` that may be lost."
				}
			],
			"ERC20ExceededSafeSupply(uint256,uint256)": [
				{
					"details": "Total supply cap has been exceeded, introducing a risk of votes overflowing."
				}
			],
			"ERC20InsufficientAllowance(address,uint256,uint256)": [
				{
					"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
					"params": {
						"allowance": "Amount of tokens a `spender` is allowed to operate with.",
						"needed": "Minimum amount required to perform a transfer.",
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC20InsufficientBalance(address,uint256,uint256)": [
				{
					"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
					"params": {
						"balance": "Current balance for the interacting account.",
						"needed": "Minimum amount required to perform a transfer.",
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidApprover(address)": [
				{
					"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
					"params": {
						"approver": "Address initiating an approval operation."
					}
				}
			],
			"ERC20InvalidReceiver(address)": [
				{
					"details": "Indicates a failure with the token `receiver`. Used in transfers.",
					"params": {
						"receiver": "Address to which tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSender(address)": [
				{
					"details": "Indicates a failure with the token `sender`. Used in transfers.",
					"params": {
						"sender": "Address whose tokens are being transferred."
					}
				}
			],
			"ERC20InvalidSpender(address)": [
				{
					"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
					"params": {
						"spender": "Address that may be allowed to operate on tokens without being their owner."
					}
				}
			],
			"ERC2612ExpiredSignature(uint256)": [
				{
					"details": "Permit deadline has expired."
				}
			],
			"ERC2612InvalidSigner(address,address)": [
				{
					"details": "Mismatched signature."
				}
			],
			"ERC5805FutureLookup(uint256,uint48)": [
				{
					"details": "Lookup to future votes is not available."
				}
			],
			"ERC6372InconsistentClock()": [
				{
					"details": "The clock was incorrectly modified."
				}
			],
			"FailedCall()": [
				{
					"details": "A call to an address target failed. The target may have reverted."
				}
			],
			"InvalidAccountNonce(address,uint256)": [
				{
					"details": "The nonce used for an `account` is not the expected current nonce."
				}
			],
			"InvalidInitialization()": [
				{
					"details": "The contract is already initialized."
				}
			],
			"NotInitializing()": [
				{
					"details": "The contract is not initializing."
				}
			],
			"OwnableInvalidOwner(address)": [
				{
					"details": "The owner is not a valid owner account. (eg. `address(0)`)"
				}
			],
			"OwnableUnauthorizedAccount(address)": [
				{
					"details": "The caller account is not authorized to perform an operation."
				}
			],
			"SafeCastOverflowedUintDowncast(uint8,uint256)": [
				{
					"details": "Value doesn't fit in an uint of `bits` size."
				}
			],
			"UUPSUnauthorizedCallContext()": [
				{
					"details": "The call is from an unauthorized context."
				}
			],
			"UUPSUnsupportedProxiableUUID(bytes32)": [
				{
					"details": "The storage `slot` is unsupported as a UUID."
				}
			],
			"VotesExpiredSignature(uint256)": [
				{
					"details": "The signature used has expired."
				}
			]
		},
		"events": {
			"Approval(address,address,uint256)": {
				"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
			},
			"DelegateChanged(address,address,address)": {
				"details": "Emitted when an account changes their delegate."
			},
			"DelegateVotesChanged(address,uint256,uint256)": {
				"details": "Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units."
			},
			"EIP712DomainChanged()": {
				"details": "MAY be emitted to signal that the domain could have changed."
			},
			"Initialized(uint64)": {
				"details": "Triggered when the contract has been initialized or reinitialized."
			},
			"Transfer(address,address,uint256)": {
				"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
			},
			"Upgraded(address)": {
				"details": "Emitted when the implementation is upgraded."
			}
		},
		"kind": "dev",
		"methods": {
			"CLOCK_MODE()": {
				"details": "Machine-readable description of the clock as specified in ERC-6372."
			},
			"DOMAIN_SEPARATOR()": {
				"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
			},
			"allowance(address,address)": {
				"details": "See {IERC20-allowance}."
			},
			"approve(address,uint256)": {
				"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
			},
			"balanceOf(address)": {
				"details": "See {IERC20-balanceOf}."
			},
			"checkpoints(address,uint32)": {
				"details": "Get the `pos`-th checkpoint for `account`."
			},
			"clock()": {
				"details": "Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match."
			},
			"constructor": {
				"custom:oz-upgrades-unsafe-allow": "constructor"
			},
			"decimals()": {
				"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
			},
			"delegate(address)": {
				"details": "Delegates votes from the sender to `delegatee`."
			},
			"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Delegates votes from signer to `delegatee`."
			},
			"delegates(address)": {
				"details": "Returns the delegate that `account` has chosen."
			},
			"eip712Domain()": {
				"details": "See {IERC-5267}."
			},
			"getPastTotalSupply(uint256)": {
				"details": "Returns the total supply of votes available at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes. Votes that have not been delegated are still part of total supply, even though they would not participate in a vote. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined."
			},
			"getPastVotes(address,uint256)": {
				"details": "Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is configured to use block numbers, this will return the value at the end of the corresponding block. Requirements: - `timepoint` must be in the past. If operating using block numbers, the block must be already mined."
			},
			"getVotes(address)": {
				"details": "Returns the current amount of votes that `account` has."
			},
			"name()": {
				"details": "Returns the name of the token."
			},
			"numCheckpoints(address)": {
				"details": "Get number of checkpoints for `account`."
			},
			"owner()": {
				"details": "Returns the address of the current owner."
			},
			"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
				"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
			},
			"proxiableUUID()": {
				"details": "Implementation of the ERC-1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
			},
			"renounceOwnership()": {
				"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
			},
			"symbol()": {
				"details": "Returns the symbol of the token, usually a shorter version of the name."
			},
			"totalSupply()": {
				"details": "See {IERC20-totalSupply}."
			},
			"transfer(address,uint256)": {
				"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
			},
			"transferFrom(address,address,uint256)": {
				"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
			},
			"transferOwnership(address)": {
				"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
			},
			"upgradeToAndCall(address,bytes)": {
				"custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
				"details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
			}
		},
		"version": 1
	},
	"userdoc": {
		"kind": "user",
		"methods": {},
		"version": 1
	},
	"Runtime Bytecode": {
		"functionDebugData": {
			"@CLOCK_MODE_11004": {
				"entryPoint": null,
				"id": 11004,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@DOMAIN_SEPARATOR_2060": {
				"entryPoint": 1782,
				"id": 2060,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@UPGRADE_INTERFACE_VERSION_1117": {
				"entryPoint": null,
				"id": 1117,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_EIP712NameHash_2657": {
				"entryPoint": 7717,
				"id": 2657,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Name_2589": {
				"entryPoint": 4977,
				"id": 2589,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712VersionHash_2709": {
				"entryPoint": 7821,
				"id": 2709,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_EIP712Version_2605": {
				"entryPoint": 5039,
				"id": 2605,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@__EIP712_init_unchained_2463": {
				"entryPoint": 6431,
				"id": 2463,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@__ERC20Permit_init_1948": {
				"entryPoint": 3997,
				"id": 1948,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@__ERC20Votes_init_2091": {
				"entryPoint": 4040,
				"id": 2091,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@__ERC20_init_1343": {
				"entryPoint": 3979,
				"id": 1343,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@__ERC20_init_unchained_1371": {
				"entryPoint": 6351,
				"id": 1371,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@__Ownable_init_54": {
				"entryPoint": 4048,
				"id": 54,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@__Ownable_init_unchained_81": {
				"entryPoint": 6526,
				"id": 81,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@__UUPSUpgradeable_init_1147": {
				"entryPoint": null,
				"id": 1147,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_add_816": {
				"entryPoint": 8268,
				"id": 816,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_approve_1775": {
				"entryPoint": 3515,
				"id": 1775,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_approve_1843": {
				"entryPoint": 5436,
				"id": 1843,
				"parameterSlots": 4,
				"returnSlots": 0
			},
			"@_authorizeUpgrade_11013": {
				"entryPoint": 4281,
				"id": 11013,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_buildDomainSeparator_2496": {
				"entryPoint": 5675,
				"id": 2496,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_checkInitializing_1015": {
				"entryPoint": 6278,
				"id": 1015,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_checkNonPayable_3305": {
				"entryPoint": 8126,
				"id": 3305,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_checkNotDelegated_1223": {
				"entryPoint": 4477,
				"id": 1223,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_checkOwner_122": {
				"entryPoint": 4764,
				"id": 122,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_checkProxy_1207": {
				"entryPoint": 4117,
				"id": 1207,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@_checkpoints_767": {
				"entryPoint": 5331,
				"id": 767,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_delegate_567": {
				"entryPoint": 4550,
				"id": 567,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_domainSeparatorV4_2473": {
				"entryPoint": 3726,
				"id": 2473,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getEIP712Storage_2407": {
				"entryPoint": null,
				"id": 2407,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getERC20Storage_1327": {
				"entryPoint": null,
				"id": 1327,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getInitializableStorage_1092": {
				"entryPoint": null,
				"id": 1092,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getNoncesStorage_2286": {
				"entryPoint": null,
				"id": 2286,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getOwnableStorage_25": {
				"entryPoint": null,
				"id": 25,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getVotesStorage_259": {
				"entryPoint": null,
				"id": 259,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_getVotingUnits_2178": {
				"entryPoint": 6619,
				"id": 2178,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_hashTypedDataV4_2512": {
				"entryPoint": 5116,
				"id": 2512,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_insert_9988": {
				"entryPoint": 8851,
				"id": 9988,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@_isInitializing_1083": {
				"entryPoint": null,
				"id": 1083,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_maxSupply_2110": {
				"entryPoint": null,
				"id": 2110,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_mint_1724": {
				"entryPoint": 4065,
				"id": 1724,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_moveDelegateVotes_716": {
				"entryPoint": 6629,
				"id": 716,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_msgSender_2237": {
				"entryPoint": null,
				"id": 2237,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@_numCheckpoints_741": {
				"entryPoint": 4685,
				"id": 741,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_push_802": {
				"entryPoint": 8219,
				"id": 802,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@_revert_3715": {
				"entryPoint": 8810,
				"id": 3715,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_setImplementation_3085": {
				"entryPoint": 7913,
				"id": 3085,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_spendAllowance_1891": {
				"entryPoint": 3533,
				"id": 1891,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_subtract_830": {
				"entryPoint": 8157,
				"id": 830,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_throwError_5461": {
				"entryPoint": 7291,
				"id": 5461,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_transferOwnership_193": {
				"entryPoint": 4855,
				"id": 193,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@_transferVotingUnits_630": {
				"entryPoint": 8592,
				"id": 630,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_transfer_1599": {
				"entryPoint": 3633,
				"id": 1599,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_unsafeAccess_10107": {
				"entryPoint": null,
				"id": 10107,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@_update_11034": {
				"entryPoint": 5664,
				"id": 11034,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_1691": {
				"entryPoint": 8279,
				"id": 1691,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_update_2164": {
				"entryPoint": 7584,
				"id": 2164,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"@_upgradeToAndCallUUPS_1274": {
				"entryPoint": 4289,
				"id": 1274,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_upperBinaryLookup_10040": {
				"entryPoint": 6183,
				"id": 10040,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@_useCheckedNonce_2365": {
				"entryPoint": 5204,
				"id": 2365,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@_useNonce_2340": {
				"entryPoint": 5266,
				"id": 2340,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@_validateTimepoint_340": {
				"entryPoint": 3735,
				"id": 340,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@allowance_1496": {
				"entryPoint": 3352,
				"id": 1496,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@approve_1520": {
				"entryPoint": 1720,
				"id": 1520,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@at_9894": {
				"entryPoint": 7475,
				"id": 9894,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@average_5794": {
				"entryPoint": 7887,
				"id": 5794,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@balanceOf_1448": {
				"entryPoint": 2435,
				"id": 1448,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@checkpoints_2208": {
				"entryPoint": 3425,
				"id": 2208,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@clock_10995": {
				"entryPoint": null,
				"id": 10995,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@decimals_1412": {
				"entryPoint": null,
				"id": 1412,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@delegateBySig_524": {
				"entryPoint": 2892,
				"id": 524,
				"parameterSlots": 6,
				"returnSlots": 0
			},
			"@delegate_467": {
				"entryPoint": 2414,
				"id": 467,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@delegates_450": {
				"entryPoint": 2373,
				"id": 450,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@eip712Domain_2573": {
				"entryPoint": 2512,
				"id": 2573,
				"parameterSlots": 0,
				"returnSlots": 7
			},
			"@functionDelegateCall_3633": {
				"entryPoint": 8012,
				"id": 3633,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@getAddressSlot_3825": {
				"entryPoint": null,
				"id": 3825,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getImplementation_3058": {
				"entryPoint": null,
				"id": 3058,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@getPastTotalSupply_412": {
				"entryPoint": 2686,
				"id": 412,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@getPastVotes_389": {
				"entryPoint": 1796,
				"id": 389,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@getVotes_362": {
				"entryPoint": 2801,
				"id": 362,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@initialize_10982": {
				"entryPoint": 1871,
				"id": 10982,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@latest_9813": {
				"entryPoint": 5061,
				"id": 9813,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@length_9876": {
				"entryPoint": null,
				"id": 9876,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@name_1387": {
				"entryPoint": 1555,
				"id": 1387,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@nonces_11050": {
				"entryPoint": 2502,
				"id": 11050,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_2050": {
				"entryPoint": 4967,
				"id": 2050,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@nonces_2318": {
				"entryPoint": 7051,
				"id": 2318,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@numCheckpoints_2191": {
				"entryPoint": 2425,
				"id": 2191,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@owner_105": {
				"entryPoint": null,
				"id": 105,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@permit_2033": {
				"entryPoint": 3071,
				"id": 2033,
				"parameterSlots": 7,
				"returnSlots": 0
			},
			"@proxiableUUID_1165": {
				"entryPoint": 2346,
				"id": 1165,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@push_9616": {
				"entryPoint": 8797,
				"id": 9616,
				"parameterSlots": 3,
				"returnSlots": 2
			},
			"@recover_5412": {
				"entryPoint": 5160,
				"id": 5412,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"@renounceOwnership_136": {
				"entryPoint": 2483,
				"id": 136,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"@sqrt_6521": {
				"entryPoint": 5844,
				"id": 6521,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@symbol_1403": {
				"entryPoint": 2739,
				"id": 1403,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@toTypedDataHash_5535": {
				"entryPoint": null,
				"id": 5535,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@toUint208_7337": {
				"entryPoint": 8168,
				"id": 7337,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint32_7953": {
				"entryPoint": 7003,
				"id": 7953,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint48_7897": {
				"entryPoint": 5790,
				"id": 7897,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@toUint_8906": {
				"entryPoint": null,
				"id": 8906,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"@totalSupply_1428": {
				"entryPoint": null,
				"id": 1428,
				"parameterSlots": 0,
				"returnSlots": 1
			},
			"@transferFrom_1552": {
				"entryPoint": 1745,
				"id": 1552,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"@transferOwnership_164": {
				"entryPoint": 3454,
				"id": 164,
				"parameterSlots": 1,
				"returnSlots": 0
			},
			"@transfer_1472": {
				"entryPoint": 2879,
				"id": 1472,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@tryRecover_5376": {
				"entryPoint": 7091,
				"id": 5376,
				"parameterSlots": 4,
				"returnSlots": 3
			},
			"@upgradeToAndCall_1185": {
				"entryPoint": 2315,
				"id": 1185,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@upgradeToAndCall_3121": {
				"entryPoint": 6534,
				"id": 3121,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"@upperLookupRecent_9783": {
				"entryPoint": 3803,
				"id": 9783,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"@verifyCallResultFromTarget_3673": {
				"entryPoint": 8705,
				"id": 3673,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_decode_address": {
				"entryPoint": 9282,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_address": {
				"entryPoint": 9663,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_addresst_address": {
				"entryPoint": 9406,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_addresst_uint256": {
				"entryPoint": 9349,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 3
			},
			"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 9962,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 7
			},
			"abi_decode_tuple_t_addresst_bytes_memory_ptr": {
				"entryPoint": 9475,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_uint256": {
				"entryPoint": 9309,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
				"entryPoint": 9878,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 6
			},
			"abi_decode_tuple_t_addresst_uint32": {
				"entryPoint": 10063,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"abi_decode_tuple_t_bytes32_fromMemory": {
				"entryPoint": 10499,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_tuple_t_uint256": {
				"entryPoint": 9839,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_decode_uint8": {
				"entryPoint": 9862,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_string": {
				"entryPoint": 9221,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
				"entryPoint": 10873,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 4,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
				"entryPoint": 9688,
				"id": null,
				"parameterSlots": 8,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 7,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 6,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 5,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_32_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": 9264,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_struct$_Checkpoint208_$9593_memory_ptr__to_t_struct$_Checkpoint208_$9593_memory_ptr__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint256_t_uint48__to_t_uint256_t_uint48__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"array_dataslot_string_storage": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"checked_add_t_uint208": {
				"entryPoint": 10939,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_add_t_uint256": {
				"entryPoint": 10480,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_div_t_uint256": {
				"entryPoint": 10842,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_helper": {
				"entryPoint": 10200,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 2
			},
			"checked_exp_t_uint256_t_uint8": {
				"entryPoint": 10424,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_exp_unsigned": {
				"entryPoint": 10266,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_mul_t_uint256": {
				"entryPoint": 10438,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint208": {
				"entryPoint": 10900,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"checked_sub_t_uint256": {
				"entryPoint": 10461,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"clean_up_bytearray_end_slots_string_storage": {
				"entryPoint": 10542,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
				"entryPoint": 10610,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 0
			},
			"copy_memory_to_memory_with_cleanup": {
				"entryPoint": 9187,
				"id": null,
				"parameterSlots": 3,
				"returnSlots": 0
			},
			"extract_byte_array_length": {
				"entryPoint": 10124,
				"id": null,
				"parameterSlots": 1,
				"returnSlots": 1
			},
			"extract_used_part_and_set_length_of_short_byte_array": {
				"entryPoint": null,
				"id": null,
				"parameterSlots": 2,
				"returnSlots": 1
			},
			"panic_error_0x11": {
				"entryPoint": 10180,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x12": {
				"entryPoint": 10522,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x21": {
				"entryPoint": 10802,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x32": {
				"entryPoint": 10822,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			},
			"panic_error_0x41": {
				"entryPoint": 9455,
				"id": null,
				"parameterSlots": 0,
				"returnSlots": 0
			}
		},
		"generatedSources": [
			{
				"ast": {
					"nativeSrc": "0:18681:35",
					"nodeType": "YulBlock",
					"src": "0:18681:35",
					"statements": [
						{
							"nativeSrc": "6:3:35",
							"nodeType": "YulBlock",
							"src": "6:3:35",
							"statements": []
						},
						{
							"body": {
								"nativeSrc": "80:184:35",
								"nodeType": "YulBlock",
								"src": "80:184:35",
								"statements": [
									{
										"nativeSrc": "90:10:35",
										"nodeType": "YulVariableDeclaration",
										"src": "90:10:35",
										"value": {
											"kind": "number",
											"nativeSrc": "99:1:35",
											"nodeType": "YulLiteral",
											"src": "99:1:35",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "94:1:35",
												"nodeType": "YulTypedName",
												"src": "94:1:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "159:63:35",
											"nodeType": "YulBlock",
											"src": "159:63:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"name": "dst",
																		"nativeSrc": "184:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "184:3:35"
																	},
																	{
																		"name": "i",
																		"nativeSrc": "189:1:35",
																		"nodeType": "YulIdentifier",
																		"src": "189:1:35"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "180:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "180:3:35"
																},
																"nativeSrc": "180:11:35",
																"nodeType": "YulFunctionCall",
																"src": "180:11:35"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "src",
																				"nativeSrc": "203:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "203:3:35"
																			},
																			{
																				"name": "i",
																				"nativeSrc": "208:1:35",
																				"nodeType": "YulIdentifier",
																				"src": "208:1:35"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "199:3:35",
																			"nodeType": "YulIdentifier",
																			"src": "199:3:35"
																		},
																		"nativeSrc": "199:11:35",
																		"nodeType": "YulFunctionCall",
																		"src": "199:11:35"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "193:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "193:5:35"
																},
																"nativeSrc": "193:18:35",
																"nodeType": "YulFunctionCall",
																"src": "193:18:35"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "173:6:35",
															"nodeType": "YulIdentifier",
															"src": "173:6:35"
														},
														"nativeSrc": "173:39:35",
														"nodeType": "YulFunctionCall",
														"src": "173:39:35"
													},
													"nativeSrc": "173:39:35",
													"nodeType": "YulExpressionStatement",
													"src": "173:39:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "120:1:35",
													"nodeType": "YulIdentifier",
													"src": "120:1:35"
												},
												{
													"name": "length",
													"nativeSrc": "123:6:35",
													"nodeType": "YulIdentifier",
													"src": "123:6:35"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "117:2:35",
												"nodeType": "YulIdentifier",
												"src": "117:2:35"
											},
											"nativeSrc": "117:13:35",
											"nodeType": "YulFunctionCall",
											"src": "117:13:35"
										},
										"nativeSrc": "109:113:35",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "131:19:35",
											"nodeType": "YulBlock",
											"src": "131:19:35",
											"statements": [
												{
													"nativeSrc": "133:15:35",
													"nodeType": "YulAssignment",
													"src": "133:15:35",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "142:1:35",
																"nodeType": "YulIdentifier",
																"src": "142:1:35"
															},
															{
																"kind": "number",
																"nativeSrc": "145:2:35",
																"nodeType": "YulLiteral",
																"src": "145:2:35",
																"type": "",
																"value": "32"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "138:3:35",
															"nodeType": "YulIdentifier",
															"src": "138:3:35"
														},
														"nativeSrc": "138:10:35",
														"nodeType": "YulFunctionCall",
														"src": "138:10:35"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "133:1:35",
															"nodeType": "YulIdentifier",
															"src": "133:1:35"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "113:3:35",
											"nodeType": "YulBlock",
											"src": "113:3:35",
											"statements": []
										},
										"src": "109:113:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dst",
															"nativeSrc": "242:3:35",
															"nodeType": "YulIdentifier",
															"src": "242:3:35"
														},
														{
															"name": "length",
															"nativeSrc": "247:6:35",
															"nodeType": "YulIdentifier",
															"src": "247:6:35"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "238:3:35",
														"nodeType": "YulIdentifier",
														"src": "238:3:35"
													},
													"nativeSrc": "238:16:35",
													"nodeType": "YulFunctionCall",
													"src": "238:16:35"
												},
												{
													"kind": "number",
													"nativeSrc": "256:1:35",
													"nodeType": "YulLiteral",
													"src": "256:1:35",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "231:6:35",
												"nodeType": "YulIdentifier",
												"src": "231:6:35"
											},
											"nativeSrc": "231:27:35",
											"nodeType": "YulFunctionCall",
											"src": "231:27:35"
										},
										"nativeSrc": "231:27:35",
										"nodeType": "YulExpressionStatement",
										"src": "231:27:35"
									}
								]
							},
							"name": "copy_memory_to_memory_with_cleanup",
							"nativeSrc": "14:250:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "src",
									"nativeSrc": "58:3:35",
									"nodeType": "YulTypedName",
									"src": "58:3:35",
									"type": ""
								},
								{
									"name": "dst",
									"nativeSrc": "63:3:35",
									"nodeType": "YulTypedName",
									"src": "63:3:35",
									"type": ""
								},
								{
									"name": "length",
									"nativeSrc": "68:6:35",
									"nodeType": "YulTypedName",
									"src": "68:6:35",
									"type": ""
								}
							],
							"src": "14:250:35"
						},
						{
							"body": {
								"nativeSrc": "319:221:35",
								"nodeType": "YulBlock",
								"src": "319:221:35",
								"statements": [
									{
										"nativeSrc": "329:26:35",
										"nodeType": "YulVariableDeclaration",
										"src": "329:26:35",
										"value": {
											"arguments": [
												{
													"name": "value",
													"nativeSrc": "349:5:35",
													"nodeType": "YulIdentifier",
													"src": "349:5:35"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "343:5:35",
												"nodeType": "YulIdentifier",
												"src": "343:5:35"
											},
											"nativeSrc": "343:12:35",
											"nodeType": "YulFunctionCall",
											"src": "343:12:35"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "333:6:35",
												"nodeType": "YulTypedName",
												"src": "333:6:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "371:3:35",
													"nodeType": "YulIdentifier",
													"src": "371:3:35"
												},
												{
													"name": "length",
													"nativeSrc": "376:6:35",
													"nodeType": "YulIdentifier",
													"src": "376:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "364:6:35",
												"nodeType": "YulIdentifier",
												"src": "364:6:35"
											},
											"nativeSrc": "364:19:35",
											"nodeType": "YulFunctionCall",
											"src": "364:19:35"
										},
										"nativeSrc": "364:19:35",
										"nodeType": "YulExpressionStatement",
										"src": "364:19:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "431:5:35",
															"nodeType": "YulIdentifier",
															"src": "431:5:35"
														},
														{
															"kind": "number",
															"nativeSrc": "438:4:35",
															"nodeType": "YulLiteral",
															"src": "438:4:35",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "427:3:35",
														"nodeType": "YulIdentifier",
														"src": "427:3:35"
													},
													"nativeSrc": "427:16:35",
													"nodeType": "YulFunctionCall",
													"src": "427:16:35"
												},
												{
													"arguments": [
														{
															"name": "pos",
															"nativeSrc": "449:3:35",
															"nodeType": "YulIdentifier",
															"src": "449:3:35"
														},
														{
															"kind": "number",
															"nativeSrc": "454:4:35",
															"nodeType": "YulLiteral",
															"src": "454:4:35",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "445:3:35",
														"nodeType": "YulIdentifier",
														"src": "445:3:35"
													},
													"nativeSrc": "445:14:35",
													"nodeType": "YulFunctionCall",
													"src": "445:14:35"
												},
												{
													"name": "length",
													"nativeSrc": "461:6:35",
													"nodeType": "YulIdentifier",
													"src": "461:6:35"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "392:34:35",
												"nodeType": "YulIdentifier",
												"src": "392:34:35"
											},
											"nativeSrc": "392:76:35",
											"nodeType": "YulFunctionCall",
											"src": "392:76:35"
										},
										"nativeSrc": "392:76:35",
										"nodeType": "YulExpressionStatement",
										"src": "392:76:35"
									},
									{
										"nativeSrc": "477:57:35",
										"nodeType": "YulAssignment",
										"src": "477:57:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "pos",
															"nativeSrc": "492:3:35",
															"nodeType": "YulIdentifier",
															"src": "492:3:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "length",
																			"nativeSrc": "505:6:35",
																			"nodeType": "YulIdentifier",
																			"src": "505:6:35"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "513:2:35",
																			"nodeType": "YulLiteral",
																			"src": "513:2:35",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "501:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "501:3:35"
																	},
																	"nativeSrc": "501:15:35",
																	"nodeType": "YulFunctionCall",
																	"src": "501:15:35"
																},
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "522:2:35",
																			"nodeType": "YulLiteral",
																			"src": "522:2:35",
																			"type": "",
																			"value": "31"
																		}
																	],
																	"functionName": {
																		"name": "not",
																		"nativeSrc": "518:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "518:3:35"
																	},
																	"nativeSrc": "518:7:35",
																	"nodeType": "YulFunctionCall",
																	"src": "518:7:35"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "497:3:35",
																"nodeType": "YulIdentifier",
																"src": "497:3:35"
															},
															"nativeSrc": "497:29:35",
															"nodeType": "YulFunctionCall",
															"src": "497:29:35"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "488:3:35",
														"nodeType": "YulIdentifier",
														"src": "488:3:35"
													},
													"nativeSrc": "488:39:35",
													"nodeType": "YulFunctionCall",
													"src": "488:39:35"
												},
												{
													"kind": "number",
													"nativeSrc": "529:4:35",
													"nodeType": "YulLiteral",
													"src": "529:4:35",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "484:3:35",
												"nodeType": "YulIdentifier",
												"src": "484:3:35"
											},
											"nativeSrc": "484:50:35",
											"nodeType": "YulFunctionCall",
											"src": "484:50:35"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "477:3:35",
												"nodeType": "YulIdentifier",
												"src": "477:3:35"
											}
										]
									}
								]
							},
							"name": "abi_encode_string",
							"nativeSrc": "269:271:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "value",
									"nativeSrc": "296:5:35",
									"nodeType": "YulTypedName",
									"src": "296:5:35",
									"type": ""
								},
								{
									"name": "pos",
									"nativeSrc": "303:3:35",
									"nodeType": "YulTypedName",
									"src": "303:3:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "311:3:35",
									"nodeType": "YulTypedName",
									"src": "311:3:35",
									"type": ""
								}
							],
							"src": "269:271:35"
						},
						{
							"body": {
								"nativeSrc": "666:99:35",
								"nodeType": "YulBlock",
								"src": "666:99:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "683:9:35",
													"nodeType": "YulIdentifier",
													"src": "683:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "694:2:35",
													"nodeType": "YulLiteral",
													"src": "694:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "676:6:35",
												"nodeType": "YulIdentifier",
												"src": "676:6:35"
											},
											"nativeSrc": "676:21:35",
											"nodeType": "YulFunctionCall",
											"src": "676:21:35"
										},
										"nativeSrc": "676:21:35",
										"nodeType": "YulExpressionStatement",
										"src": "676:21:35"
									},
									{
										"nativeSrc": "706:53:35",
										"nodeType": "YulAssignment",
										"src": "706:53:35",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "732:6:35",
													"nodeType": "YulIdentifier",
													"src": "732:6:35"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "744:9:35",
															"nodeType": "YulIdentifier",
															"src": "744:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "755:2:35",
															"nodeType": "YulLiteral",
															"src": "755:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "740:3:35",
														"nodeType": "YulIdentifier",
														"src": "740:3:35"
													},
													"nativeSrc": "740:18:35",
													"nodeType": "YulFunctionCall",
													"src": "740:18:35"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "714:17:35",
												"nodeType": "YulIdentifier",
												"src": "714:17:35"
											},
											"nativeSrc": "714:45:35",
											"nodeType": "YulFunctionCall",
											"src": "714:45:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "706:4:35",
												"nodeType": "YulIdentifier",
												"src": "706:4:35"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "545:220:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "635:9:35",
									"nodeType": "YulTypedName",
									"src": "635:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "646:6:35",
									"nodeType": "YulTypedName",
									"src": "646:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "657:4:35",
									"nodeType": "YulTypedName",
									"src": "657:4:35",
									"type": ""
								}
							],
							"src": "545:220:35"
						},
						{
							"body": {
								"nativeSrc": "819:124:35",
								"nodeType": "YulBlock",
								"src": "819:124:35",
								"statements": [
									{
										"nativeSrc": "829:29:35",
										"nodeType": "YulAssignment",
										"src": "829:29:35",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "851:6:35",
													"nodeType": "YulIdentifier",
													"src": "851:6:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "838:12:35",
												"nodeType": "YulIdentifier",
												"src": "838:12:35"
											},
											"nativeSrc": "838:20:35",
											"nodeType": "YulFunctionCall",
											"src": "838:20:35"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "829:5:35",
												"nodeType": "YulIdentifier",
												"src": "829:5:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "921:16:35",
											"nodeType": "YulBlock",
											"src": "921:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "930:1:35",
																"nodeType": "YulLiteral",
																"src": "930:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "933:1:35",
																"nodeType": "YulLiteral",
																"src": "933:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "923:6:35",
															"nodeType": "YulIdentifier",
															"src": "923:6:35"
														},
														"nativeSrc": "923:12:35",
														"nodeType": "YulFunctionCall",
														"src": "923:12:35"
													},
													"nativeSrc": "923:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "923:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "880:5:35",
															"nodeType": "YulIdentifier",
															"src": "880:5:35"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "891:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "891:5:35"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "906:3:35",
																					"nodeType": "YulLiteral",
																					"src": "906:3:35",
																					"type": "",
																					"value": "160"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "911:1:35",
																					"nodeType": "YulLiteral",
																					"src": "911:1:35",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "902:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "902:3:35"
																			},
																			"nativeSrc": "902:11:35",
																			"nodeType": "YulFunctionCall",
																			"src": "902:11:35"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "915:1:35",
																			"nodeType": "YulLiteral",
																			"src": "915:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "sub",
																		"nativeSrc": "898:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "898:3:35"
																	},
																	"nativeSrc": "898:19:35",
																	"nodeType": "YulFunctionCall",
																	"src": "898:19:35"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "887:3:35",
																"nodeType": "YulIdentifier",
																"src": "887:3:35"
															},
															"nativeSrc": "887:31:35",
															"nodeType": "YulFunctionCall",
															"src": "887:31:35"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "877:2:35",
														"nodeType": "YulIdentifier",
														"src": "877:2:35"
													},
													"nativeSrc": "877:42:35",
													"nodeType": "YulFunctionCall",
													"src": "877:42:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "870:6:35",
												"nodeType": "YulIdentifier",
												"src": "870:6:35"
											},
											"nativeSrc": "870:50:35",
											"nodeType": "YulFunctionCall",
											"src": "870:50:35"
										},
										"nativeSrc": "867:70:35",
										"nodeType": "YulIf",
										"src": "867:70:35"
									}
								]
							},
							"name": "abi_decode_address",
							"nativeSrc": "770:173:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "798:6:35",
									"nodeType": "YulTypedName",
									"src": "798:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "809:5:35",
									"nodeType": "YulTypedName",
									"src": "809:5:35",
									"type": ""
								}
							],
							"src": "770:173:35"
						},
						{
							"body": {
								"nativeSrc": "1035:167:35",
								"nodeType": "YulBlock",
								"src": "1035:167:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "1081:16:35",
											"nodeType": "YulBlock",
											"src": "1081:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1090:1:35",
																"nodeType": "YulLiteral",
																"src": "1090:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1093:1:35",
																"nodeType": "YulLiteral",
																"src": "1093:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1083:6:35",
															"nodeType": "YulIdentifier",
															"src": "1083:6:35"
														},
														"nativeSrc": "1083:12:35",
														"nodeType": "YulFunctionCall",
														"src": "1083:12:35"
													},
													"nativeSrc": "1083:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "1083:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1056:7:35",
															"nodeType": "YulIdentifier",
															"src": "1056:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "1065:9:35",
															"nodeType": "YulIdentifier",
															"src": "1065:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1052:3:35",
														"nodeType": "YulIdentifier",
														"src": "1052:3:35"
													},
													"nativeSrc": "1052:23:35",
													"nodeType": "YulFunctionCall",
													"src": "1052:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "1077:2:35",
													"nodeType": "YulLiteral",
													"src": "1077:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1048:3:35",
												"nodeType": "YulIdentifier",
												"src": "1048:3:35"
											},
											"nativeSrc": "1048:32:35",
											"nodeType": "YulFunctionCall",
											"src": "1048:32:35"
										},
										"nativeSrc": "1045:52:35",
										"nodeType": "YulIf",
										"src": "1045:52:35"
									},
									{
										"nativeSrc": "1106:39:35",
										"nodeType": "YulAssignment",
										"src": "1106:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1135:9:35",
													"nodeType": "YulIdentifier",
													"src": "1135:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1116:18:35",
												"nodeType": "YulIdentifier",
												"src": "1116:18:35"
											},
											"nativeSrc": "1116:29:35",
											"nodeType": "YulFunctionCall",
											"src": "1116:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1106:6:35",
												"nodeType": "YulIdentifier",
												"src": "1106:6:35"
											}
										]
									},
									{
										"nativeSrc": "1154:42:35",
										"nodeType": "YulAssignment",
										"src": "1154:42:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1181:9:35",
															"nodeType": "YulIdentifier",
															"src": "1181:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "1192:2:35",
															"nodeType": "YulLiteral",
															"src": "1192:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1177:3:35",
														"nodeType": "YulIdentifier",
														"src": "1177:3:35"
													},
													"nativeSrc": "1177:18:35",
													"nodeType": "YulFunctionCall",
													"src": "1177:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1164:12:35",
												"nodeType": "YulIdentifier",
												"src": "1164:12:35"
											},
											"nativeSrc": "1164:32:35",
											"nodeType": "YulFunctionCall",
											"src": "1164:32:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1154:6:35",
												"nodeType": "YulIdentifier",
												"src": "1154:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256",
							"nativeSrc": "948:254:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "993:9:35",
									"nodeType": "YulTypedName",
									"src": "993:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1004:7:35",
									"nodeType": "YulTypedName",
									"src": "1004:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1016:6:35",
									"nodeType": "YulTypedName",
									"src": "1016:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "1024:6:35",
									"nodeType": "YulTypedName",
									"src": "1024:6:35",
									"type": ""
								}
							],
							"src": "948:254:35"
						},
						{
							"body": {
								"nativeSrc": "1302:92:35",
								"nodeType": "YulBlock",
								"src": "1302:92:35",
								"statements": [
									{
										"nativeSrc": "1312:26:35",
										"nodeType": "YulAssignment",
										"src": "1312:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1324:9:35",
													"nodeType": "YulIdentifier",
													"src": "1324:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "1335:2:35",
													"nodeType": "YulLiteral",
													"src": "1335:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1320:3:35",
												"nodeType": "YulIdentifier",
												"src": "1320:3:35"
											},
											"nativeSrc": "1320:18:35",
											"nodeType": "YulFunctionCall",
											"src": "1320:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1312:4:35",
												"nodeType": "YulIdentifier",
												"src": "1312:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1354:9:35",
													"nodeType": "YulIdentifier",
													"src": "1354:9:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nativeSrc": "1379:6:35",
																	"nodeType": "YulIdentifier",
																	"src": "1379:6:35"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "1372:6:35",
																"nodeType": "YulIdentifier",
																"src": "1372:6:35"
															},
															"nativeSrc": "1372:14:35",
															"nodeType": "YulFunctionCall",
															"src": "1372:14:35"
														}
													],
													"functionName": {
														"name": "iszero",
														"nativeSrc": "1365:6:35",
														"nodeType": "YulIdentifier",
														"src": "1365:6:35"
													},
													"nativeSrc": "1365:22:35",
													"nodeType": "YulFunctionCall",
													"src": "1365:22:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1347:6:35",
												"nodeType": "YulIdentifier",
												"src": "1347:6:35"
											},
											"nativeSrc": "1347:41:35",
											"nodeType": "YulFunctionCall",
											"src": "1347:41:35"
										},
										"nativeSrc": "1347:41:35",
										"nodeType": "YulExpressionStatement",
										"src": "1347:41:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
							"nativeSrc": "1207:187:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1271:9:35",
									"nodeType": "YulTypedName",
									"src": "1271:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1282:6:35",
									"nodeType": "YulTypedName",
									"src": "1282:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1293:4:35",
									"nodeType": "YulTypedName",
									"src": "1293:4:35",
									"type": ""
								}
							],
							"src": "1207:187:35"
						},
						{
							"body": {
								"nativeSrc": "1500:76:35",
								"nodeType": "YulBlock",
								"src": "1500:76:35",
								"statements": [
									{
										"nativeSrc": "1510:26:35",
										"nodeType": "YulAssignment",
										"src": "1510:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1522:9:35",
													"nodeType": "YulIdentifier",
													"src": "1522:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "1533:2:35",
													"nodeType": "YulLiteral",
													"src": "1533:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "1518:3:35",
												"nodeType": "YulIdentifier",
												"src": "1518:3:35"
											},
											"nativeSrc": "1518:18:35",
											"nodeType": "YulFunctionCall",
											"src": "1518:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "1510:4:35",
												"nodeType": "YulIdentifier",
												"src": "1510:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1552:9:35",
													"nodeType": "YulIdentifier",
													"src": "1552:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "1563:6:35",
													"nodeType": "YulIdentifier",
													"src": "1563:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "1545:6:35",
												"nodeType": "YulIdentifier",
												"src": "1545:6:35"
											},
											"nativeSrc": "1545:25:35",
											"nodeType": "YulFunctionCall",
											"src": "1545:25:35"
										},
										"nativeSrc": "1545:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "1545:25:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
							"nativeSrc": "1399:177:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1469:9:35",
									"nodeType": "YulTypedName",
									"src": "1469:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1480:6:35",
									"nodeType": "YulTypedName",
									"src": "1480:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "1491:4:35",
									"nodeType": "YulTypedName",
									"src": "1491:4:35",
									"type": ""
								}
							],
							"src": "1399:177:35"
						},
						{
							"body": {
								"nativeSrc": "1685:224:35",
								"nodeType": "YulBlock",
								"src": "1685:224:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "1731:16:35",
											"nodeType": "YulBlock",
											"src": "1731:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "1740:1:35",
																"nodeType": "YulLiteral",
																"src": "1740:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "1743:1:35",
																"nodeType": "YulLiteral",
																"src": "1743:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "1733:6:35",
															"nodeType": "YulIdentifier",
															"src": "1733:6:35"
														},
														"nativeSrc": "1733:12:35",
														"nodeType": "YulFunctionCall",
														"src": "1733:12:35"
													},
													"nativeSrc": "1733:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "1733:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "1706:7:35",
															"nodeType": "YulIdentifier",
															"src": "1706:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "1715:9:35",
															"nodeType": "YulIdentifier",
															"src": "1715:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "1702:3:35",
														"nodeType": "YulIdentifier",
														"src": "1702:3:35"
													},
													"nativeSrc": "1702:23:35",
													"nodeType": "YulFunctionCall",
													"src": "1702:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "1727:2:35",
													"nodeType": "YulLiteral",
													"src": "1727:2:35",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "1698:3:35",
												"nodeType": "YulIdentifier",
												"src": "1698:3:35"
											},
											"nativeSrc": "1698:32:35",
											"nodeType": "YulFunctionCall",
											"src": "1698:32:35"
										},
										"nativeSrc": "1695:52:35",
										"nodeType": "YulIf",
										"src": "1695:52:35"
									},
									{
										"nativeSrc": "1756:39:35",
										"nodeType": "YulAssignment",
										"src": "1756:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "1785:9:35",
													"nodeType": "YulIdentifier",
													"src": "1785:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1766:18:35",
												"nodeType": "YulIdentifier",
												"src": "1766:18:35"
											},
											"nativeSrc": "1766:29:35",
											"nodeType": "YulFunctionCall",
											"src": "1766:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "1756:6:35",
												"nodeType": "YulIdentifier",
												"src": "1756:6:35"
											}
										]
									},
									{
										"nativeSrc": "1804:48:35",
										"nodeType": "YulAssignment",
										"src": "1804:48:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1837:9:35",
															"nodeType": "YulIdentifier",
															"src": "1837:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "1848:2:35",
															"nodeType": "YulLiteral",
															"src": "1848:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1833:3:35",
														"nodeType": "YulIdentifier",
														"src": "1833:3:35"
													},
													"nativeSrc": "1833:18:35",
													"nodeType": "YulFunctionCall",
													"src": "1833:18:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "1814:18:35",
												"nodeType": "YulIdentifier",
												"src": "1814:18:35"
											},
											"nativeSrc": "1814:38:35",
											"nodeType": "YulFunctionCall",
											"src": "1814:38:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "1804:6:35",
												"nodeType": "YulIdentifier",
												"src": "1804:6:35"
											}
										]
									},
									{
										"nativeSrc": "1861:42:35",
										"nodeType": "YulAssignment",
										"src": "1861:42:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "1888:9:35",
															"nodeType": "YulIdentifier",
															"src": "1888:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "1899:2:35",
															"nodeType": "YulLiteral",
															"src": "1899:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "1884:3:35",
														"nodeType": "YulIdentifier",
														"src": "1884:3:35"
													},
													"nativeSrc": "1884:18:35",
													"nodeType": "YulFunctionCall",
													"src": "1884:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "1871:12:35",
												"nodeType": "YulIdentifier",
												"src": "1871:12:35"
											},
											"nativeSrc": "1871:32:35",
											"nodeType": "YulFunctionCall",
											"src": "1871:32:35"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "1861:6:35",
												"nodeType": "YulIdentifier",
												"src": "1861:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256",
							"nativeSrc": "1581:328:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1635:9:35",
									"nodeType": "YulTypedName",
									"src": "1635:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "1646:7:35",
									"nodeType": "YulTypedName",
									"src": "1646:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "1658:6:35",
									"nodeType": "YulTypedName",
									"src": "1658:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "1666:6:35",
									"nodeType": "YulTypedName",
									"src": "1666:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "1674:6:35",
									"nodeType": "YulTypedName",
									"src": "1674:6:35",
									"type": ""
								}
							],
							"src": "1581:328:35"
						},
						{
							"body": {
								"nativeSrc": "2011:87:35",
								"nodeType": "YulBlock",
								"src": "2011:87:35",
								"statements": [
									{
										"nativeSrc": "2021:26:35",
										"nodeType": "YulAssignment",
										"src": "2021:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2033:9:35",
													"nodeType": "YulIdentifier",
													"src": "2033:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "2044:2:35",
													"nodeType": "YulLiteral",
													"src": "2044:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2029:3:35",
												"nodeType": "YulIdentifier",
												"src": "2029:3:35"
											},
											"nativeSrc": "2029:18:35",
											"nodeType": "YulFunctionCall",
											"src": "2029:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2021:4:35",
												"nodeType": "YulIdentifier",
												"src": "2021:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2063:9:35",
													"nodeType": "YulIdentifier",
													"src": "2063:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "2078:6:35",
															"nodeType": "YulIdentifier",
															"src": "2078:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "2086:4:35",
															"nodeType": "YulLiteral",
															"src": "2086:4:35",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "2074:3:35",
														"nodeType": "YulIdentifier",
														"src": "2074:3:35"
													},
													"nativeSrc": "2074:17:35",
													"nodeType": "YulFunctionCall",
													"src": "2074:17:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2056:6:35",
												"nodeType": "YulIdentifier",
												"src": "2056:6:35"
											},
											"nativeSrc": "2056:36:35",
											"nodeType": "YulFunctionCall",
											"src": "2056:36:35"
										},
										"nativeSrc": "2056:36:35",
										"nodeType": "YulExpressionStatement",
										"src": "2056:36:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
							"nativeSrc": "1914:184:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "1980:9:35",
									"nodeType": "YulTypedName",
									"src": "1980:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "1991:6:35",
									"nodeType": "YulTypedName",
									"src": "1991:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2002:4:35",
									"nodeType": "YulTypedName",
									"src": "2002:4:35",
									"type": ""
								}
							],
							"src": "1914:184:35"
						},
						{
							"body": {
								"nativeSrc": "2204:76:35",
								"nodeType": "YulBlock",
								"src": "2204:76:35",
								"statements": [
									{
										"nativeSrc": "2214:26:35",
										"nodeType": "YulAssignment",
										"src": "2214:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2226:9:35",
													"nodeType": "YulIdentifier",
													"src": "2226:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "2237:2:35",
													"nodeType": "YulLiteral",
													"src": "2237:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "2222:3:35",
												"nodeType": "YulIdentifier",
												"src": "2222:3:35"
											},
											"nativeSrc": "2222:18:35",
											"nodeType": "YulFunctionCall",
											"src": "2222:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "2214:4:35",
												"nodeType": "YulIdentifier",
												"src": "2214:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2256:9:35",
													"nodeType": "YulIdentifier",
													"src": "2256:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "2267:6:35",
													"nodeType": "YulIdentifier",
													"src": "2267:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2249:6:35",
												"nodeType": "YulIdentifier",
												"src": "2249:6:35"
											},
											"nativeSrc": "2249:25:35",
											"nodeType": "YulFunctionCall",
											"src": "2249:25:35"
										},
										"nativeSrc": "2249:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "2249:25:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
							"nativeSrc": "2103:177:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2173:9:35",
									"nodeType": "YulTypedName",
									"src": "2173:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "2184:6:35",
									"nodeType": "YulTypedName",
									"src": "2184:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "2195:4:35",
									"nodeType": "YulTypedName",
									"src": "2195:4:35",
									"type": ""
								}
							],
							"src": "2103:177:35"
						},
						{
							"body": {
								"nativeSrc": "2372:173:35",
								"nodeType": "YulBlock",
								"src": "2372:173:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "2418:16:35",
											"nodeType": "YulBlock",
											"src": "2418:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2427:1:35",
																"nodeType": "YulLiteral",
																"src": "2427:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2430:1:35",
																"nodeType": "YulLiteral",
																"src": "2430:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2420:6:35",
															"nodeType": "YulIdentifier",
															"src": "2420:6:35"
														},
														"nativeSrc": "2420:12:35",
														"nodeType": "YulFunctionCall",
														"src": "2420:12:35"
													},
													"nativeSrc": "2420:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "2420:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2393:7:35",
															"nodeType": "YulIdentifier",
															"src": "2393:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "2402:9:35",
															"nodeType": "YulIdentifier",
															"src": "2402:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2389:3:35",
														"nodeType": "YulIdentifier",
														"src": "2389:3:35"
													},
													"nativeSrc": "2389:23:35",
													"nodeType": "YulFunctionCall",
													"src": "2389:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "2414:2:35",
													"nodeType": "YulLiteral",
													"src": "2414:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2385:3:35",
												"nodeType": "YulIdentifier",
												"src": "2385:3:35"
											},
											"nativeSrc": "2385:32:35",
											"nodeType": "YulFunctionCall",
											"src": "2385:32:35"
										},
										"nativeSrc": "2382:52:35",
										"nodeType": "YulIf",
										"src": "2382:52:35"
									},
									{
										"nativeSrc": "2443:39:35",
										"nodeType": "YulAssignment",
										"src": "2443:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2472:9:35",
													"nodeType": "YulIdentifier",
													"src": "2472:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "2453:18:35",
												"nodeType": "YulIdentifier",
												"src": "2453:18:35"
											},
											"nativeSrc": "2453:29:35",
											"nodeType": "YulFunctionCall",
											"src": "2453:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "2443:6:35",
												"nodeType": "YulIdentifier",
												"src": "2443:6:35"
											}
										]
									},
									{
										"nativeSrc": "2491:48:35",
										"nodeType": "YulAssignment",
										"src": "2491:48:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2524:9:35",
															"nodeType": "YulIdentifier",
															"src": "2524:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "2535:2:35",
															"nodeType": "YulLiteral",
															"src": "2535:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2520:3:35",
														"nodeType": "YulIdentifier",
														"src": "2520:3:35"
													},
													"nativeSrc": "2520:18:35",
													"nodeType": "YulFunctionCall",
													"src": "2520:18:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "2501:18:35",
												"nodeType": "YulIdentifier",
												"src": "2501:18:35"
											},
											"nativeSrc": "2501:38:35",
											"nodeType": "YulFunctionCall",
											"src": "2501:38:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "2491:6:35",
												"nodeType": "YulIdentifier",
												"src": "2491:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_address",
							"nativeSrc": "2285:260:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2330:9:35",
									"nodeType": "YulTypedName",
									"src": "2330:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2341:7:35",
									"nodeType": "YulTypedName",
									"src": "2341:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2353:6:35",
									"nodeType": "YulTypedName",
									"src": "2353:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2361:6:35",
									"nodeType": "YulTypedName",
									"src": "2361:6:35",
									"type": ""
								}
							],
							"src": "2285:260:35"
						},
						{
							"body": {
								"nativeSrc": "2582:95:35",
								"nodeType": "YulBlock",
								"src": "2582:95:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2599:1:35",
													"nodeType": "YulLiteral",
													"src": "2599:1:35",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "2606:3:35",
															"nodeType": "YulLiteral",
															"src": "2606:3:35",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "2611:10:35",
															"nodeType": "YulLiteral",
															"src": "2611:10:35",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "2602:3:35",
														"nodeType": "YulIdentifier",
														"src": "2602:3:35"
													},
													"nativeSrc": "2602:20:35",
													"nodeType": "YulFunctionCall",
													"src": "2602:20:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2592:6:35",
												"nodeType": "YulIdentifier",
												"src": "2592:6:35"
											},
											"nativeSrc": "2592:31:35",
											"nodeType": "YulFunctionCall",
											"src": "2592:31:35"
										},
										"nativeSrc": "2592:31:35",
										"nodeType": "YulExpressionStatement",
										"src": "2592:31:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2639:1:35",
													"nodeType": "YulLiteral",
													"src": "2639:1:35",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "2642:4:35",
													"nodeType": "YulLiteral",
													"src": "2642:4:35",
													"type": "",
													"value": "0x41"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "2632:6:35",
												"nodeType": "YulIdentifier",
												"src": "2632:6:35"
											},
											"nativeSrc": "2632:15:35",
											"nodeType": "YulFunctionCall",
											"src": "2632:15:35"
										},
										"nativeSrc": "2632:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "2632:15:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "2663:1:35",
													"nodeType": "YulLiteral",
													"src": "2663:1:35",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "2666:4:35",
													"nodeType": "YulLiteral",
													"src": "2666:4:35",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "2656:6:35",
												"nodeType": "YulIdentifier",
												"src": "2656:6:35"
											},
											"nativeSrc": "2656:15:35",
											"nodeType": "YulFunctionCall",
											"src": "2656:15:35"
										},
										"nativeSrc": "2656:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "2656:15:35"
									}
								]
							},
							"name": "panic_error_0x41",
							"nativeSrc": "2550:127:35",
							"nodeType": "YulFunctionDefinition",
							"src": "2550:127:35"
						},
						{
							"body": {
								"nativeSrc": "2778:899:35",
								"nodeType": "YulBlock",
								"src": "2778:899:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "2824:16:35",
											"nodeType": "YulBlock",
											"src": "2824:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "2833:1:35",
																"nodeType": "YulLiteral",
																"src": "2833:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "2836:1:35",
																"nodeType": "YulLiteral",
																"src": "2836:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "2826:6:35",
															"nodeType": "YulIdentifier",
															"src": "2826:6:35"
														},
														"nativeSrc": "2826:12:35",
														"nodeType": "YulFunctionCall",
														"src": "2826:12:35"
													},
													"nativeSrc": "2826:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "2826:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "2799:7:35",
															"nodeType": "YulIdentifier",
															"src": "2799:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "2808:9:35",
															"nodeType": "YulIdentifier",
															"src": "2808:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "2795:3:35",
														"nodeType": "YulIdentifier",
														"src": "2795:3:35"
													},
													"nativeSrc": "2795:23:35",
													"nodeType": "YulFunctionCall",
													"src": "2795:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "2820:2:35",
													"nodeType": "YulLiteral",
													"src": "2820:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "2791:3:35",
												"nodeType": "YulIdentifier",
												"src": "2791:3:35"
											},
											"nativeSrc": "2791:32:35",
											"nodeType": "YulFunctionCall",
											"src": "2791:32:35"
										},
										"nativeSrc": "2788:52:35",
										"nodeType": "YulIf",
										"src": "2788:52:35"
									},
									{
										"nativeSrc": "2849:39:35",
										"nodeType": "YulAssignment",
										"src": "2849:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "2878:9:35",
													"nodeType": "YulIdentifier",
													"src": "2878:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "2859:18:35",
												"nodeType": "YulIdentifier",
												"src": "2859:18:35"
											},
											"nativeSrc": "2859:29:35",
											"nodeType": "YulFunctionCall",
											"src": "2859:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "2849:6:35",
												"nodeType": "YulIdentifier",
												"src": "2849:6:35"
											}
										]
									},
									{
										"nativeSrc": "2897:46:35",
										"nodeType": "YulVariableDeclaration",
										"src": "2897:46:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "2928:9:35",
															"nodeType": "YulIdentifier",
															"src": "2928:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "2939:2:35",
															"nodeType": "YulLiteral",
															"src": "2939:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "2924:3:35",
														"nodeType": "YulIdentifier",
														"src": "2924:3:35"
													},
													"nativeSrc": "2924:18:35",
													"nodeType": "YulFunctionCall",
													"src": "2924:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "2911:12:35",
												"nodeType": "YulIdentifier",
												"src": "2911:12:35"
											},
											"nativeSrc": "2911:32:35",
											"nodeType": "YulFunctionCall",
											"src": "2911:32:35"
										},
										"variables": [
											{
												"name": "offset",
												"nativeSrc": "2901:6:35",
												"nodeType": "YulTypedName",
												"src": "2901:6:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "2952:28:35",
										"nodeType": "YulVariableDeclaration",
										"src": "2952:28:35",
										"value": {
											"kind": "number",
											"nativeSrc": "2962:18:35",
											"nodeType": "YulLiteral",
											"src": "2962:18:35",
											"type": "",
											"value": "0xffffffffffffffff"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "2956:2:35",
												"nodeType": "YulTypedName",
												"src": "2956:2:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3007:16:35",
											"nodeType": "YulBlock",
											"src": "3007:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3016:1:35",
																"nodeType": "YulLiteral",
																"src": "3016:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3019:1:35",
																"nodeType": "YulLiteral",
																"src": "3019:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3009:6:35",
															"nodeType": "YulIdentifier",
															"src": "3009:6:35"
														},
														"nativeSrc": "3009:12:35",
														"nodeType": "YulFunctionCall",
														"src": "3009:12:35"
													},
													"nativeSrc": "3009:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "3009:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "2995:6:35",
													"nodeType": "YulIdentifier",
													"src": "2995:6:35"
												},
												{
													"name": "_1",
													"nativeSrc": "3003:2:35",
													"nodeType": "YulIdentifier",
													"src": "3003:2:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "2992:2:35",
												"nodeType": "YulIdentifier",
												"src": "2992:2:35"
											},
											"nativeSrc": "2992:14:35",
											"nodeType": "YulFunctionCall",
											"src": "2992:14:35"
										},
										"nativeSrc": "2989:34:35",
										"nodeType": "YulIf",
										"src": "2989:34:35"
									},
									{
										"nativeSrc": "3032:32:35",
										"nodeType": "YulVariableDeclaration",
										"src": "3032:32:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3046:9:35",
													"nodeType": "YulIdentifier",
													"src": "3046:9:35"
												},
												{
													"name": "offset",
													"nativeSrc": "3057:6:35",
													"nodeType": "YulIdentifier",
													"src": "3057:6:35"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3042:3:35",
												"nodeType": "YulIdentifier",
												"src": "3042:3:35"
											},
											"nativeSrc": "3042:22:35",
											"nodeType": "YulFunctionCall",
											"src": "3042:22:35"
										},
										"variables": [
											{
												"name": "_2",
												"nativeSrc": "3036:2:35",
												"nodeType": "YulTypedName",
												"src": "3036:2:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3112:16:35",
											"nodeType": "YulBlock",
											"src": "3112:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3121:1:35",
																"nodeType": "YulLiteral",
																"src": "3121:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3124:1:35",
																"nodeType": "YulLiteral",
																"src": "3124:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3114:6:35",
															"nodeType": "YulIdentifier",
															"src": "3114:6:35"
														},
														"nativeSrc": "3114:12:35",
														"nodeType": "YulFunctionCall",
														"src": "3114:12:35"
													},
													"nativeSrc": "3114:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "3114:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nativeSrc": "3091:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "3091:2:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3095:4:35",
																	"nodeType": "YulLiteral",
																	"src": "3095:4:35",
																	"type": "",
																	"value": "0x1f"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3087:3:35",
																"nodeType": "YulIdentifier",
																"src": "3087:3:35"
															},
															"nativeSrc": "3087:13:35",
															"nodeType": "YulFunctionCall",
															"src": "3087:13:35"
														},
														{
															"name": "dataEnd",
															"nativeSrc": "3102:7:35",
															"nodeType": "YulIdentifier",
															"src": "3102:7:35"
														}
													],
													"functionName": {
														"name": "slt",
														"nativeSrc": "3083:3:35",
														"nodeType": "YulIdentifier",
														"src": "3083:3:35"
													},
													"nativeSrc": "3083:27:35",
													"nodeType": "YulFunctionCall",
													"src": "3083:27:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "3076:6:35",
												"nodeType": "YulIdentifier",
												"src": "3076:6:35"
											},
											"nativeSrc": "3076:35:35",
											"nodeType": "YulFunctionCall",
											"src": "3076:35:35"
										},
										"nativeSrc": "3073:55:35",
										"nodeType": "YulIf",
										"src": "3073:55:35"
									},
									{
										"nativeSrc": "3137:26:35",
										"nodeType": "YulVariableDeclaration",
										"src": "3137:26:35",
										"value": {
											"arguments": [
												{
													"name": "_2",
													"nativeSrc": "3160:2:35",
													"nodeType": "YulIdentifier",
													"src": "3160:2:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "3147:12:35",
												"nodeType": "YulIdentifier",
												"src": "3147:12:35"
											},
											"nativeSrc": "3147:16:35",
											"nodeType": "YulFunctionCall",
											"src": "3147:16:35"
										},
										"variables": [
											{
												"name": "_3",
												"nativeSrc": "3141:2:35",
												"nodeType": "YulTypedName",
												"src": "3141:2:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3186:22:35",
											"nodeType": "YulBlock",
											"src": "3186:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "3188:16:35",
															"nodeType": "YulIdentifier",
															"src": "3188:16:35"
														},
														"nativeSrc": "3188:18:35",
														"nodeType": "YulFunctionCall",
														"src": "3188:18:35"
													},
													"nativeSrc": "3188:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "3188:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "_3",
													"nativeSrc": "3178:2:35",
													"nodeType": "YulIdentifier",
													"src": "3178:2:35"
												},
												{
													"name": "_1",
													"nativeSrc": "3182:2:35",
													"nodeType": "YulIdentifier",
													"src": "3182:2:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3175:2:35",
												"nodeType": "YulIdentifier",
												"src": "3175:2:35"
											},
											"nativeSrc": "3175:10:35",
											"nodeType": "YulFunctionCall",
											"src": "3175:10:35"
										},
										"nativeSrc": "3172:36:35",
										"nodeType": "YulIf",
										"src": "3172:36:35"
									},
									{
										"nativeSrc": "3217:17:35",
										"nodeType": "YulVariableDeclaration",
										"src": "3217:17:35",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "3231:2:35",
													"nodeType": "YulLiteral",
													"src": "3231:2:35",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "not",
												"nativeSrc": "3227:3:35",
												"nodeType": "YulIdentifier",
												"src": "3227:3:35"
											},
											"nativeSrc": "3227:7:35",
											"nodeType": "YulFunctionCall",
											"src": "3227:7:35"
										},
										"variables": [
											{
												"name": "_4",
												"nativeSrc": "3221:2:35",
												"nodeType": "YulTypedName",
												"src": "3221:2:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3243:23:35",
										"nodeType": "YulVariableDeclaration",
										"src": "3243:23:35",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "3263:2:35",
													"nodeType": "YulLiteral",
													"src": "3263:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "3257:5:35",
												"nodeType": "YulIdentifier",
												"src": "3257:5:35"
											},
											"nativeSrc": "3257:9:35",
											"nodeType": "YulFunctionCall",
											"src": "3257:9:35"
										},
										"variables": [
											{
												"name": "memPtr",
												"nativeSrc": "3247:6:35",
												"nodeType": "YulTypedName",
												"src": "3247:6:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "3275:71:35",
										"nodeType": "YulVariableDeclaration",
										"src": "3275:71:35",
										"value": {
											"arguments": [
												{
													"name": "memPtr",
													"nativeSrc": "3297:6:35",
													"nodeType": "YulIdentifier",
													"src": "3297:6:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"name": "_3",
																					"nativeSrc": "3321:2:35",
																					"nodeType": "YulIdentifier",
																					"src": "3321:2:35"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3325:4:35",
																					"nodeType": "YulLiteral",
																					"src": "3325:4:35",
																					"type": "",
																					"value": "0x1f"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3317:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "3317:3:35"
																			},
																			"nativeSrc": "3317:13:35",
																			"nodeType": "YulFunctionCall",
																			"src": "3317:13:35"
																		},
																		{
																			"name": "_4",
																			"nativeSrc": "3332:2:35",
																			"nodeType": "YulIdentifier",
																			"src": "3332:2:35"
																		}
																	],
																	"functionName": {
																		"name": "and",
																		"nativeSrc": "3313:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "3313:3:35"
																	},
																	"nativeSrc": "3313:22:35",
																	"nodeType": "YulFunctionCall",
																	"src": "3313:22:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "3337:2:35",
																	"nodeType": "YulLiteral",
																	"src": "3337:2:35",
																	"type": "",
																	"value": "63"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3309:3:35",
																"nodeType": "YulIdentifier",
																"src": "3309:3:35"
															},
															"nativeSrc": "3309:31:35",
															"nodeType": "YulFunctionCall",
															"src": "3309:31:35"
														},
														{
															"name": "_4",
															"nativeSrc": "3342:2:35",
															"nodeType": "YulIdentifier",
															"src": "3342:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "3305:3:35",
														"nodeType": "YulIdentifier",
														"src": "3305:3:35"
													},
													"nativeSrc": "3305:40:35",
													"nodeType": "YulFunctionCall",
													"src": "3305:40:35"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3293:3:35",
												"nodeType": "YulIdentifier",
												"src": "3293:3:35"
											},
											"nativeSrc": "3293:53:35",
											"nodeType": "YulFunctionCall",
											"src": "3293:53:35"
										},
										"variables": [
											{
												"name": "newFreePtr",
												"nativeSrc": "3279:10:35",
												"nodeType": "YulTypedName",
												"src": "3279:10:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "3405:22:35",
											"nodeType": "YulBlock",
											"src": "3405:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "3407:16:35",
															"nodeType": "YulIdentifier",
															"src": "3407:16:35"
														},
														"nativeSrc": "3407:18:35",
														"nodeType": "YulFunctionCall",
														"src": "3407:18:35"
													},
													"nativeSrc": "3407:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "3407:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nativeSrc": "3364:10:35",
															"nodeType": "YulIdentifier",
															"src": "3364:10:35"
														},
														{
															"name": "_1",
															"nativeSrc": "3376:2:35",
															"nodeType": "YulIdentifier",
															"src": "3376:2:35"
														}
													],
													"functionName": {
														"name": "gt",
														"nativeSrc": "3361:2:35",
														"nodeType": "YulIdentifier",
														"src": "3361:2:35"
													},
													"nativeSrc": "3361:18:35",
													"nodeType": "YulFunctionCall",
													"src": "3361:18:35"
												},
												{
													"arguments": [
														{
															"name": "newFreePtr",
															"nativeSrc": "3384:10:35",
															"nodeType": "YulIdentifier",
															"src": "3384:10:35"
														},
														{
															"name": "memPtr",
															"nativeSrc": "3396:6:35",
															"nodeType": "YulIdentifier",
															"src": "3396:6:35"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "3381:2:35",
														"nodeType": "YulIdentifier",
														"src": "3381:2:35"
													},
													"nativeSrc": "3381:22:35",
													"nodeType": "YulFunctionCall",
													"src": "3381:22:35"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "3358:2:35",
												"nodeType": "YulIdentifier",
												"src": "3358:2:35"
											},
											"nativeSrc": "3358:46:35",
											"nodeType": "YulFunctionCall",
											"src": "3358:46:35"
										},
										"nativeSrc": "3355:72:35",
										"nodeType": "YulIf",
										"src": "3355:72:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "3443:2:35",
													"nodeType": "YulLiteral",
													"src": "3443:2:35",
													"type": "",
													"value": "64"
												},
												{
													"name": "newFreePtr",
													"nativeSrc": "3447:10:35",
													"nodeType": "YulIdentifier",
													"src": "3447:10:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3436:6:35",
												"nodeType": "YulIdentifier",
												"src": "3436:6:35"
											},
											"nativeSrc": "3436:22:35",
											"nodeType": "YulFunctionCall",
											"src": "3436:22:35"
										},
										"nativeSrc": "3436:22:35",
										"nodeType": "YulExpressionStatement",
										"src": "3436:22:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "memPtr",
													"nativeSrc": "3474:6:35",
													"nodeType": "YulIdentifier",
													"src": "3474:6:35"
												},
												{
													"name": "_3",
													"nativeSrc": "3482:2:35",
													"nodeType": "YulIdentifier",
													"src": "3482:2:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3467:6:35",
												"nodeType": "YulIdentifier",
												"src": "3467:6:35"
											},
											"nativeSrc": "3467:18:35",
											"nodeType": "YulFunctionCall",
											"src": "3467:18:35"
										},
										"nativeSrc": "3467:18:35",
										"nodeType": "YulExpressionStatement",
										"src": "3467:18:35"
									},
									{
										"body": {
											"nativeSrc": "3531:16:35",
											"nodeType": "YulBlock",
											"src": "3531:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3540:1:35",
																"nodeType": "YulLiteral",
																"src": "3540:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3543:1:35",
																"nodeType": "YulLiteral",
																"src": "3543:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3533:6:35",
															"nodeType": "YulIdentifier",
															"src": "3533:6:35"
														},
														"nativeSrc": "3533:12:35",
														"nodeType": "YulFunctionCall",
														"src": "3533:12:35"
													},
													"nativeSrc": "3533:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "3533:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "_2",
																	"nativeSrc": "3508:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "3508:2:35"
																},
																{
																	"name": "_3",
																	"nativeSrc": "3512:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "3512:2:35"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3504:3:35",
																"nodeType": "YulIdentifier",
																"src": "3504:3:35"
															},
															"nativeSrc": "3504:11:35",
															"nodeType": "YulFunctionCall",
															"src": "3504:11:35"
														},
														{
															"kind": "number",
															"nativeSrc": "3517:2:35",
															"nodeType": "YulLiteral",
															"src": "3517:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3500:3:35",
														"nodeType": "YulIdentifier",
														"src": "3500:3:35"
													},
													"nativeSrc": "3500:20:35",
													"nodeType": "YulFunctionCall",
													"src": "3500:20:35"
												},
												{
													"name": "dataEnd",
													"nativeSrc": "3522:7:35",
													"nodeType": "YulIdentifier",
													"src": "3522:7:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "3497:2:35",
												"nodeType": "YulIdentifier",
												"src": "3497:2:35"
											},
											"nativeSrc": "3497:33:35",
											"nodeType": "YulFunctionCall",
											"src": "3497:33:35"
										},
										"nativeSrc": "3494:53:35",
										"nodeType": "YulIf",
										"src": "3494:53:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "memPtr",
															"nativeSrc": "3573:6:35",
															"nodeType": "YulIdentifier",
															"src": "3573:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "3581:2:35",
															"nodeType": "YulLiteral",
															"src": "3581:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3569:3:35",
														"nodeType": "YulIdentifier",
														"src": "3569:3:35"
													},
													"nativeSrc": "3569:15:35",
													"nodeType": "YulFunctionCall",
													"src": "3569:15:35"
												},
												{
													"arguments": [
														{
															"name": "_2",
															"nativeSrc": "3590:2:35",
															"nodeType": "YulIdentifier",
															"src": "3590:2:35"
														},
														{
															"kind": "number",
															"nativeSrc": "3594:2:35",
															"nodeType": "YulLiteral",
															"src": "3594:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3586:3:35",
														"nodeType": "YulIdentifier",
														"src": "3586:3:35"
													},
													"nativeSrc": "3586:11:35",
													"nodeType": "YulFunctionCall",
													"src": "3586:11:35"
												},
												{
													"name": "_3",
													"nativeSrc": "3599:2:35",
													"nodeType": "YulIdentifier",
													"src": "3599:2:35"
												}
											],
											"functionName": {
												"name": "calldatacopy",
												"nativeSrc": "3556:12:35",
												"nodeType": "YulIdentifier",
												"src": "3556:12:35"
											},
											"nativeSrc": "3556:46:35",
											"nodeType": "YulFunctionCall",
											"src": "3556:46:35"
										},
										"nativeSrc": "3556:46:35",
										"nodeType": "YulExpressionStatement",
										"src": "3556:46:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "memPtr",
																	"nativeSrc": "3626:6:35",
																	"nodeType": "YulIdentifier",
																	"src": "3626:6:35"
																},
																{
																	"name": "_3",
																	"nativeSrc": "3634:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "3634:2:35"
																}
															],
															"functionName": {
																"name": "add",
																"nativeSrc": "3622:3:35",
																"nodeType": "YulIdentifier",
																"src": "3622:3:35"
															},
															"nativeSrc": "3622:15:35",
															"nodeType": "YulFunctionCall",
															"src": "3622:15:35"
														},
														{
															"kind": "number",
															"nativeSrc": "3639:2:35",
															"nodeType": "YulLiteral",
															"src": "3639:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "3618:3:35",
														"nodeType": "YulIdentifier",
														"src": "3618:3:35"
													},
													"nativeSrc": "3618:24:35",
													"nodeType": "YulFunctionCall",
													"src": "3618:24:35"
												},
												{
													"kind": "number",
													"nativeSrc": "3644:1:35",
													"nodeType": "YulLiteral",
													"src": "3644:1:35",
													"type": "",
													"value": "0"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "3611:6:35",
												"nodeType": "YulIdentifier",
												"src": "3611:6:35"
											},
											"nativeSrc": "3611:35:35",
											"nodeType": "YulFunctionCall",
											"src": "3611:35:35"
										},
										"nativeSrc": "3611:35:35",
										"nodeType": "YulExpressionStatement",
										"src": "3611:35:35"
									},
									{
										"nativeSrc": "3655:16:35",
										"nodeType": "YulAssignment",
										"src": "3655:16:35",
										"value": {
											"name": "memPtr",
											"nativeSrc": "3665:6:35",
											"nodeType": "YulIdentifier",
											"src": "3665:6:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "3655:6:35",
												"nodeType": "YulIdentifier",
												"src": "3655:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_bytes_memory_ptr",
							"nativeSrc": "2682:995:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "2736:9:35",
									"nodeType": "YulTypedName",
									"src": "2736:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "2747:7:35",
									"nodeType": "YulTypedName",
									"src": "2747:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "2759:6:35",
									"nodeType": "YulTypedName",
									"src": "2759:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "2767:6:35",
									"nodeType": "YulTypedName",
									"src": "2767:6:35",
									"type": ""
								}
							],
							"src": "2682:995:35"
						},
						{
							"body": {
								"nativeSrc": "3752:116:35",
								"nodeType": "YulBlock",
								"src": "3752:116:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "3798:16:35",
											"nodeType": "YulBlock",
											"src": "3798:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "3807:1:35",
																"nodeType": "YulLiteral",
																"src": "3807:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "3810:1:35",
																"nodeType": "YulLiteral",
																"src": "3810:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "3800:6:35",
															"nodeType": "YulIdentifier",
															"src": "3800:6:35"
														},
														"nativeSrc": "3800:12:35",
														"nodeType": "YulFunctionCall",
														"src": "3800:12:35"
													},
													"nativeSrc": "3800:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "3800:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "3773:7:35",
															"nodeType": "YulIdentifier",
															"src": "3773:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "3782:9:35",
															"nodeType": "YulIdentifier",
															"src": "3782:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "3769:3:35",
														"nodeType": "YulIdentifier",
														"src": "3769:3:35"
													},
													"nativeSrc": "3769:23:35",
													"nodeType": "YulFunctionCall",
													"src": "3769:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "3794:2:35",
													"nodeType": "YulLiteral",
													"src": "3794:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "3765:3:35",
												"nodeType": "YulIdentifier",
												"src": "3765:3:35"
											},
											"nativeSrc": "3765:32:35",
											"nodeType": "YulFunctionCall",
											"src": "3765:32:35"
										},
										"nativeSrc": "3762:52:35",
										"nodeType": "YulIf",
										"src": "3762:52:35"
									},
									{
										"nativeSrc": "3823:39:35",
										"nodeType": "YulAssignment",
										"src": "3823:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3852:9:35",
													"nodeType": "YulIdentifier",
													"src": "3852:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "3833:18:35",
												"nodeType": "YulIdentifier",
												"src": "3833:18:35"
											},
											"nativeSrc": "3833:29:35",
											"nodeType": "YulFunctionCall",
											"src": "3833:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "3823:6:35",
												"nodeType": "YulIdentifier",
												"src": "3823:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_address",
							"nativeSrc": "3682:186:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3718:9:35",
									"nodeType": "YulTypedName",
									"src": "3718:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "3729:7:35",
									"nodeType": "YulTypedName",
									"src": "3729:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "3741:6:35",
									"nodeType": "YulTypedName",
									"src": "3741:6:35",
									"type": ""
								}
							],
							"src": "3682:186:35"
						},
						{
							"body": {
								"nativeSrc": "3974:102:35",
								"nodeType": "YulBlock",
								"src": "3974:102:35",
								"statements": [
									{
										"nativeSrc": "3984:26:35",
										"nodeType": "YulAssignment",
										"src": "3984:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "3996:9:35",
													"nodeType": "YulIdentifier",
													"src": "3996:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "4007:2:35",
													"nodeType": "YulLiteral",
													"src": "4007:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "3992:3:35",
												"nodeType": "YulIdentifier",
												"src": "3992:3:35"
											},
											"nativeSrc": "3992:18:35",
											"nodeType": "YulFunctionCall",
											"src": "3992:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "3984:4:35",
												"nodeType": "YulIdentifier",
												"src": "3984:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4026:9:35",
													"nodeType": "YulIdentifier",
													"src": "4026:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "4041:6:35",
															"nodeType": "YulIdentifier",
															"src": "4041:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "4057:3:35",
																			"nodeType": "YulLiteral",
																			"src": "4057:3:35",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "4062:1:35",
																			"nodeType": "YulLiteral",
																			"src": "4062:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "4053:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "4053:3:35"
																	},
																	"nativeSrc": "4053:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "4053:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4066:1:35",
																	"nodeType": "YulLiteral",
																	"src": "4066:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "4049:3:35",
																"nodeType": "YulIdentifier",
																"src": "4049:3:35"
															},
															"nativeSrc": "4049:19:35",
															"nodeType": "YulFunctionCall",
															"src": "4049:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4037:3:35",
														"nodeType": "YulIdentifier",
														"src": "4037:3:35"
													},
													"nativeSrc": "4037:32:35",
													"nodeType": "YulFunctionCall",
													"src": "4037:32:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4019:6:35",
												"nodeType": "YulIdentifier",
												"src": "4019:6:35"
											},
											"nativeSrc": "4019:51:35",
											"nodeType": "YulFunctionCall",
											"src": "4019:51:35"
										},
										"nativeSrc": "4019:51:35",
										"nodeType": "YulExpressionStatement",
										"src": "4019:51:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
							"nativeSrc": "3873:203:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "3943:9:35",
									"nodeType": "YulTypedName",
									"src": "3943:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "3954:6:35",
									"nodeType": "YulTypedName",
									"src": "3954:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "3965:4:35",
									"nodeType": "YulTypedName",
									"src": "3965:4:35",
									"type": ""
								}
							],
							"src": "3873:203:35"
						},
						{
							"body": {
								"nativeSrc": "4180:93:35",
								"nodeType": "YulBlock",
								"src": "4180:93:35",
								"statements": [
									{
										"nativeSrc": "4190:26:35",
										"nodeType": "YulAssignment",
										"src": "4190:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4202:9:35",
													"nodeType": "YulIdentifier",
													"src": "4202:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "4213:2:35",
													"nodeType": "YulLiteral",
													"src": "4213:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "4198:3:35",
												"nodeType": "YulIdentifier",
												"src": "4198:3:35"
											},
											"nativeSrc": "4198:18:35",
											"nodeType": "YulFunctionCall",
											"src": "4198:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "4190:4:35",
												"nodeType": "YulIdentifier",
												"src": "4190:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4232:9:35",
													"nodeType": "YulIdentifier",
													"src": "4232:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "4247:6:35",
															"nodeType": "YulIdentifier",
															"src": "4247:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "4255:10:35",
															"nodeType": "YulLiteral",
															"src": "4255:10:35",
															"type": "",
															"value": "0xffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4243:3:35",
														"nodeType": "YulIdentifier",
														"src": "4243:3:35"
													},
													"nativeSrc": "4243:23:35",
													"nodeType": "YulFunctionCall",
													"src": "4243:23:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4225:6:35",
												"nodeType": "YulIdentifier",
												"src": "4225:6:35"
											},
											"nativeSrc": "4225:42:35",
											"nodeType": "YulFunctionCall",
											"src": "4225:42:35"
										},
										"nativeSrc": "4225:42:35",
										"nodeType": "YulExpressionStatement",
										"src": "4225:42:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed",
							"nativeSrc": "4081:192:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4149:9:35",
									"nodeType": "YulTypedName",
									"src": "4149:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4160:6:35",
									"nodeType": "YulTypedName",
									"src": "4160:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4171:4:35",
									"nodeType": "YulTypedName",
									"src": "4171:4:35",
									"type": ""
								}
							],
							"src": "4081:192:35"
						},
						{
							"body": {
								"nativeSrc": "4635:902:35",
								"nodeType": "YulBlock",
								"src": "4635:902:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "4652:9:35",
													"nodeType": "YulIdentifier",
													"src": "4652:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "4667:6:35",
															"nodeType": "YulIdentifier",
															"src": "4667:6:35"
														},
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "4679:3:35",
																	"nodeType": "YulLiteral",
																	"src": "4679:3:35",
																	"type": "",
																	"value": "248"
																},
																{
																	"kind": "number",
																	"nativeSrc": "4684:3:35",
																	"nodeType": "YulLiteral",
																	"src": "4684:3:35",
																	"type": "",
																	"value": "255"
																}
															],
															"functionName": {
																"name": "shl",
																"nativeSrc": "4675:3:35",
																"nodeType": "YulIdentifier",
																"src": "4675:3:35"
															},
															"nativeSrc": "4675:13:35",
															"nodeType": "YulFunctionCall",
															"src": "4675:13:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "4663:3:35",
														"nodeType": "YulIdentifier",
														"src": "4663:3:35"
													},
													"nativeSrc": "4663:26:35",
													"nodeType": "YulFunctionCall",
													"src": "4663:26:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4645:6:35",
												"nodeType": "YulIdentifier",
												"src": "4645:6:35"
											},
											"nativeSrc": "4645:45:35",
											"nodeType": "YulFunctionCall",
											"src": "4645:45:35"
										},
										"nativeSrc": "4645:45:35",
										"nodeType": "YulExpressionStatement",
										"src": "4645:45:35"
									},
									{
										"nativeSrc": "4699:12:35",
										"nodeType": "YulVariableDeclaration",
										"src": "4699:12:35",
										"value": {
											"kind": "number",
											"nativeSrc": "4709:2:35",
											"nodeType": "YulLiteral",
											"src": "4709:2:35",
											"type": "",
											"value": "32"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "4703:2:35",
												"nodeType": "YulTypedName",
												"src": "4703:2:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4731:9:35",
															"nodeType": "YulIdentifier",
															"src": "4731:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "4742:2:35",
															"nodeType": "YulLiteral",
															"src": "4742:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4727:3:35",
														"nodeType": "YulIdentifier",
														"src": "4727:3:35"
													},
													"nativeSrc": "4727:18:35",
													"nodeType": "YulFunctionCall",
													"src": "4727:18:35"
												},
												{
													"kind": "number",
													"nativeSrc": "4747:3:35",
													"nodeType": "YulLiteral",
													"src": "4747:3:35",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4720:6:35",
												"nodeType": "YulIdentifier",
												"src": "4720:6:35"
											},
											"nativeSrc": "4720:31:35",
											"nodeType": "YulFunctionCall",
											"src": "4720:31:35"
										},
										"nativeSrc": "4720:31:35",
										"nodeType": "YulExpressionStatement",
										"src": "4720:31:35"
									},
									{
										"nativeSrc": "4760:60:35",
										"nodeType": "YulVariableDeclaration",
										"src": "4760:60:35",
										"value": {
											"arguments": [
												{
													"name": "value1",
													"nativeSrc": "4792:6:35",
													"nodeType": "YulIdentifier",
													"src": "4792:6:35"
												},
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4804:9:35",
															"nodeType": "YulIdentifier",
															"src": "4804:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "4815:3:35",
															"nodeType": "YulLiteral",
															"src": "4815:3:35",
															"type": "",
															"value": "224"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4800:3:35",
														"nodeType": "YulIdentifier",
														"src": "4800:3:35"
													},
													"nativeSrc": "4800:19:35",
													"nodeType": "YulFunctionCall",
													"src": "4800:19:35"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "4774:17:35",
												"nodeType": "YulIdentifier",
												"src": "4774:17:35"
											},
											"nativeSrc": "4774:46:35",
											"nodeType": "YulFunctionCall",
											"src": "4774:46:35"
										},
										"variables": [
											{
												"name": "tail_1",
												"nativeSrc": "4764:6:35",
												"nodeType": "YulTypedName",
												"src": "4764:6:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4840:9:35",
															"nodeType": "YulIdentifier",
															"src": "4840:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "4851:2:35",
															"nodeType": "YulLiteral",
															"src": "4851:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4836:3:35",
														"nodeType": "YulIdentifier",
														"src": "4836:3:35"
													},
													"nativeSrc": "4836:18:35",
													"nodeType": "YulFunctionCall",
													"src": "4836:18:35"
												},
												{
													"arguments": [
														{
															"name": "tail_1",
															"nativeSrc": "4860:6:35",
															"nodeType": "YulIdentifier",
															"src": "4860:6:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "4868:9:35",
															"nodeType": "YulIdentifier",
															"src": "4868:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "4856:3:35",
														"nodeType": "YulIdentifier",
														"src": "4856:3:35"
													},
													"nativeSrc": "4856:22:35",
													"nodeType": "YulFunctionCall",
													"src": "4856:22:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4829:6:35",
												"nodeType": "YulIdentifier",
												"src": "4829:6:35"
											},
											"nativeSrc": "4829:50:35",
											"nodeType": "YulFunctionCall",
											"src": "4829:50:35"
										},
										"nativeSrc": "4829:50:35",
										"nodeType": "YulExpressionStatement",
										"src": "4829:50:35"
									},
									{
										"nativeSrc": "4888:47:35",
										"nodeType": "YulVariableDeclaration",
										"src": "4888:47:35",
										"value": {
											"arguments": [
												{
													"name": "value2",
													"nativeSrc": "4920:6:35",
													"nodeType": "YulIdentifier",
													"src": "4920:6:35"
												},
												{
													"name": "tail_1",
													"nativeSrc": "4928:6:35",
													"nodeType": "YulIdentifier",
													"src": "4928:6:35"
												}
											],
											"functionName": {
												"name": "abi_encode_string",
												"nativeSrc": "4902:17:35",
												"nodeType": "YulIdentifier",
												"src": "4902:17:35"
											},
											"nativeSrc": "4902:33:35",
											"nodeType": "YulFunctionCall",
											"src": "4902:33:35"
										},
										"variables": [
											{
												"name": "tail_2",
												"nativeSrc": "4892:6:35",
												"nodeType": "YulTypedName",
												"src": "4892:6:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4955:9:35",
															"nodeType": "YulIdentifier",
															"src": "4955:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "4966:2:35",
															"nodeType": "YulLiteral",
															"src": "4966:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4951:3:35",
														"nodeType": "YulIdentifier",
														"src": "4951:3:35"
													},
													"nativeSrc": "4951:18:35",
													"nodeType": "YulFunctionCall",
													"src": "4951:18:35"
												},
												{
													"name": "value3",
													"nativeSrc": "4971:6:35",
													"nodeType": "YulIdentifier",
													"src": "4971:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4944:6:35",
												"nodeType": "YulIdentifier",
												"src": "4944:6:35"
											},
											"nativeSrc": "4944:34:35",
											"nodeType": "YulFunctionCall",
											"src": "4944:34:35"
										},
										"nativeSrc": "4944:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "4944:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "4998:9:35",
															"nodeType": "YulIdentifier",
															"src": "4998:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "5009:3:35",
															"nodeType": "YulLiteral",
															"src": "5009:3:35",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "4994:3:35",
														"nodeType": "YulIdentifier",
														"src": "4994:3:35"
													},
													"nativeSrc": "4994:19:35",
													"nodeType": "YulFunctionCall",
													"src": "4994:19:35"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "5019:6:35",
															"nodeType": "YulIdentifier",
															"src": "5019:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "5035:3:35",
																			"nodeType": "YulLiteral",
																			"src": "5035:3:35",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "5040:1:35",
																			"nodeType": "YulLiteral",
																			"src": "5040:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "5031:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "5031:3:35"
																	},
																	"nativeSrc": "5031:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "5031:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "5044:1:35",
																	"nodeType": "YulLiteral",
																	"src": "5044:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "5027:3:35",
																"nodeType": "YulIdentifier",
																"src": "5027:3:35"
															},
															"nativeSrc": "5027:19:35",
															"nodeType": "YulFunctionCall",
															"src": "5027:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5015:3:35",
														"nodeType": "YulIdentifier",
														"src": "5015:3:35"
													},
													"nativeSrc": "5015:32:35",
													"nodeType": "YulFunctionCall",
													"src": "5015:32:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "4987:6:35",
												"nodeType": "YulIdentifier",
												"src": "4987:6:35"
											},
											"nativeSrc": "4987:61:35",
											"nodeType": "YulFunctionCall",
											"src": "4987:61:35"
										},
										"nativeSrc": "4987:61:35",
										"nodeType": "YulExpressionStatement",
										"src": "4987:61:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5068:9:35",
															"nodeType": "YulIdentifier",
															"src": "5068:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "5079:3:35",
															"nodeType": "YulLiteral",
															"src": "5079:3:35",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5064:3:35",
														"nodeType": "YulIdentifier",
														"src": "5064:3:35"
													},
													"nativeSrc": "5064:19:35",
													"nodeType": "YulFunctionCall",
													"src": "5064:19:35"
												},
												{
													"name": "value5",
													"nativeSrc": "5085:6:35",
													"nodeType": "YulIdentifier",
													"src": "5085:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5057:6:35",
												"nodeType": "YulIdentifier",
												"src": "5057:6:35"
											},
											"nativeSrc": "5057:35:35",
											"nodeType": "YulFunctionCall",
											"src": "5057:35:35"
										},
										"nativeSrc": "5057:35:35",
										"nodeType": "YulExpressionStatement",
										"src": "5057:35:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "5112:9:35",
															"nodeType": "YulIdentifier",
															"src": "5112:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "5123:3:35",
															"nodeType": "YulLiteral",
															"src": "5123:3:35",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "5108:3:35",
														"nodeType": "YulIdentifier",
														"src": "5108:3:35"
													},
													"nativeSrc": "5108:19:35",
													"nodeType": "YulFunctionCall",
													"src": "5108:19:35"
												},
												{
													"arguments": [
														{
															"name": "tail_2",
															"nativeSrc": "5133:6:35",
															"nodeType": "YulIdentifier",
															"src": "5133:6:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "5141:9:35",
															"nodeType": "YulIdentifier",
															"src": "5141:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5129:3:35",
														"nodeType": "YulIdentifier",
														"src": "5129:3:35"
													},
													"nativeSrc": "5129:22:35",
													"nodeType": "YulFunctionCall",
													"src": "5129:22:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5101:6:35",
												"nodeType": "YulIdentifier",
												"src": "5101:6:35"
											},
											"nativeSrc": "5101:51:35",
											"nodeType": "YulFunctionCall",
											"src": "5101:51:35"
										},
										"nativeSrc": "5101:51:35",
										"nodeType": "YulExpressionStatement",
										"src": "5101:51:35"
									},
									{
										"nativeSrc": "5161:17:35",
										"nodeType": "YulVariableDeclaration",
										"src": "5161:17:35",
										"value": {
											"name": "tail_2",
											"nativeSrc": "5172:6:35",
											"nodeType": "YulIdentifier",
											"src": "5172:6:35"
										},
										"variables": [
											{
												"name": "pos",
												"nativeSrc": "5165:3:35",
												"nodeType": "YulTypedName",
												"src": "5165:3:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "5187:27:35",
										"nodeType": "YulVariableDeclaration",
										"src": "5187:27:35",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "5207:6:35",
													"nodeType": "YulIdentifier",
													"src": "5207:6:35"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "5201:5:35",
												"nodeType": "YulIdentifier",
												"src": "5201:5:35"
											},
											"nativeSrc": "5201:13:35",
											"nodeType": "YulFunctionCall",
											"src": "5201:13:35"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "5191:6:35",
												"nodeType": "YulTypedName",
												"src": "5191:6:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "5230:6:35",
													"nodeType": "YulIdentifier",
													"src": "5230:6:35"
												},
												{
													"name": "length",
													"nativeSrc": "5238:6:35",
													"nodeType": "YulIdentifier",
													"src": "5238:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5223:6:35",
												"nodeType": "YulIdentifier",
												"src": "5223:6:35"
											},
											"nativeSrc": "5223:22:35",
											"nodeType": "YulFunctionCall",
											"src": "5223:22:35"
										},
										"nativeSrc": "5223:22:35",
										"nodeType": "YulExpressionStatement",
										"src": "5223:22:35"
									},
									{
										"nativeSrc": "5254:22:35",
										"nodeType": "YulAssignment",
										"src": "5254:22:35",
										"value": {
											"arguments": [
												{
													"name": "tail_2",
													"nativeSrc": "5265:6:35",
													"nodeType": "YulIdentifier",
													"src": "5265:6:35"
												},
												{
													"kind": "number",
													"nativeSrc": "5273:2:35",
													"nodeType": "YulLiteral",
													"src": "5273:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5261:3:35",
												"nodeType": "YulIdentifier",
												"src": "5261:3:35"
											},
											"nativeSrc": "5261:15:35",
											"nodeType": "YulFunctionCall",
											"src": "5261:15:35"
										},
										"variableNames": [
											{
												"name": "pos",
												"nativeSrc": "5254:3:35",
												"nodeType": "YulIdentifier",
												"src": "5254:3:35"
											}
										]
									},
									{
										"nativeSrc": "5285:29:35",
										"nodeType": "YulVariableDeclaration",
										"src": "5285:29:35",
										"value": {
											"arguments": [
												{
													"name": "value6",
													"nativeSrc": "5303:6:35",
													"nodeType": "YulIdentifier",
													"src": "5303:6:35"
												},
												{
													"kind": "number",
													"nativeSrc": "5311:2:35",
													"nodeType": "YulLiteral",
													"src": "5311:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5299:3:35",
												"nodeType": "YulIdentifier",
												"src": "5299:3:35"
											},
											"nativeSrc": "5299:15:35",
											"nodeType": "YulFunctionCall",
											"src": "5299:15:35"
										},
										"variables": [
											{
												"name": "srcPtr",
												"nativeSrc": "5289:6:35",
												"nodeType": "YulTypedName",
												"src": "5289:6:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "5323:10:35",
										"nodeType": "YulVariableDeclaration",
										"src": "5323:10:35",
										"value": {
											"kind": "number",
											"nativeSrc": "5332:1:35",
											"nodeType": "YulLiteral",
											"src": "5332:1:35",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "i",
												"nativeSrc": "5327:1:35",
												"nodeType": "YulTypedName",
												"src": "5327:1:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "5391:120:35",
											"nodeType": "YulBlock",
											"src": "5391:120:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "5412:3:35",
																"nodeType": "YulIdentifier",
																"src": "5412:3:35"
															},
															{
																"arguments": [
																	{
																		"name": "srcPtr",
																		"nativeSrc": "5423:6:35",
																		"nodeType": "YulIdentifier",
																		"src": "5423:6:35"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5417:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "5417:5:35"
																},
																"nativeSrc": "5417:13:35",
																"nodeType": "YulFunctionCall",
																"src": "5417:13:35"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "5405:6:35",
															"nodeType": "YulIdentifier",
															"src": "5405:6:35"
														},
														"nativeSrc": "5405:26:35",
														"nodeType": "YulFunctionCall",
														"src": "5405:26:35"
													},
													"nativeSrc": "5405:26:35",
													"nodeType": "YulExpressionStatement",
													"src": "5405:26:35"
												},
												{
													"nativeSrc": "5444:19:35",
													"nodeType": "YulAssignment",
													"src": "5444:19:35",
													"value": {
														"arguments": [
															{
																"name": "pos",
																"nativeSrc": "5455:3:35",
																"nodeType": "YulIdentifier",
																"src": "5455:3:35"
															},
															{
																"name": "_1",
																"nativeSrc": "5460:2:35",
																"nodeType": "YulIdentifier",
																"src": "5460:2:35"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5451:3:35",
															"nodeType": "YulIdentifier",
															"src": "5451:3:35"
														},
														"nativeSrc": "5451:12:35",
														"nodeType": "YulFunctionCall",
														"src": "5451:12:35"
													},
													"variableNames": [
														{
															"name": "pos",
															"nativeSrc": "5444:3:35",
															"nodeType": "YulIdentifier",
															"src": "5444:3:35"
														}
													]
												},
												{
													"nativeSrc": "5476:25:35",
													"nodeType": "YulAssignment",
													"src": "5476:25:35",
													"value": {
														"arguments": [
															{
																"name": "srcPtr",
																"nativeSrc": "5490:6:35",
																"nodeType": "YulIdentifier",
																"src": "5490:6:35"
															},
															{
																"name": "_1",
																"nativeSrc": "5498:2:35",
																"nodeType": "YulIdentifier",
																"src": "5498:2:35"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5486:3:35",
															"nodeType": "YulIdentifier",
															"src": "5486:3:35"
														},
														"nativeSrc": "5486:15:35",
														"nodeType": "YulFunctionCall",
														"src": "5486:15:35"
													},
													"variableNames": [
														{
															"name": "srcPtr",
															"nativeSrc": "5476:6:35",
															"nodeType": "YulIdentifier",
															"src": "5476:6:35"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "i",
													"nativeSrc": "5353:1:35",
													"nodeType": "YulIdentifier",
													"src": "5353:1:35"
												},
												{
													"name": "length",
													"nativeSrc": "5356:6:35",
													"nodeType": "YulIdentifier",
													"src": "5356:6:35"
												}
											],
											"functionName": {
												"name": "lt",
												"nativeSrc": "5350:2:35",
												"nodeType": "YulIdentifier",
												"src": "5350:2:35"
											},
											"nativeSrc": "5350:13:35",
											"nodeType": "YulFunctionCall",
											"src": "5350:13:35"
										},
										"nativeSrc": "5342:169:35",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "5364:18:35",
											"nodeType": "YulBlock",
											"src": "5364:18:35",
											"statements": [
												{
													"nativeSrc": "5366:14:35",
													"nodeType": "YulAssignment",
													"src": "5366:14:35",
													"value": {
														"arguments": [
															{
																"name": "i",
																"nativeSrc": "5375:1:35",
																"nodeType": "YulIdentifier",
																"src": "5375:1:35"
															},
															{
																"kind": "number",
																"nativeSrc": "5378:1:35",
																"nodeType": "YulLiteral",
																"src": "5378:1:35",
																"type": "",
																"value": "1"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "5371:3:35",
															"nodeType": "YulIdentifier",
															"src": "5371:3:35"
														},
														"nativeSrc": "5371:9:35",
														"nodeType": "YulFunctionCall",
														"src": "5371:9:35"
													},
													"variableNames": [
														{
															"name": "i",
															"nativeSrc": "5366:1:35",
															"nodeType": "YulIdentifier",
															"src": "5366:1:35"
														}
													]
												}
											]
										},
										"pre": {
											"nativeSrc": "5346:3:35",
											"nodeType": "YulBlock",
											"src": "5346:3:35",
											"statements": []
										},
										"src": "5342:169:35"
									},
									{
										"nativeSrc": "5520:11:35",
										"nodeType": "YulAssignment",
										"src": "5520:11:35",
										"value": {
											"name": "pos",
											"nativeSrc": "5528:3:35",
											"nodeType": "YulIdentifier",
											"src": "5528:3:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5520:4:35",
												"nodeType": "YulIdentifier",
												"src": "5520:4:35"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
							"nativeSrc": "4278:1259:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "4556:9:35",
									"nodeType": "YulTypedName",
									"src": "4556:9:35",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "4567:6:35",
									"nodeType": "YulTypedName",
									"src": "4567:6:35",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "4575:6:35",
									"nodeType": "YulTypedName",
									"src": "4575:6:35",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "4583:6:35",
									"nodeType": "YulTypedName",
									"src": "4583:6:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "4591:6:35",
									"nodeType": "YulTypedName",
									"src": "4591:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "4599:6:35",
									"nodeType": "YulTypedName",
									"src": "4599:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "4607:6:35",
									"nodeType": "YulTypedName",
									"src": "4607:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "4615:6:35",
									"nodeType": "YulTypedName",
									"src": "4615:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "4626:4:35",
									"nodeType": "YulTypedName",
									"src": "4626:4:35",
									"type": ""
								}
							],
							"src": "4278:1259:35"
						},
						{
							"body": {
								"nativeSrc": "5612:110:35",
								"nodeType": "YulBlock",
								"src": "5612:110:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "5658:16:35",
											"nodeType": "YulBlock",
											"src": "5658:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "5667:1:35",
																"nodeType": "YulLiteral",
																"src": "5667:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "5670:1:35",
																"nodeType": "YulLiteral",
																"src": "5670:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "5660:6:35",
															"nodeType": "YulIdentifier",
															"src": "5660:6:35"
														},
														"nativeSrc": "5660:12:35",
														"nodeType": "YulFunctionCall",
														"src": "5660:12:35"
													},
													"nativeSrc": "5660:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "5660:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "5633:7:35",
															"nodeType": "YulIdentifier",
															"src": "5633:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "5642:9:35",
															"nodeType": "YulIdentifier",
															"src": "5642:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "5629:3:35",
														"nodeType": "YulIdentifier",
														"src": "5629:3:35"
													},
													"nativeSrc": "5629:23:35",
													"nodeType": "YulFunctionCall",
													"src": "5629:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "5654:2:35",
													"nodeType": "YulLiteral",
													"src": "5654:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "5625:3:35",
												"nodeType": "YulIdentifier",
												"src": "5625:3:35"
											},
											"nativeSrc": "5625:32:35",
											"nodeType": "YulFunctionCall",
											"src": "5625:32:35"
										},
										"nativeSrc": "5622:52:35",
										"nodeType": "YulIf",
										"src": "5622:52:35"
									},
									{
										"nativeSrc": "5683:33:35",
										"nodeType": "YulAssignment",
										"src": "5683:33:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5706:9:35",
													"nodeType": "YulIdentifier",
													"src": "5706:9:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "5693:12:35",
												"nodeType": "YulIdentifier",
												"src": "5693:12:35"
											},
											"nativeSrc": "5693:23:35",
											"nodeType": "YulFunctionCall",
											"src": "5693:23:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "5683:6:35",
												"nodeType": "YulIdentifier",
												"src": "5683:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_uint256",
							"nativeSrc": "5542:180:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5578:9:35",
									"nodeType": "YulTypedName",
									"src": "5578:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "5589:7:35",
									"nodeType": "YulTypedName",
									"src": "5589:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "5601:6:35",
									"nodeType": "YulTypedName",
									"src": "5601:6:35",
									"type": ""
								}
							],
							"src": "5542:180:35"
						},
						{
							"body": {
								"nativeSrc": "5826:97:35",
								"nodeType": "YulBlock",
								"src": "5826:97:35",
								"statements": [
									{
										"nativeSrc": "5836:26:35",
										"nodeType": "YulAssignment",
										"src": "5836:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5848:9:35",
													"nodeType": "YulIdentifier",
													"src": "5848:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "5859:2:35",
													"nodeType": "YulLiteral",
													"src": "5859:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "5844:3:35",
												"nodeType": "YulIdentifier",
												"src": "5844:3:35"
											},
											"nativeSrc": "5844:18:35",
											"nodeType": "YulFunctionCall",
											"src": "5844:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "5836:4:35",
												"nodeType": "YulIdentifier",
												"src": "5836:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "5878:9:35",
													"nodeType": "YulIdentifier",
													"src": "5878:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "5893:6:35",
															"nodeType": "YulIdentifier",
															"src": "5893:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "5901:14:35",
															"nodeType": "YulLiteral",
															"src": "5901:14:35",
															"type": "",
															"value": "0xffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "5889:3:35",
														"nodeType": "YulIdentifier",
														"src": "5889:3:35"
													},
													"nativeSrc": "5889:27:35",
													"nodeType": "YulFunctionCall",
													"src": "5889:27:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "5871:6:35",
												"nodeType": "YulIdentifier",
												"src": "5871:6:35"
											},
											"nativeSrc": "5871:46:35",
											"nodeType": "YulFunctionCall",
											"src": "5871:46:35"
										},
										"nativeSrc": "5871:46:35",
										"nodeType": "YulExpressionStatement",
										"src": "5871:46:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed",
							"nativeSrc": "5727:196:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "5795:9:35",
									"nodeType": "YulTypedName",
									"src": "5795:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "5806:6:35",
									"nodeType": "YulTypedName",
									"src": "5806:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "5817:4:35",
									"nodeType": "YulTypedName",
									"src": "5817:4:35",
									"type": ""
								}
							],
							"src": "5727:196:35"
						},
						{
							"body": {
								"nativeSrc": "5975:109:35",
								"nodeType": "YulBlock",
								"src": "5975:109:35",
								"statements": [
									{
										"nativeSrc": "5985:29:35",
										"nodeType": "YulAssignment",
										"src": "5985:29:35",
										"value": {
											"arguments": [
												{
													"name": "offset",
													"nativeSrc": "6007:6:35",
													"nodeType": "YulIdentifier",
													"src": "6007:6:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "5994:12:35",
												"nodeType": "YulIdentifier",
												"src": "5994:12:35"
											},
											"nativeSrc": "5994:20:35",
											"nodeType": "YulFunctionCall",
											"src": "5994:20:35"
										},
										"variableNames": [
											{
												"name": "value",
												"nativeSrc": "5985:5:35",
												"nodeType": "YulIdentifier",
												"src": "5985:5:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "6062:16:35",
											"nodeType": "YulBlock",
											"src": "6062:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6071:1:35",
																"nodeType": "YulLiteral",
																"src": "6071:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "6074:1:35",
																"nodeType": "YulLiteral",
																"src": "6074:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "6064:6:35",
															"nodeType": "YulIdentifier",
															"src": "6064:6:35"
														},
														"nativeSrc": "6064:12:35",
														"nodeType": "YulFunctionCall",
														"src": "6064:12:35"
													},
													"nativeSrc": "6064:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "6064:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "6036:5:35",
															"nodeType": "YulIdentifier",
															"src": "6036:5:35"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "6047:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "6047:5:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "6054:4:35",
																	"nodeType": "YulLiteral",
																	"src": "6054:4:35",
																	"type": "",
																	"value": "0xff"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "6043:3:35",
																"nodeType": "YulIdentifier",
																"src": "6043:3:35"
															},
															"nativeSrc": "6043:16:35",
															"nodeType": "YulFunctionCall",
															"src": "6043:16:35"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "6033:2:35",
														"nodeType": "YulIdentifier",
														"src": "6033:2:35"
													},
													"nativeSrc": "6033:27:35",
													"nodeType": "YulFunctionCall",
													"src": "6033:27:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "6026:6:35",
												"nodeType": "YulIdentifier",
												"src": "6026:6:35"
											},
											"nativeSrc": "6026:35:35",
											"nodeType": "YulFunctionCall",
											"src": "6026:35:35"
										},
										"nativeSrc": "6023:55:35",
										"nodeType": "YulIf",
										"src": "6023:55:35"
									}
								]
							},
							"name": "abi_decode_uint8",
							"nativeSrc": "5928:156:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "offset",
									"nativeSrc": "5954:6:35",
									"nodeType": "YulTypedName",
									"src": "5954:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value",
									"nativeSrc": "5965:5:35",
									"nodeType": "YulTypedName",
									"src": "5965:5:35",
									"type": ""
								}
							],
							"src": "5928:156:35"
						},
						{
							"body": {
								"nativeSrc": "6242:378:35",
								"nodeType": "YulBlock",
								"src": "6242:378:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "6289:16:35",
											"nodeType": "YulBlock",
											"src": "6289:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6298:1:35",
																"nodeType": "YulLiteral",
																"src": "6298:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "6301:1:35",
																"nodeType": "YulLiteral",
																"src": "6301:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "6291:6:35",
															"nodeType": "YulIdentifier",
															"src": "6291:6:35"
														},
														"nativeSrc": "6291:12:35",
														"nodeType": "YulFunctionCall",
														"src": "6291:12:35"
													},
													"nativeSrc": "6291:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "6291:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "6263:7:35",
															"nodeType": "YulIdentifier",
															"src": "6263:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "6272:9:35",
															"nodeType": "YulIdentifier",
															"src": "6272:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "6259:3:35",
														"nodeType": "YulIdentifier",
														"src": "6259:3:35"
													},
													"nativeSrc": "6259:23:35",
													"nodeType": "YulFunctionCall",
													"src": "6259:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "6284:3:35",
													"nodeType": "YulLiteral",
													"src": "6284:3:35",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "6255:3:35",
												"nodeType": "YulIdentifier",
												"src": "6255:3:35"
											},
											"nativeSrc": "6255:33:35",
											"nodeType": "YulFunctionCall",
											"src": "6255:33:35"
										},
										"nativeSrc": "6252:53:35",
										"nodeType": "YulIf",
										"src": "6252:53:35"
									},
									{
										"nativeSrc": "6314:39:35",
										"nodeType": "YulAssignment",
										"src": "6314:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6343:9:35",
													"nodeType": "YulIdentifier",
													"src": "6343:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "6324:18:35",
												"nodeType": "YulIdentifier",
												"src": "6324:18:35"
											},
											"nativeSrc": "6324:29:35",
											"nodeType": "YulFunctionCall",
											"src": "6324:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "6314:6:35",
												"nodeType": "YulIdentifier",
												"src": "6314:6:35"
											}
										]
									},
									{
										"nativeSrc": "6362:42:35",
										"nodeType": "YulAssignment",
										"src": "6362:42:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6389:9:35",
															"nodeType": "YulIdentifier",
															"src": "6389:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "6400:2:35",
															"nodeType": "YulLiteral",
															"src": "6400:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6385:3:35",
														"nodeType": "YulIdentifier",
														"src": "6385:3:35"
													},
													"nativeSrc": "6385:18:35",
													"nodeType": "YulFunctionCall",
													"src": "6385:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6372:12:35",
												"nodeType": "YulIdentifier",
												"src": "6372:12:35"
											},
											"nativeSrc": "6372:32:35",
											"nodeType": "YulFunctionCall",
											"src": "6372:32:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "6362:6:35",
												"nodeType": "YulIdentifier",
												"src": "6362:6:35"
											}
										]
									},
									{
										"nativeSrc": "6413:42:35",
										"nodeType": "YulAssignment",
										"src": "6413:42:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6440:9:35",
															"nodeType": "YulIdentifier",
															"src": "6440:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "6451:2:35",
															"nodeType": "YulLiteral",
															"src": "6451:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6436:3:35",
														"nodeType": "YulIdentifier",
														"src": "6436:3:35"
													},
													"nativeSrc": "6436:18:35",
													"nodeType": "YulFunctionCall",
													"src": "6436:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6423:12:35",
												"nodeType": "YulIdentifier",
												"src": "6423:12:35"
											},
											"nativeSrc": "6423:32:35",
											"nodeType": "YulFunctionCall",
											"src": "6423:32:35"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "6413:6:35",
												"nodeType": "YulIdentifier",
												"src": "6413:6:35"
											}
										]
									},
									{
										"nativeSrc": "6464:46:35",
										"nodeType": "YulAssignment",
										"src": "6464:46:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6495:9:35",
															"nodeType": "YulIdentifier",
															"src": "6495:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "6506:2:35",
															"nodeType": "YulLiteral",
															"src": "6506:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6491:3:35",
														"nodeType": "YulIdentifier",
														"src": "6491:3:35"
													},
													"nativeSrc": "6491:18:35",
													"nodeType": "YulFunctionCall",
													"src": "6491:18:35"
												}
											],
											"functionName": {
												"name": "abi_decode_uint8",
												"nativeSrc": "6474:16:35",
												"nodeType": "YulIdentifier",
												"src": "6474:16:35"
											},
											"nativeSrc": "6474:36:35",
											"nodeType": "YulFunctionCall",
											"src": "6474:36:35"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "6464:6:35",
												"nodeType": "YulIdentifier",
												"src": "6464:6:35"
											}
										]
									},
									{
										"nativeSrc": "6519:43:35",
										"nodeType": "YulAssignment",
										"src": "6519:43:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6546:9:35",
															"nodeType": "YulIdentifier",
															"src": "6546:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "6557:3:35",
															"nodeType": "YulLiteral",
															"src": "6557:3:35",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6542:3:35",
														"nodeType": "YulIdentifier",
														"src": "6542:3:35"
													},
													"nativeSrc": "6542:19:35",
													"nodeType": "YulFunctionCall",
													"src": "6542:19:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6529:12:35",
												"nodeType": "YulIdentifier",
												"src": "6529:12:35"
											},
											"nativeSrc": "6529:33:35",
											"nodeType": "YulFunctionCall",
											"src": "6529:33:35"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "6519:6:35",
												"nodeType": "YulIdentifier",
												"src": "6519:6:35"
											}
										]
									},
									{
										"nativeSrc": "6571:43:35",
										"nodeType": "YulAssignment",
										"src": "6571:43:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6598:9:35",
															"nodeType": "YulIdentifier",
															"src": "6598:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "6609:3:35",
															"nodeType": "YulLiteral",
															"src": "6609:3:35",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6594:3:35",
														"nodeType": "YulIdentifier",
														"src": "6594:3:35"
													},
													"nativeSrc": "6594:19:35",
													"nodeType": "YulFunctionCall",
													"src": "6594:19:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6581:12:35",
												"nodeType": "YulIdentifier",
												"src": "6581:12:35"
											},
											"nativeSrc": "6581:33:35",
											"nodeType": "YulFunctionCall",
											"src": "6581:33:35"
										},
										"variableNames": [
											{
												"name": "value5",
												"nativeSrc": "6571:6:35",
												"nodeType": "YulIdentifier",
												"src": "6571:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "6089:531:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6168:9:35",
									"nodeType": "YulTypedName",
									"src": "6168:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "6179:7:35",
									"nodeType": "YulTypedName",
									"src": "6179:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "6191:6:35",
									"nodeType": "YulTypedName",
									"src": "6191:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6199:6:35",
									"nodeType": "YulTypedName",
									"src": "6199:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6207:6:35",
									"nodeType": "YulTypedName",
									"src": "6207:6:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "6215:6:35",
									"nodeType": "YulTypedName",
									"src": "6215:6:35",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "6223:6:35",
									"nodeType": "YulTypedName",
									"src": "6223:6:35",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "6231:6:35",
									"nodeType": "YulTypedName",
									"src": "6231:6:35",
									"type": ""
								}
							],
							"src": "6089:531:35"
						},
						{
							"body": {
								"nativeSrc": "6795:436:35",
								"nodeType": "YulBlock",
								"src": "6795:436:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "6842:16:35",
											"nodeType": "YulBlock",
											"src": "6842:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "6851:1:35",
																"nodeType": "YulLiteral",
																"src": "6851:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "6854:1:35",
																"nodeType": "YulLiteral",
																"src": "6854:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "6844:6:35",
															"nodeType": "YulIdentifier",
															"src": "6844:6:35"
														},
														"nativeSrc": "6844:12:35",
														"nodeType": "YulFunctionCall",
														"src": "6844:12:35"
													},
													"nativeSrc": "6844:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "6844:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "6816:7:35",
															"nodeType": "YulIdentifier",
															"src": "6816:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "6825:9:35",
															"nodeType": "YulIdentifier",
															"src": "6825:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "6812:3:35",
														"nodeType": "YulIdentifier",
														"src": "6812:3:35"
													},
													"nativeSrc": "6812:23:35",
													"nodeType": "YulFunctionCall",
													"src": "6812:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "6837:3:35",
													"nodeType": "YulLiteral",
													"src": "6837:3:35",
													"type": "",
													"value": "224"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "6808:3:35",
												"nodeType": "YulIdentifier",
												"src": "6808:3:35"
											},
											"nativeSrc": "6808:33:35",
											"nodeType": "YulFunctionCall",
											"src": "6808:33:35"
										},
										"nativeSrc": "6805:53:35",
										"nodeType": "YulIf",
										"src": "6805:53:35"
									},
									{
										"nativeSrc": "6867:39:35",
										"nodeType": "YulAssignment",
										"src": "6867:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "6896:9:35",
													"nodeType": "YulIdentifier",
													"src": "6896:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "6877:18:35",
												"nodeType": "YulIdentifier",
												"src": "6877:18:35"
											},
											"nativeSrc": "6877:29:35",
											"nodeType": "YulFunctionCall",
											"src": "6877:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "6867:6:35",
												"nodeType": "YulIdentifier",
												"src": "6867:6:35"
											}
										]
									},
									{
										"nativeSrc": "6915:48:35",
										"nodeType": "YulAssignment",
										"src": "6915:48:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6948:9:35",
															"nodeType": "YulIdentifier",
															"src": "6948:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "6959:2:35",
															"nodeType": "YulLiteral",
															"src": "6959:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6944:3:35",
														"nodeType": "YulIdentifier",
														"src": "6944:3:35"
													},
													"nativeSrc": "6944:18:35",
													"nodeType": "YulFunctionCall",
													"src": "6944:18:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "6925:18:35",
												"nodeType": "YulIdentifier",
												"src": "6925:18:35"
											},
											"nativeSrc": "6925:38:35",
											"nodeType": "YulFunctionCall",
											"src": "6925:38:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "6915:6:35",
												"nodeType": "YulIdentifier",
												"src": "6915:6:35"
											}
										]
									},
									{
										"nativeSrc": "6972:42:35",
										"nodeType": "YulAssignment",
										"src": "6972:42:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "6999:9:35",
															"nodeType": "YulIdentifier",
															"src": "6999:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7010:2:35",
															"nodeType": "YulLiteral",
															"src": "7010:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "6995:3:35",
														"nodeType": "YulIdentifier",
														"src": "6995:3:35"
													},
													"nativeSrc": "6995:18:35",
													"nodeType": "YulFunctionCall",
													"src": "6995:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "6982:12:35",
												"nodeType": "YulIdentifier",
												"src": "6982:12:35"
											},
											"nativeSrc": "6982:32:35",
											"nodeType": "YulFunctionCall",
											"src": "6982:32:35"
										},
										"variableNames": [
											{
												"name": "value2",
												"nativeSrc": "6972:6:35",
												"nodeType": "YulIdentifier",
												"src": "6972:6:35"
											}
										]
									},
									{
										"nativeSrc": "7023:42:35",
										"nodeType": "YulAssignment",
										"src": "7023:42:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7050:9:35",
															"nodeType": "YulIdentifier",
															"src": "7050:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7061:2:35",
															"nodeType": "YulLiteral",
															"src": "7061:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7046:3:35",
														"nodeType": "YulIdentifier",
														"src": "7046:3:35"
													},
													"nativeSrc": "7046:18:35",
													"nodeType": "YulFunctionCall",
													"src": "7046:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7033:12:35",
												"nodeType": "YulIdentifier",
												"src": "7033:12:35"
											},
											"nativeSrc": "7033:32:35",
											"nodeType": "YulFunctionCall",
											"src": "7033:32:35"
										},
										"variableNames": [
											{
												"name": "value3",
												"nativeSrc": "7023:6:35",
												"nodeType": "YulIdentifier",
												"src": "7023:6:35"
											}
										]
									},
									{
										"nativeSrc": "7074:47:35",
										"nodeType": "YulAssignment",
										"src": "7074:47:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7105:9:35",
															"nodeType": "YulIdentifier",
															"src": "7105:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7116:3:35",
															"nodeType": "YulLiteral",
															"src": "7116:3:35",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7101:3:35",
														"nodeType": "YulIdentifier",
														"src": "7101:3:35"
													},
													"nativeSrc": "7101:19:35",
													"nodeType": "YulFunctionCall",
													"src": "7101:19:35"
												}
											],
											"functionName": {
												"name": "abi_decode_uint8",
												"nativeSrc": "7084:16:35",
												"nodeType": "YulIdentifier",
												"src": "7084:16:35"
											},
											"nativeSrc": "7084:37:35",
											"nodeType": "YulFunctionCall",
											"src": "7084:37:35"
										},
										"variableNames": [
											{
												"name": "value4",
												"nativeSrc": "7074:6:35",
												"nodeType": "YulIdentifier",
												"src": "7074:6:35"
											}
										]
									},
									{
										"nativeSrc": "7130:43:35",
										"nodeType": "YulAssignment",
										"src": "7130:43:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7157:9:35",
															"nodeType": "YulIdentifier",
															"src": "7157:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7168:3:35",
															"nodeType": "YulLiteral",
															"src": "7168:3:35",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7153:3:35",
														"nodeType": "YulIdentifier",
														"src": "7153:3:35"
													},
													"nativeSrc": "7153:19:35",
													"nodeType": "YulFunctionCall",
													"src": "7153:19:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7140:12:35",
												"nodeType": "YulIdentifier",
												"src": "7140:12:35"
											},
											"nativeSrc": "7140:33:35",
											"nodeType": "YulFunctionCall",
											"src": "7140:33:35"
										},
										"variableNames": [
											{
												"name": "value5",
												"nativeSrc": "7130:6:35",
												"nodeType": "YulIdentifier",
												"src": "7130:6:35"
											}
										]
									},
									{
										"nativeSrc": "7182:43:35",
										"nodeType": "YulAssignment",
										"src": "7182:43:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7209:9:35",
															"nodeType": "YulIdentifier",
															"src": "7209:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7220:3:35",
															"nodeType": "YulLiteral",
															"src": "7220:3:35",
															"type": "",
															"value": "192"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7205:3:35",
														"nodeType": "YulIdentifier",
														"src": "7205:3:35"
													},
													"nativeSrc": "7205:19:35",
													"nodeType": "YulFunctionCall",
													"src": "7205:19:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7192:12:35",
												"nodeType": "YulIdentifier",
												"src": "7192:12:35"
											},
											"nativeSrc": "7192:33:35",
											"nodeType": "YulFunctionCall",
											"src": "7192:33:35"
										},
										"variableNames": [
											{
												"name": "value6",
												"nativeSrc": "7182:6:35",
												"nodeType": "YulIdentifier",
												"src": "7182:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
							"nativeSrc": "6625:606:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "6713:9:35",
									"nodeType": "YulTypedName",
									"src": "6713:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "6724:7:35",
									"nodeType": "YulTypedName",
									"src": "6724:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "6736:6:35",
									"nodeType": "YulTypedName",
									"src": "6736:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "6744:6:35",
									"nodeType": "YulTypedName",
									"src": "6744:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "6752:6:35",
									"nodeType": "YulTypedName",
									"src": "6752:6:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "6760:6:35",
									"nodeType": "YulTypedName",
									"src": "6760:6:35",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "6768:6:35",
									"nodeType": "YulTypedName",
									"src": "6768:6:35",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "6776:6:35",
									"nodeType": "YulTypedName",
									"src": "6776:6:35",
									"type": ""
								},
								{
									"name": "value6",
									"nativeSrc": "6784:6:35",
									"nodeType": "YulTypedName",
									"src": "6784:6:35",
									"type": ""
								}
							],
							"src": "6625:606:35"
						},
						{
							"body": {
								"nativeSrc": "7322:264:35",
								"nodeType": "YulBlock",
								"src": "7322:264:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "7368:16:35",
											"nodeType": "YulBlock",
											"src": "7368:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7377:1:35",
																"nodeType": "YulLiteral",
																"src": "7377:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7380:1:35",
																"nodeType": "YulLiteral",
																"src": "7380:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7370:6:35",
															"nodeType": "YulIdentifier",
															"src": "7370:6:35"
														},
														"nativeSrc": "7370:12:35",
														"nodeType": "YulFunctionCall",
														"src": "7370:12:35"
													},
													"nativeSrc": "7370:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "7370:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "7343:7:35",
															"nodeType": "YulIdentifier",
															"src": "7343:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "7352:9:35",
															"nodeType": "YulIdentifier",
															"src": "7352:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "7339:3:35",
														"nodeType": "YulIdentifier",
														"src": "7339:3:35"
													},
													"nativeSrc": "7339:23:35",
													"nodeType": "YulFunctionCall",
													"src": "7339:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "7364:2:35",
													"nodeType": "YulLiteral",
													"src": "7364:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "7335:3:35",
												"nodeType": "YulIdentifier",
												"src": "7335:3:35"
											},
											"nativeSrc": "7335:32:35",
											"nodeType": "YulFunctionCall",
											"src": "7335:32:35"
										},
										"nativeSrc": "7332:52:35",
										"nodeType": "YulIf",
										"src": "7332:52:35"
									},
									{
										"nativeSrc": "7393:39:35",
										"nodeType": "YulAssignment",
										"src": "7393:39:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7422:9:35",
													"nodeType": "YulIdentifier",
													"src": "7422:9:35"
												}
											],
											"functionName": {
												"name": "abi_decode_address",
												"nativeSrc": "7403:18:35",
												"nodeType": "YulIdentifier",
												"src": "7403:18:35"
											},
											"nativeSrc": "7403:29:35",
											"nodeType": "YulFunctionCall",
											"src": "7403:29:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "7393:6:35",
												"nodeType": "YulIdentifier",
												"src": "7393:6:35"
											}
										]
									},
									{
										"nativeSrc": "7441:45:35",
										"nodeType": "YulVariableDeclaration",
										"src": "7441:45:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7471:9:35",
															"nodeType": "YulIdentifier",
															"src": "7471:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7482:2:35",
															"nodeType": "YulLiteral",
															"src": "7482:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7467:3:35",
														"nodeType": "YulIdentifier",
														"src": "7467:3:35"
													},
													"nativeSrc": "7467:18:35",
													"nodeType": "YulFunctionCall",
													"src": "7467:18:35"
												}
											],
											"functionName": {
												"name": "calldataload",
												"nativeSrc": "7454:12:35",
												"nodeType": "YulIdentifier",
												"src": "7454:12:35"
											},
											"nativeSrc": "7454:32:35",
											"nodeType": "YulFunctionCall",
											"src": "7454:32:35"
										},
										"variables": [
											{
												"name": "value",
												"nativeSrc": "7445:5:35",
												"nodeType": "YulTypedName",
												"src": "7445:5:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "7540:16:35",
											"nodeType": "YulBlock",
											"src": "7540:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "7549:1:35",
																"nodeType": "YulLiteral",
																"src": "7549:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "7552:1:35",
																"nodeType": "YulLiteral",
																"src": "7552:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "7542:6:35",
															"nodeType": "YulIdentifier",
															"src": "7542:6:35"
														},
														"nativeSrc": "7542:12:35",
														"nodeType": "YulFunctionCall",
														"src": "7542:12:35"
													},
													"nativeSrc": "7542:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "7542:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value",
															"nativeSrc": "7508:5:35",
															"nodeType": "YulIdentifier",
															"src": "7508:5:35"
														},
														{
															"arguments": [
																{
																	"name": "value",
																	"nativeSrc": "7519:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "7519:5:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7526:10:35",
																	"nodeType": "YulLiteral",
																	"src": "7526:10:35",
																	"type": "",
																	"value": "0xffffffff"
																}
															],
															"functionName": {
																"name": "and",
																"nativeSrc": "7515:3:35",
																"nodeType": "YulIdentifier",
																"src": "7515:3:35"
															},
															"nativeSrc": "7515:22:35",
															"nodeType": "YulFunctionCall",
															"src": "7515:22:35"
														}
													],
													"functionName": {
														"name": "eq",
														"nativeSrc": "7505:2:35",
														"nodeType": "YulIdentifier",
														"src": "7505:2:35"
													},
													"nativeSrc": "7505:33:35",
													"nodeType": "YulFunctionCall",
													"src": "7505:33:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "7498:6:35",
												"nodeType": "YulIdentifier",
												"src": "7498:6:35"
											},
											"nativeSrc": "7498:41:35",
											"nodeType": "YulFunctionCall",
											"src": "7498:41:35"
										},
										"nativeSrc": "7495:61:35",
										"nodeType": "YulIf",
										"src": "7495:61:35"
									},
									{
										"nativeSrc": "7565:15:35",
										"nodeType": "YulAssignment",
										"src": "7565:15:35",
										"value": {
											"name": "value",
											"nativeSrc": "7575:5:35",
											"nodeType": "YulIdentifier",
											"src": "7575:5:35"
										},
										"variableNames": [
											{
												"name": "value1",
												"nativeSrc": "7565:6:35",
												"nodeType": "YulIdentifier",
												"src": "7565:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_addresst_uint32",
							"nativeSrc": "7236:350:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7280:9:35",
									"nodeType": "YulTypedName",
									"src": "7280:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "7291:7:35",
									"nodeType": "YulTypedName",
									"src": "7291:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "7303:6:35",
									"nodeType": "YulTypedName",
									"src": "7303:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "7311:6:35",
									"nodeType": "YulTypedName",
									"src": "7311:6:35",
									"type": ""
								}
							],
							"src": "7236:350:35"
						},
						{
							"body": {
								"nativeSrc": "7754:193:35",
								"nodeType": "YulBlock",
								"src": "7754:193:35",
								"statements": [
									{
										"nativeSrc": "7764:26:35",
										"nodeType": "YulAssignment",
										"src": "7764:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7776:9:35",
													"nodeType": "YulIdentifier",
													"src": "7776:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "7787:2:35",
													"nodeType": "YulLiteral",
													"src": "7787:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "7772:3:35",
												"nodeType": "YulIdentifier",
												"src": "7772:3:35"
											},
											"nativeSrc": "7772:18:35",
											"nodeType": "YulFunctionCall",
											"src": "7772:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "7764:4:35",
												"nodeType": "YulIdentifier",
												"src": "7764:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "7806:9:35",
													"nodeType": "YulIdentifier",
													"src": "7806:9:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "value0",
																	"nativeSrc": "7827:6:35",
																	"nodeType": "YulIdentifier",
																	"src": "7827:6:35"
																}
															],
															"functionName": {
																"name": "mload",
																"nativeSrc": "7821:5:35",
																"nodeType": "YulIdentifier",
																"src": "7821:5:35"
															},
															"nativeSrc": "7821:13:35",
															"nodeType": "YulFunctionCall",
															"src": "7821:13:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7836:14:35",
															"nodeType": "YulLiteral",
															"src": "7836:14:35",
															"type": "",
															"value": "0xffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7817:3:35",
														"nodeType": "YulIdentifier",
														"src": "7817:3:35"
													},
													"nativeSrc": "7817:34:35",
													"nodeType": "YulFunctionCall",
													"src": "7817:34:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7799:6:35",
												"nodeType": "YulIdentifier",
												"src": "7799:6:35"
											},
											"nativeSrc": "7799:53:35",
											"nodeType": "YulFunctionCall",
											"src": "7799:53:35"
										},
										"nativeSrc": "7799:53:35",
										"nodeType": "YulExpressionStatement",
										"src": "7799:53:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "7872:9:35",
															"nodeType": "YulIdentifier",
															"src": "7872:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "7883:4:35",
															"nodeType": "YulLiteral",
															"src": "7883:4:35",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "7868:3:35",
														"nodeType": "YulIdentifier",
														"src": "7868:3:35"
													},
													"nativeSrc": "7868:20:35",
													"nodeType": "YulFunctionCall",
													"src": "7868:20:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"name": "value0",
																			"nativeSrc": "7904:6:35",
																			"nodeType": "YulIdentifier",
																			"src": "7904:6:35"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "7912:4:35",
																			"nodeType": "YulLiteral",
																			"src": "7912:4:35",
																			"type": "",
																			"value": "0x20"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "7900:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "7900:3:35"
																	},
																	"nativeSrc": "7900:17:35",
																	"nodeType": "YulFunctionCall",
																	"src": "7900:17:35"
																}
															],
															"functionName": {
																"name": "mload",
																"nativeSrc": "7894:5:35",
																"nodeType": "YulIdentifier",
																"src": "7894:5:35"
															},
															"nativeSrc": "7894:24:35",
															"nodeType": "YulFunctionCall",
															"src": "7894:24:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "7928:3:35",
																			"nodeType": "YulLiteral",
																			"src": "7928:3:35",
																			"type": "",
																			"value": "208"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "7933:1:35",
																			"nodeType": "YulLiteral",
																			"src": "7933:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "7924:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "7924:3:35"
																	},
																	"nativeSrc": "7924:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "7924:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "7937:1:35",
																	"nodeType": "YulLiteral",
																	"src": "7937:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "7920:3:35",
																"nodeType": "YulIdentifier",
																"src": "7920:3:35"
															},
															"nativeSrc": "7920:19:35",
															"nodeType": "YulFunctionCall",
															"src": "7920:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "7890:3:35",
														"nodeType": "YulIdentifier",
														"src": "7890:3:35"
													},
													"nativeSrc": "7890:50:35",
													"nodeType": "YulFunctionCall",
													"src": "7890:50:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "7861:6:35",
												"nodeType": "YulIdentifier",
												"src": "7861:6:35"
											},
											"nativeSrc": "7861:80:35",
											"nodeType": "YulFunctionCall",
											"src": "7861:80:35"
										},
										"nativeSrc": "7861:80:35",
										"nodeType": "YulExpressionStatement",
										"src": "7861:80:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_struct$_Checkpoint208_$9593_memory_ptr__to_t_struct$_Checkpoint208_$9593_memory_ptr__fromStack_reversed",
							"nativeSrc": "7591:356:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "7723:9:35",
									"nodeType": "YulTypedName",
									"src": "7723:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "7734:6:35",
									"nodeType": "YulTypedName",
									"src": "7734:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "7745:4:35",
									"nodeType": "YulTypedName",
									"src": "7745:4:35",
									"type": ""
								}
							],
							"src": "7591:356:35"
						},
						{
							"body": {
								"nativeSrc": "8007:325:35",
								"nodeType": "YulBlock",
								"src": "8007:325:35",
								"statements": [
									{
										"nativeSrc": "8017:22:35",
										"nodeType": "YulAssignment",
										"src": "8017:22:35",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8031:1:35",
													"nodeType": "YulLiteral",
													"src": "8031:1:35",
													"type": "",
													"value": "1"
												},
												{
													"name": "data",
													"nativeSrc": "8034:4:35",
													"nodeType": "YulIdentifier",
													"src": "8034:4:35"
												}
											],
											"functionName": {
												"name": "shr",
												"nativeSrc": "8027:3:35",
												"nodeType": "YulIdentifier",
												"src": "8027:3:35"
											},
											"nativeSrc": "8027:12:35",
											"nodeType": "YulFunctionCall",
											"src": "8027:12:35"
										},
										"variableNames": [
											{
												"name": "length",
												"nativeSrc": "8017:6:35",
												"nodeType": "YulIdentifier",
												"src": "8017:6:35"
											}
										]
									},
									{
										"nativeSrc": "8048:38:35",
										"nodeType": "YulVariableDeclaration",
										"src": "8048:38:35",
										"value": {
											"arguments": [
												{
													"name": "data",
													"nativeSrc": "8078:4:35",
													"nodeType": "YulIdentifier",
													"src": "8078:4:35"
												},
												{
													"kind": "number",
													"nativeSrc": "8084:1:35",
													"nodeType": "YulLiteral",
													"src": "8084:1:35",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "and",
												"nativeSrc": "8074:3:35",
												"nodeType": "YulIdentifier",
												"src": "8074:3:35"
											},
											"nativeSrc": "8074:12:35",
											"nodeType": "YulFunctionCall",
											"src": "8074:12:35"
										},
										"variables": [
											{
												"name": "outOfPlaceEncoding",
												"nativeSrc": "8052:18:35",
												"nodeType": "YulTypedName",
												"src": "8052:18:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8125:31:35",
											"nodeType": "YulBlock",
											"src": "8125:31:35",
											"statements": [
												{
													"nativeSrc": "8127:27:35",
													"nodeType": "YulAssignment",
													"src": "8127:27:35",
													"value": {
														"arguments": [
															{
																"name": "length",
																"nativeSrc": "8141:6:35",
																"nodeType": "YulIdentifier",
																"src": "8141:6:35"
															},
															{
																"kind": "number",
																"nativeSrc": "8149:4:35",
																"nodeType": "YulLiteral",
																"src": "8149:4:35",
																"type": "",
																"value": "0x7f"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "8137:3:35",
															"nodeType": "YulIdentifier",
															"src": "8137:3:35"
														},
														"nativeSrc": "8137:17:35",
														"nodeType": "YulFunctionCall",
														"src": "8137:17:35"
													},
													"variableNames": [
														{
															"name": "length",
															"nativeSrc": "8127:6:35",
															"nodeType": "YulIdentifier",
															"src": "8127:6:35"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "8105:18:35",
													"nodeType": "YulIdentifier",
													"src": "8105:18:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "8098:6:35",
												"nodeType": "YulIdentifier",
												"src": "8098:6:35"
											},
											"nativeSrc": "8098:26:35",
											"nodeType": "YulFunctionCall",
											"src": "8098:26:35"
										},
										"nativeSrc": "8095:61:35",
										"nodeType": "YulIf",
										"src": "8095:61:35"
									},
									{
										"body": {
											"nativeSrc": "8215:111:35",
											"nodeType": "YulBlock",
											"src": "8215:111:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "8236:1:35",
																"nodeType": "YulLiteral",
																"src": "8236:1:35",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8243:3:35",
																		"nodeType": "YulLiteral",
																		"src": "8243:3:35",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8248:10:35",
																		"nodeType": "YulLiteral",
																		"src": "8248:10:35",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "8239:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "8239:3:35"
																},
																"nativeSrc": "8239:20:35",
																"nodeType": "YulFunctionCall",
																"src": "8239:20:35"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "8229:6:35",
															"nodeType": "YulIdentifier",
															"src": "8229:6:35"
														},
														"nativeSrc": "8229:31:35",
														"nodeType": "YulFunctionCall",
														"src": "8229:31:35"
													},
													"nativeSrc": "8229:31:35",
													"nodeType": "YulExpressionStatement",
													"src": "8229:31:35"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "8280:1:35",
																"nodeType": "YulLiteral",
																"src": "8280:1:35",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "8283:4:35",
																"nodeType": "YulLiteral",
																"src": "8283:4:35",
																"type": "",
																"value": "0x22"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "8273:6:35",
															"nodeType": "YulIdentifier",
															"src": "8273:6:35"
														},
														"nativeSrc": "8273:15:35",
														"nodeType": "YulFunctionCall",
														"src": "8273:15:35"
													},
													"nativeSrc": "8273:15:35",
													"nodeType": "YulExpressionStatement",
													"src": "8273:15:35"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "8308:1:35",
																"nodeType": "YulLiteral",
																"src": "8308:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "8311:4:35",
																"nodeType": "YulLiteral",
																"src": "8311:4:35",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "8301:6:35",
															"nodeType": "YulIdentifier",
															"src": "8301:6:35"
														},
														"nativeSrc": "8301:15:35",
														"nodeType": "YulFunctionCall",
														"src": "8301:15:35"
													},
													"nativeSrc": "8301:15:35",
													"nodeType": "YulExpressionStatement",
													"src": "8301:15:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "outOfPlaceEncoding",
													"nativeSrc": "8171:18:35",
													"nodeType": "YulIdentifier",
													"src": "8171:18:35"
												},
												{
													"arguments": [
														{
															"name": "length",
															"nativeSrc": "8194:6:35",
															"nodeType": "YulIdentifier",
															"src": "8194:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "8202:2:35",
															"nodeType": "YulLiteral",
															"src": "8202:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "lt",
														"nativeSrc": "8191:2:35",
														"nodeType": "YulIdentifier",
														"src": "8191:2:35"
													},
													"nativeSrc": "8191:14:35",
													"nodeType": "YulFunctionCall",
													"src": "8191:14:35"
												}
											],
											"functionName": {
												"name": "eq",
												"nativeSrc": "8168:2:35",
												"nodeType": "YulIdentifier",
												"src": "8168:2:35"
											},
											"nativeSrc": "8168:38:35",
											"nodeType": "YulFunctionCall",
											"src": "8168:38:35"
										},
										"nativeSrc": "8165:161:35",
										"nodeType": "YulIf",
										"src": "8165:161:35"
									}
								]
							},
							"name": "extract_byte_array_length",
							"nativeSrc": "7952:380:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "7987:4:35",
									"nodeType": "YulTypedName",
									"src": "7987:4:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "length",
									"nativeSrc": "7996:6:35",
									"nodeType": "YulTypedName",
									"src": "7996:6:35",
									"type": ""
								}
							],
							"src": "7952:380:35"
						},
						{
							"body": {
								"nativeSrc": "8369:95:35",
								"nodeType": "YulBlock",
								"src": "8369:95:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8386:1:35",
													"nodeType": "YulLiteral",
													"src": "8386:1:35",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "8393:3:35",
															"nodeType": "YulLiteral",
															"src": "8393:3:35",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "8398:10:35",
															"nodeType": "YulLiteral",
															"src": "8398:10:35",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "8389:3:35",
														"nodeType": "YulIdentifier",
														"src": "8389:3:35"
													},
													"nativeSrc": "8389:20:35",
													"nodeType": "YulFunctionCall",
													"src": "8389:20:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8379:6:35",
												"nodeType": "YulIdentifier",
												"src": "8379:6:35"
											},
											"nativeSrc": "8379:31:35",
											"nodeType": "YulFunctionCall",
											"src": "8379:31:35"
										},
										"nativeSrc": "8379:31:35",
										"nodeType": "YulExpressionStatement",
										"src": "8379:31:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8426:1:35",
													"nodeType": "YulLiteral",
													"src": "8426:1:35",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "8429:4:35",
													"nodeType": "YulLiteral",
													"src": "8429:4:35",
													"type": "",
													"value": "0x11"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "8419:6:35",
												"nodeType": "YulIdentifier",
												"src": "8419:6:35"
											},
											"nativeSrc": "8419:15:35",
											"nodeType": "YulFunctionCall",
											"src": "8419:15:35"
										},
										"nativeSrc": "8419:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "8419:15:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "8450:1:35",
													"nodeType": "YulLiteral",
													"src": "8450:1:35",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "8453:4:35",
													"nodeType": "YulLiteral",
													"src": "8453:4:35",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "8443:6:35",
												"nodeType": "YulIdentifier",
												"src": "8443:6:35"
											},
											"nativeSrc": "8443:15:35",
											"nodeType": "YulFunctionCall",
											"src": "8443:15:35"
										},
										"nativeSrc": "8443:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "8443:15:35"
									}
								]
							},
							"name": "panic_error_0x11",
							"nativeSrc": "8337:127:35",
							"nodeType": "YulFunctionDefinition",
							"src": "8337:127:35"
						},
						{
							"body": {
								"nativeSrc": "8533:352:35",
								"nodeType": "YulBlock",
								"src": "8533:352:35",
								"statements": [
									{
										"nativeSrc": "8543:16:35",
										"nodeType": "YulVariableDeclaration",
										"src": "8543:16:35",
										"value": {
											"kind": "number",
											"nativeSrc": "8558:1:35",
											"nodeType": "YulLiteral",
											"src": "8558:1:35",
											"type": "",
											"value": "1"
										},
										"variables": [
											{
												"name": "power_1",
												"nativeSrc": "8547:7:35",
												"nodeType": "YulTypedName",
												"src": "8547:7:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "8568:10:35",
										"nodeType": "YulAssignment",
										"src": "8568:10:35",
										"value": {
											"kind": "number",
											"nativeSrc": "8577:1:35",
											"nodeType": "YulLiteral",
											"src": "8577:1:35",
											"type": "",
											"value": "1"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "8568:5:35",
												"nodeType": "YulIdentifier",
												"src": "8568:5:35"
											}
										]
									},
									{
										"nativeSrc": "8587:13:35",
										"nodeType": "YulAssignment",
										"src": "8587:13:35",
										"value": {
											"name": "_base",
											"nativeSrc": "8595:5:35",
											"nodeType": "YulIdentifier",
											"src": "8595:5:35"
										},
										"variableNames": [
											{
												"name": "base",
												"nativeSrc": "8587:4:35",
												"nodeType": "YulIdentifier",
												"src": "8587:4:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "8651:228:35",
											"nodeType": "YulBlock",
											"src": "8651:228:35",
											"statements": [
												{
													"body": {
														"nativeSrc": "8696:22:35",
														"nodeType": "YulBlock",
														"src": "8696:22:35",
														"statements": [
															{
																"expression": {
																	"arguments": [],
																	"functionName": {
																		"name": "panic_error_0x11",
																		"nativeSrc": "8698:16:35",
																		"nodeType": "YulIdentifier",
																		"src": "8698:16:35"
																	},
																	"nativeSrc": "8698:18:35",
																	"nodeType": "YulFunctionCall",
																	"src": "8698:18:35"
																},
																"nativeSrc": "8698:18:35",
																"nodeType": "YulExpressionStatement",
																"src": "8698:18:35"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "8671:4:35",
																"nodeType": "YulIdentifier",
																"src": "8671:4:35"
															},
															{
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8685:1:35",
																				"nodeType": "YulLiteral",
																				"src": "8685:1:35",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "8681:3:35",
																			"nodeType": "YulIdentifier",
																			"src": "8681:3:35"
																		},
																		"nativeSrc": "8681:6:35",
																		"nodeType": "YulFunctionCall",
																		"src": "8681:6:35"
																	},
																	{
																		"name": "base",
																		"nativeSrc": "8689:4:35",
																		"nodeType": "YulIdentifier",
																		"src": "8689:4:35"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nativeSrc": "8677:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "8677:3:35"
																},
																"nativeSrc": "8677:17:35",
																"nodeType": "YulFunctionCall",
																"src": "8677:17:35"
															}
														],
														"functionName": {
															"name": "gt",
															"nativeSrc": "8668:2:35",
															"nodeType": "YulIdentifier",
															"src": "8668:2:35"
														},
														"nativeSrc": "8668:27:35",
														"nodeType": "YulFunctionCall",
														"src": "8668:27:35"
													},
													"nativeSrc": "8665:53:35",
													"nodeType": "YulIf",
													"src": "8665:53:35"
												},
												{
													"body": {
														"nativeSrc": "8757:29:35",
														"nodeType": "YulBlock",
														"src": "8757:29:35",
														"statements": [
															{
																"nativeSrc": "8759:25:35",
																"nodeType": "YulAssignment",
																"src": "8759:25:35",
																"value": {
																	"arguments": [
																		{
																			"name": "power",
																			"nativeSrc": "8772:5:35",
																			"nodeType": "YulIdentifier",
																			"src": "8772:5:35"
																		},
																		{
																			"name": "base",
																			"nativeSrc": "8779:4:35",
																			"nodeType": "YulIdentifier",
																			"src": "8779:4:35"
																		}
																	],
																	"functionName": {
																		"name": "mul",
																		"nativeSrc": "8768:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "8768:3:35"
																	},
																	"nativeSrc": "8768:16:35",
																	"nodeType": "YulFunctionCall",
																	"src": "8768:16:35"
																},
																"variableNames": [
																	{
																		"name": "power",
																		"nativeSrc": "8759:5:35",
																		"nodeType": "YulIdentifier",
																		"src": "8759:5:35"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "exponent",
																"nativeSrc": "8738:8:35",
																"nodeType": "YulIdentifier",
																"src": "8738:8:35"
															},
															{
																"name": "power_1",
																"nativeSrc": "8748:7:35",
																"nodeType": "YulIdentifier",
																"src": "8748:7:35"
															}
														],
														"functionName": {
															"name": "and",
															"nativeSrc": "8734:3:35",
															"nodeType": "YulIdentifier",
															"src": "8734:3:35"
														},
														"nativeSrc": "8734:22:35",
														"nodeType": "YulFunctionCall",
														"src": "8734:22:35"
													},
													"nativeSrc": "8731:55:35",
													"nodeType": "YulIf",
													"src": "8731:55:35"
												},
												{
													"nativeSrc": "8799:23:35",
													"nodeType": "YulAssignment",
													"src": "8799:23:35",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "8811:4:35",
																"nodeType": "YulIdentifier",
																"src": "8811:4:35"
															},
															{
																"name": "base",
																"nativeSrc": "8817:4:35",
																"nodeType": "YulIdentifier",
																"src": "8817:4:35"
															}
														],
														"functionName": {
															"name": "mul",
															"nativeSrc": "8807:3:35",
															"nodeType": "YulIdentifier",
															"src": "8807:3:35"
														},
														"nativeSrc": "8807:15:35",
														"nodeType": "YulFunctionCall",
														"src": "8807:15:35"
													},
													"variableNames": [
														{
															"name": "base",
															"nativeSrc": "8799:4:35",
															"nodeType": "YulIdentifier",
															"src": "8799:4:35"
														}
													]
												},
												{
													"nativeSrc": "8835:34:35",
													"nodeType": "YulAssignment",
													"src": "8835:34:35",
													"value": {
														"arguments": [
															{
																"name": "power_1",
																"nativeSrc": "8851:7:35",
																"nodeType": "YulIdentifier",
																"src": "8851:7:35"
															},
															{
																"name": "exponent",
																"nativeSrc": "8860:8:35",
																"nodeType": "YulIdentifier",
																"src": "8860:8:35"
															}
														],
														"functionName": {
															"name": "shr",
															"nativeSrc": "8847:3:35",
															"nodeType": "YulIdentifier",
															"src": "8847:3:35"
														},
														"nativeSrc": "8847:22:35",
														"nodeType": "YulFunctionCall",
														"src": "8847:22:35"
													},
													"variableNames": [
														{
															"name": "exponent",
															"nativeSrc": "8835:8:35",
															"nodeType": "YulIdentifier",
															"src": "8835:8:35"
														}
													]
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "8620:8:35",
													"nodeType": "YulIdentifier",
													"src": "8620:8:35"
												},
												{
													"name": "power_1",
													"nativeSrc": "8630:7:35",
													"nodeType": "YulIdentifier",
													"src": "8630:7:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "8617:2:35",
												"nodeType": "YulIdentifier",
												"src": "8617:2:35"
											},
											"nativeSrc": "8617:21:35",
											"nodeType": "YulFunctionCall",
											"src": "8617:21:35"
										},
										"nativeSrc": "8609:270:35",
										"nodeType": "YulForLoop",
										"post": {
											"nativeSrc": "8639:3:35",
											"nodeType": "YulBlock",
											"src": "8639:3:35",
											"statements": []
										},
										"pre": {
											"nativeSrc": "8613:3:35",
											"nodeType": "YulBlock",
											"src": "8613:3:35",
											"statements": []
										},
										"src": "8609:270:35"
									}
								]
							},
							"name": "checked_exp_helper",
							"nativeSrc": "8469:416:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "_base",
									"nativeSrc": "8497:5:35",
									"nodeType": "YulTypedName",
									"src": "8497:5:35",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "8504:8:35",
									"nodeType": "YulTypedName",
									"src": "8504:8:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "8517:5:35",
									"nodeType": "YulTypedName",
									"src": "8517:5:35",
									"type": ""
								},
								{
									"name": "base",
									"nativeSrc": "8524:4:35",
									"nodeType": "YulTypedName",
									"src": "8524:4:35",
									"type": ""
								}
							],
							"src": "8469:416:35"
						},
						{
							"body": {
								"nativeSrc": "8949:747:35",
								"nodeType": "YulBlock",
								"src": "8949:747:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "8987:52:35",
											"nodeType": "YulBlock",
											"src": "8987:52:35",
											"statements": [
												{
													"nativeSrc": "9001:10:35",
													"nodeType": "YulAssignment",
													"src": "9001:10:35",
													"value": {
														"kind": "number",
														"nativeSrc": "9010:1:35",
														"nodeType": "YulLiteral",
														"src": "9010:1:35",
														"type": "",
														"value": "1"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "9001:5:35",
															"nodeType": "YulIdentifier",
															"src": "9001:5:35"
														}
													]
												},
												{
													"nativeSrc": "9024:5:35",
													"nodeType": "YulLeave",
													"src": "9024:5:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "exponent",
													"nativeSrc": "8969:8:35",
													"nodeType": "YulIdentifier",
													"src": "8969:8:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "8962:6:35",
												"nodeType": "YulIdentifier",
												"src": "8962:6:35"
											},
											"nativeSrc": "8962:16:35",
											"nodeType": "YulFunctionCall",
											"src": "8962:16:35"
										},
										"nativeSrc": "8959:80:35",
										"nodeType": "YulIf",
										"src": "8959:80:35"
									},
									{
										"body": {
											"nativeSrc": "9072:52:35",
											"nodeType": "YulBlock",
											"src": "9072:52:35",
											"statements": [
												{
													"nativeSrc": "9086:10:35",
													"nodeType": "YulAssignment",
													"src": "9086:10:35",
													"value": {
														"kind": "number",
														"nativeSrc": "9095:1:35",
														"nodeType": "YulLiteral",
														"src": "9095:1:35",
														"type": "",
														"value": "0"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "9086:5:35",
															"nodeType": "YulIdentifier",
															"src": "9086:5:35"
														}
													]
												},
												{
													"nativeSrc": "9109:5:35",
													"nodeType": "YulLeave",
													"src": "9109:5:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "9058:4:35",
													"nodeType": "YulIdentifier",
													"src": "9058:4:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9051:6:35",
												"nodeType": "YulIdentifier",
												"src": "9051:6:35"
											},
											"nativeSrc": "9051:12:35",
											"nodeType": "YulFunctionCall",
											"src": "9051:12:35"
										},
										"nativeSrc": "9048:76:35",
										"nodeType": "YulIf",
										"src": "9048:76:35"
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "9160:52:35",
													"nodeType": "YulBlock",
													"src": "9160:52:35",
													"statements": [
														{
															"nativeSrc": "9174:10:35",
															"nodeType": "YulAssignment",
															"src": "9174:10:35",
															"value": {
																"kind": "number",
																"nativeSrc": "9183:1:35",
																"nodeType": "YulLiteral",
																"src": "9183:1:35",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "9174:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "9174:5:35"
																}
															]
														},
														{
															"nativeSrc": "9197:5:35",
															"nodeType": "YulLeave",
															"src": "9197:5:35"
														}
													]
												},
												"nativeSrc": "9153:59:35",
												"nodeType": "YulCase",
												"src": "9153:59:35",
												"value": {
													"kind": "number",
													"nativeSrc": "9158:1:35",
													"nodeType": "YulLiteral",
													"src": "9158:1:35",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "9228:123:35",
													"nodeType": "YulBlock",
													"src": "9228:123:35",
													"statements": [
														{
															"body": {
																"nativeSrc": "9263:22:35",
																"nodeType": "YulBlock",
																"src": "9263:22:35",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "9265:16:35",
																				"nodeType": "YulIdentifier",
																				"src": "9265:16:35"
																			},
																			"nativeSrc": "9265:18:35",
																			"nodeType": "YulFunctionCall",
																			"src": "9265:18:35"
																		},
																		"nativeSrc": "9265:18:35",
																		"nodeType": "YulExpressionStatement",
																		"src": "9265:18:35"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "9248:8:35",
																		"nodeType": "YulIdentifier",
																		"src": "9248:8:35"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9258:3:35",
																		"nodeType": "YulLiteral",
																		"src": "9258:3:35",
																		"type": "",
																		"value": "255"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "9245:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "9245:2:35"
																},
																"nativeSrc": "9245:17:35",
																"nodeType": "YulFunctionCall",
																"src": "9245:17:35"
															},
															"nativeSrc": "9242:43:35",
															"nodeType": "YulIf",
															"src": "9242:43:35"
														},
														{
															"nativeSrc": "9298:25:35",
															"nodeType": "YulAssignment",
															"src": "9298:25:35",
															"value": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "9311:8:35",
																		"nodeType": "YulIdentifier",
																		"src": "9311:8:35"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9321:1:35",
																		"nodeType": "YulLiteral",
																		"src": "9321:1:35",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "9307:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "9307:3:35"
																},
																"nativeSrc": "9307:16:35",
																"nodeType": "YulFunctionCall",
																"src": "9307:16:35"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "9298:5:35",
																	"nodeType": "YulIdentifier",
																	"src": "9298:5:35"
																}
															]
														},
														{
															"nativeSrc": "9336:5:35",
															"nodeType": "YulLeave",
															"src": "9336:5:35"
														}
													]
												},
												"nativeSrc": "9221:130:35",
												"nodeType": "YulCase",
												"src": "9221:130:35",
												"value": {
													"kind": "number",
													"nativeSrc": "9226:1:35",
													"nodeType": "YulLiteral",
													"src": "9226:1:35",
													"type": "",
													"value": "2"
												}
											}
										],
										"expression": {
											"name": "base",
											"nativeSrc": "9140:4:35",
											"nodeType": "YulIdentifier",
											"src": "9140:4:35"
										},
										"nativeSrc": "9133:218:35",
										"nodeType": "YulSwitch",
										"src": "9133:218:35"
									},
									{
										"body": {
											"nativeSrc": "9449:70:35",
											"nodeType": "YulBlock",
											"src": "9449:70:35",
											"statements": [
												{
													"nativeSrc": "9463:28:35",
													"nodeType": "YulAssignment",
													"src": "9463:28:35",
													"value": {
														"arguments": [
															{
																"name": "base",
																"nativeSrc": "9476:4:35",
																"nodeType": "YulIdentifier",
																"src": "9476:4:35"
															},
															{
																"name": "exponent",
																"nativeSrc": "9482:8:35",
																"nodeType": "YulIdentifier",
																"src": "9482:8:35"
															}
														],
														"functionName": {
															"name": "exp",
															"nativeSrc": "9472:3:35",
															"nodeType": "YulIdentifier",
															"src": "9472:3:35"
														},
														"nativeSrc": "9472:19:35",
														"nodeType": "YulFunctionCall",
														"src": "9472:19:35"
													},
													"variableNames": [
														{
															"name": "power",
															"nativeSrc": "9463:5:35",
															"nodeType": "YulIdentifier",
															"src": "9463:5:35"
														}
													]
												},
												{
													"nativeSrc": "9504:5:35",
													"nodeType": "YulLeave",
													"src": "9504:5:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "9373:4:35",
																	"nodeType": "YulIdentifier",
																	"src": "9373:4:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9379:2:35",
																	"nodeType": "YulLiteral",
																	"src": "9379:2:35",
																	"type": "",
																	"value": "11"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9370:2:35",
																"nodeType": "YulIdentifier",
																"src": "9370:2:35"
															},
															"nativeSrc": "9370:12:35",
															"nodeType": "YulFunctionCall",
															"src": "9370:12:35"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "9387:8:35",
																	"nodeType": "YulIdentifier",
																	"src": "9387:8:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9397:2:35",
																	"nodeType": "YulLiteral",
																	"src": "9397:2:35",
																	"type": "",
																	"value": "78"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9384:2:35",
																"nodeType": "YulIdentifier",
																"src": "9384:2:35"
															},
															"nativeSrc": "9384:16:35",
															"nodeType": "YulFunctionCall",
															"src": "9384:16:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9366:3:35",
														"nodeType": "YulIdentifier",
														"src": "9366:3:35"
													},
													"nativeSrc": "9366:35:35",
													"nodeType": "YulFunctionCall",
													"src": "9366:35:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "base",
																	"nativeSrc": "9410:4:35",
																	"nodeType": "YulIdentifier",
																	"src": "9410:4:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9416:3:35",
																	"nodeType": "YulLiteral",
																	"src": "9416:3:35",
																	"type": "",
																	"value": "307"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9407:2:35",
																"nodeType": "YulIdentifier",
																"src": "9407:2:35"
															},
															"nativeSrc": "9407:13:35",
															"nodeType": "YulFunctionCall",
															"src": "9407:13:35"
														},
														{
															"arguments": [
																{
																	"name": "exponent",
																	"nativeSrc": "9425:8:35",
																	"nodeType": "YulIdentifier",
																	"src": "9425:8:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "9435:2:35",
																	"nodeType": "YulLiteral",
																	"src": "9435:2:35",
																	"type": "",
																	"value": "32"
																}
															],
															"functionName": {
																"name": "lt",
																"nativeSrc": "9422:2:35",
																"nodeType": "YulIdentifier",
																"src": "9422:2:35"
															},
															"nativeSrc": "9422:16:35",
															"nodeType": "YulFunctionCall",
															"src": "9422:16:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9403:3:35",
														"nodeType": "YulIdentifier",
														"src": "9403:3:35"
													},
													"nativeSrc": "9403:36:35",
													"nodeType": "YulFunctionCall",
													"src": "9403:36:35"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "9363:2:35",
												"nodeType": "YulIdentifier",
												"src": "9363:2:35"
											},
											"nativeSrc": "9363:77:35",
											"nodeType": "YulFunctionCall",
											"src": "9363:77:35"
										},
										"nativeSrc": "9360:159:35",
										"nodeType": "YulIf",
										"src": "9360:159:35"
									},
									{
										"nativeSrc": "9528:57:35",
										"nodeType": "YulVariableDeclaration",
										"src": "9528:57:35",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "9570:4:35",
													"nodeType": "YulIdentifier",
													"src": "9570:4:35"
												},
												{
													"name": "exponent",
													"nativeSrc": "9576:8:35",
													"nodeType": "YulIdentifier",
													"src": "9576:8:35"
												}
											],
											"functionName": {
												"name": "checked_exp_helper",
												"nativeSrc": "9551:18:35",
												"nodeType": "YulIdentifier",
												"src": "9551:18:35"
											},
											"nativeSrc": "9551:34:35",
											"nodeType": "YulFunctionCall",
											"src": "9551:34:35"
										},
										"variables": [
											{
												"name": "power_1",
												"nativeSrc": "9532:7:35",
												"nodeType": "YulTypedName",
												"src": "9532:7:35",
												"type": ""
											},
											{
												"name": "base_1",
												"nativeSrc": "9541:6:35",
												"nodeType": "YulTypedName",
												"src": "9541:6:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "9630:22:35",
											"nodeType": "YulBlock",
											"src": "9630:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "9632:16:35",
															"nodeType": "YulIdentifier",
															"src": "9632:16:35"
														},
														"nativeSrc": "9632:18:35",
														"nodeType": "YulFunctionCall",
														"src": "9632:18:35"
													},
													"nativeSrc": "9632:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "9632:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "power_1",
													"nativeSrc": "9600:7:35",
													"nodeType": "YulIdentifier",
													"src": "9600:7:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"kind": "number",
																	"nativeSrc": "9617:1:35",
																	"nodeType": "YulLiteral",
																	"src": "9617:1:35",
																	"type": "",
																	"value": "0"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "9613:3:35",
																"nodeType": "YulIdentifier",
																"src": "9613:3:35"
															},
															"nativeSrc": "9613:6:35",
															"nodeType": "YulFunctionCall",
															"src": "9613:6:35"
														},
														{
															"name": "base_1",
															"nativeSrc": "9621:6:35",
															"nodeType": "YulIdentifier",
															"src": "9621:6:35"
														}
													],
													"functionName": {
														"name": "div",
														"nativeSrc": "9609:3:35",
														"nodeType": "YulIdentifier",
														"src": "9609:3:35"
													},
													"nativeSrc": "9609:19:35",
													"nodeType": "YulFunctionCall",
													"src": "9609:19:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "9597:2:35",
												"nodeType": "YulIdentifier",
												"src": "9597:2:35"
											},
											"nativeSrc": "9597:32:35",
											"nodeType": "YulFunctionCall",
											"src": "9597:32:35"
										},
										"nativeSrc": "9594:58:35",
										"nodeType": "YulIf",
										"src": "9594:58:35"
									},
									{
										"nativeSrc": "9661:29:35",
										"nodeType": "YulAssignment",
										"src": "9661:29:35",
										"value": {
											"arguments": [
												{
													"name": "power_1",
													"nativeSrc": "9674:7:35",
													"nodeType": "YulIdentifier",
													"src": "9674:7:35"
												},
												{
													"name": "base_1",
													"nativeSrc": "9683:6:35",
													"nodeType": "YulIdentifier",
													"src": "9683:6:35"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "9670:3:35",
												"nodeType": "YulIdentifier",
												"src": "9670:3:35"
											},
											"nativeSrc": "9670:20:35",
											"nodeType": "YulFunctionCall",
											"src": "9670:20:35"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "9661:5:35",
												"nodeType": "YulIdentifier",
												"src": "9661:5:35"
											}
										]
									}
								]
							},
							"name": "checked_exp_unsigned",
							"nativeSrc": "8890:806:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "8920:4:35",
									"nodeType": "YulTypedName",
									"src": "8920:4:35",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "8926:8:35",
									"nodeType": "YulTypedName",
									"src": "8926:8:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "8939:5:35",
									"nodeType": "YulTypedName",
									"src": "8939:5:35",
									"type": ""
								}
							],
							"src": "8890:806:35"
						},
						{
							"body": {
								"nativeSrc": "9769:72:35",
								"nodeType": "YulBlock",
								"src": "9769:72:35",
								"statements": [
									{
										"nativeSrc": "9779:56:35",
										"nodeType": "YulAssignment",
										"src": "9779:56:35",
										"value": {
											"arguments": [
												{
													"name": "base",
													"nativeSrc": "9809:4:35",
													"nodeType": "YulIdentifier",
													"src": "9809:4:35"
												},
												{
													"arguments": [
														{
															"name": "exponent",
															"nativeSrc": "9819:8:35",
															"nodeType": "YulIdentifier",
															"src": "9819:8:35"
														},
														{
															"kind": "number",
															"nativeSrc": "9829:4:35",
															"nodeType": "YulLiteral",
															"src": "9829:4:35",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "9815:3:35",
														"nodeType": "YulIdentifier",
														"src": "9815:3:35"
													},
													"nativeSrc": "9815:19:35",
													"nodeType": "YulFunctionCall",
													"src": "9815:19:35"
												}
											],
											"functionName": {
												"name": "checked_exp_unsigned",
												"nativeSrc": "9788:20:35",
												"nodeType": "YulIdentifier",
												"src": "9788:20:35"
											},
											"nativeSrc": "9788:47:35",
											"nodeType": "YulFunctionCall",
											"src": "9788:47:35"
										},
										"variableNames": [
											{
												"name": "power",
												"nativeSrc": "9779:5:35",
												"nodeType": "YulIdentifier",
												"src": "9779:5:35"
											}
										]
									}
								]
							},
							"name": "checked_exp_t_uint256_t_uint8",
							"nativeSrc": "9701:140:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "base",
									"nativeSrc": "9740:4:35",
									"nodeType": "YulTypedName",
									"src": "9740:4:35",
									"type": ""
								},
								{
									"name": "exponent",
									"nativeSrc": "9746:8:35",
									"nodeType": "YulTypedName",
									"src": "9746:8:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "power",
									"nativeSrc": "9759:5:35",
									"nodeType": "YulTypedName",
									"src": "9759:5:35",
									"type": ""
								}
							],
							"src": "9701:140:35"
						},
						{
							"body": {
								"nativeSrc": "9898:116:35",
								"nodeType": "YulBlock",
								"src": "9898:116:35",
								"statements": [
									{
										"nativeSrc": "9908:20:35",
										"nodeType": "YulAssignment",
										"src": "9908:20:35",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "9923:1:35",
													"nodeType": "YulIdentifier",
													"src": "9923:1:35"
												},
												{
													"name": "y",
													"nativeSrc": "9926:1:35",
													"nodeType": "YulIdentifier",
													"src": "9926:1:35"
												}
											],
											"functionName": {
												"name": "mul",
												"nativeSrc": "9919:3:35",
												"nodeType": "YulIdentifier",
												"src": "9919:3:35"
											},
											"nativeSrc": "9919:9:35",
											"nodeType": "YulFunctionCall",
											"src": "9919:9:35"
										},
										"variableNames": [
											{
												"name": "product",
												"nativeSrc": "9908:7:35",
												"nodeType": "YulIdentifier",
												"src": "9908:7:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "9986:22:35",
											"nodeType": "YulBlock",
											"src": "9986:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "9988:16:35",
															"nodeType": "YulIdentifier",
															"src": "9988:16:35"
														},
														"nativeSrc": "9988:18:35",
														"nodeType": "YulFunctionCall",
														"src": "9988:18:35"
													},
													"nativeSrc": "9988:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "9988:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "x",
																	"nativeSrc": "9957:1:35",
																	"nodeType": "YulIdentifier",
																	"src": "9957:1:35"
																}
															],
															"functionName": {
																"name": "iszero",
																"nativeSrc": "9950:6:35",
																"nodeType": "YulIdentifier",
																"src": "9950:6:35"
															},
															"nativeSrc": "9950:9:35",
															"nodeType": "YulFunctionCall",
															"src": "9950:9:35"
														},
														{
															"arguments": [
																{
																	"name": "y",
																	"nativeSrc": "9964:1:35",
																	"nodeType": "YulIdentifier",
																	"src": "9964:1:35"
																},
																{
																	"arguments": [
																		{
																			"name": "product",
																			"nativeSrc": "9971:7:35",
																			"nodeType": "YulIdentifier",
																			"src": "9971:7:35"
																		},
																		{
																			"name": "x",
																			"nativeSrc": "9980:1:35",
																			"nodeType": "YulIdentifier",
																			"src": "9980:1:35"
																		}
																	],
																	"functionName": {
																		"name": "div",
																		"nativeSrc": "9967:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "9967:3:35"
																	},
																	"nativeSrc": "9967:15:35",
																	"nodeType": "YulFunctionCall",
																	"src": "9967:15:35"
																}
															],
															"functionName": {
																"name": "eq",
																"nativeSrc": "9961:2:35",
																"nodeType": "YulIdentifier",
																"src": "9961:2:35"
															},
															"nativeSrc": "9961:22:35",
															"nodeType": "YulFunctionCall",
															"src": "9961:22:35"
														}
													],
													"functionName": {
														"name": "or",
														"nativeSrc": "9947:2:35",
														"nodeType": "YulIdentifier",
														"src": "9947:2:35"
													},
													"nativeSrc": "9947:37:35",
													"nodeType": "YulFunctionCall",
													"src": "9947:37:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "9940:6:35",
												"nodeType": "YulIdentifier",
												"src": "9940:6:35"
											},
											"nativeSrc": "9940:45:35",
											"nodeType": "YulFunctionCall",
											"src": "9940:45:35"
										},
										"nativeSrc": "9937:71:35",
										"nodeType": "YulIf",
										"src": "9937:71:35"
									}
								]
							},
							"name": "checked_mul_t_uint256",
							"nativeSrc": "9846:168:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "9877:1:35",
									"nodeType": "YulTypedName",
									"src": "9877:1:35",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "9880:1:35",
									"nodeType": "YulTypedName",
									"src": "9880:1:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "product",
									"nativeSrc": "9886:7:35",
									"nodeType": "YulTypedName",
									"src": "9886:7:35",
									"type": ""
								}
							],
							"src": "9846:168:35"
						},
						{
							"body": {
								"nativeSrc": "10127:101:35",
								"nodeType": "YulBlock",
								"src": "10127:101:35",
								"statements": [
									{
										"nativeSrc": "10137:26:35",
										"nodeType": "YulAssignment",
										"src": "10137:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10149:9:35",
													"nodeType": "YulIdentifier",
													"src": "10149:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "10160:2:35",
													"nodeType": "YulLiteral",
													"src": "10160:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10145:3:35",
												"nodeType": "YulIdentifier",
												"src": "10145:3:35"
											},
											"nativeSrc": "10145:18:35",
											"nodeType": "YulFunctionCall",
											"src": "10145:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10137:4:35",
												"nodeType": "YulIdentifier",
												"src": "10137:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10179:9:35",
													"nodeType": "YulIdentifier",
													"src": "10179:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "10194:6:35",
															"nodeType": "YulIdentifier",
															"src": "10194:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "10202:18:35",
															"nodeType": "YulLiteral",
															"src": "10202:18:35",
															"type": "",
															"value": "0xffffffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "10190:3:35",
														"nodeType": "YulIdentifier",
														"src": "10190:3:35"
													},
													"nativeSrc": "10190:31:35",
													"nodeType": "YulFunctionCall",
													"src": "10190:31:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10172:6:35",
												"nodeType": "YulIdentifier",
												"src": "10172:6:35"
											},
											"nativeSrc": "10172:50:35",
											"nodeType": "YulFunctionCall",
											"src": "10172:50:35"
										},
										"nativeSrc": "10172:50:35",
										"nodeType": "YulExpressionStatement",
										"src": "10172:50:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
							"nativeSrc": "10019:209:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10096:9:35",
									"nodeType": "YulTypedName",
									"src": "10096:9:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "10107:6:35",
									"nodeType": "YulTypedName",
									"src": "10107:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10118:4:35",
									"nodeType": "YulTypedName",
									"src": "10118:4:35",
									"type": ""
								}
							],
							"src": "10019:209:35"
						},
						{
							"body": {
								"nativeSrc": "10407:171:35",
								"nodeType": "YulBlock",
								"src": "10407:171:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10424:9:35",
													"nodeType": "YulIdentifier",
													"src": "10424:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "10435:2:35",
													"nodeType": "YulLiteral",
													"src": "10435:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10417:6:35",
												"nodeType": "YulIdentifier",
												"src": "10417:6:35"
											},
											"nativeSrc": "10417:21:35",
											"nodeType": "YulFunctionCall",
											"src": "10417:21:35"
										},
										"nativeSrc": "10417:21:35",
										"nodeType": "YulExpressionStatement",
										"src": "10417:21:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10458:9:35",
															"nodeType": "YulIdentifier",
															"src": "10458:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "10469:2:35",
															"nodeType": "YulLiteral",
															"src": "10469:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10454:3:35",
														"nodeType": "YulIdentifier",
														"src": "10454:3:35"
													},
													"nativeSrc": "10454:18:35",
													"nodeType": "YulFunctionCall",
													"src": "10454:18:35"
												},
												{
													"kind": "number",
													"nativeSrc": "10474:2:35",
													"nodeType": "YulLiteral",
													"src": "10474:2:35",
													"type": "",
													"value": "21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10447:6:35",
												"nodeType": "YulIdentifier",
												"src": "10447:6:35"
											},
											"nativeSrc": "10447:30:35",
											"nodeType": "YulFunctionCall",
											"src": "10447:30:35"
										},
										"nativeSrc": "10447:30:35",
										"nodeType": "YulExpressionStatement",
										"src": "10447:30:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10497:9:35",
															"nodeType": "YulIdentifier",
															"src": "10497:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "10508:2:35",
															"nodeType": "YulLiteral",
															"src": "10508:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10493:3:35",
														"nodeType": "YulIdentifier",
														"src": "10493:3:35"
													},
													"nativeSrc": "10493:18:35",
													"nodeType": "YulFunctionCall",
													"src": "10493:18:35"
												},
												{
													"hexValue": "4549503731323a20556e696e697469616c697a6564",
													"kind": "string",
													"nativeSrc": "10513:23:35",
													"nodeType": "YulLiteral",
													"src": "10513:23:35",
													"type": "",
													"value": "EIP712: Uninitialized"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10486:6:35",
												"nodeType": "YulIdentifier",
												"src": "10486:6:35"
											},
											"nativeSrc": "10486:51:35",
											"nodeType": "YulFunctionCall",
											"src": "10486:51:35"
										},
										"nativeSrc": "10486:51:35",
										"nodeType": "YulExpressionStatement",
										"src": "10486:51:35"
									},
									{
										"nativeSrc": "10546:26:35",
										"nodeType": "YulAssignment",
										"src": "10546:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10558:9:35",
													"nodeType": "YulIdentifier",
													"src": "10558:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "10569:2:35",
													"nodeType": "YulLiteral",
													"src": "10569:2:35",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10554:3:35",
												"nodeType": "YulIdentifier",
												"src": "10554:3:35"
											},
											"nativeSrc": "10554:18:35",
											"nodeType": "YulFunctionCall",
											"src": "10554:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10546:4:35",
												"nodeType": "YulIdentifier",
												"src": "10546:4:35"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed",
							"nativeSrc": "10233:345:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10384:9:35",
									"nodeType": "YulTypedName",
									"src": "10384:9:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10398:4:35",
									"nodeType": "YulTypedName",
									"src": "10398:4:35",
									"type": ""
								}
							],
							"src": "10233:345:35"
						},
						{
							"body": {
								"nativeSrc": "10768:232:35",
								"nodeType": "YulBlock",
								"src": "10768:232:35",
								"statements": [
									{
										"nativeSrc": "10778:27:35",
										"nodeType": "YulAssignment",
										"src": "10778:27:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10790:9:35",
													"nodeType": "YulIdentifier",
													"src": "10790:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "10801:3:35",
													"nodeType": "YulLiteral",
													"src": "10801:3:35",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "10786:3:35",
												"nodeType": "YulIdentifier",
												"src": "10786:3:35"
											},
											"nativeSrc": "10786:19:35",
											"nodeType": "YulFunctionCall",
											"src": "10786:19:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "10778:4:35",
												"nodeType": "YulIdentifier",
												"src": "10778:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "10821:9:35",
													"nodeType": "YulIdentifier",
													"src": "10821:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "10832:6:35",
													"nodeType": "YulIdentifier",
													"src": "10832:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10814:6:35",
												"nodeType": "YulIdentifier",
												"src": "10814:6:35"
											},
											"nativeSrc": "10814:25:35",
											"nodeType": "YulFunctionCall",
											"src": "10814:25:35"
										},
										"nativeSrc": "10814:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "10814:25:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10859:9:35",
															"nodeType": "YulIdentifier",
															"src": "10859:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "10870:2:35",
															"nodeType": "YulLiteral",
															"src": "10870:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10855:3:35",
														"nodeType": "YulIdentifier",
														"src": "10855:3:35"
													},
													"nativeSrc": "10855:18:35",
													"nodeType": "YulFunctionCall",
													"src": "10855:18:35"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "10879:6:35",
															"nodeType": "YulIdentifier",
															"src": "10879:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "10895:3:35",
																			"nodeType": "YulLiteral",
																			"src": "10895:3:35",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "10900:1:35",
																			"nodeType": "YulLiteral",
																			"src": "10900:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "10891:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "10891:3:35"
																	},
																	"nativeSrc": "10891:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "10891:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "10904:1:35",
																	"nodeType": "YulLiteral",
																	"src": "10904:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "10887:3:35",
																"nodeType": "YulIdentifier",
																"src": "10887:3:35"
															},
															"nativeSrc": "10887:19:35",
															"nodeType": "YulFunctionCall",
															"src": "10887:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "10875:3:35",
														"nodeType": "YulIdentifier",
														"src": "10875:3:35"
													},
													"nativeSrc": "10875:32:35",
													"nodeType": "YulFunctionCall",
													"src": "10875:32:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10848:6:35",
												"nodeType": "YulIdentifier",
												"src": "10848:6:35"
											},
											"nativeSrc": "10848:60:35",
											"nodeType": "YulFunctionCall",
											"src": "10848:60:35"
										},
										"nativeSrc": "10848:60:35",
										"nodeType": "YulExpressionStatement",
										"src": "10848:60:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10928:9:35",
															"nodeType": "YulIdentifier",
															"src": "10928:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "10939:2:35",
															"nodeType": "YulLiteral",
															"src": "10939:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10924:3:35",
														"nodeType": "YulIdentifier",
														"src": "10924:3:35"
													},
													"nativeSrc": "10924:18:35",
													"nodeType": "YulFunctionCall",
													"src": "10924:18:35"
												},
												{
													"name": "value2",
													"nativeSrc": "10944:6:35",
													"nodeType": "YulIdentifier",
													"src": "10944:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10917:6:35",
												"nodeType": "YulIdentifier",
												"src": "10917:6:35"
											},
											"nativeSrc": "10917:34:35",
											"nodeType": "YulFunctionCall",
											"src": "10917:34:35"
										},
										"nativeSrc": "10917:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "10917:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "10971:9:35",
															"nodeType": "YulIdentifier",
															"src": "10971:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "10982:2:35",
															"nodeType": "YulLiteral",
															"src": "10982:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "10967:3:35",
														"nodeType": "YulIdentifier",
														"src": "10967:3:35"
													},
													"nativeSrc": "10967:18:35",
													"nodeType": "YulFunctionCall",
													"src": "10967:18:35"
												},
												{
													"name": "value3",
													"nativeSrc": "10987:6:35",
													"nodeType": "YulIdentifier",
													"src": "10987:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "10960:6:35",
												"nodeType": "YulIdentifier",
												"src": "10960:6:35"
											},
											"nativeSrc": "10960:34:35",
											"nodeType": "YulFunctionCall",
											"src": "10960:34:35"
										},
										"nativeSrc": "10960:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "10960:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "10583:417:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "10713:9:35",
									"nodeType": "YulTypedName",
									"src": "10713:9:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "10724:6:35",
									"nodeType": "YulTypedName",
									"src": "10724:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "10732:6:35",
									"nodeType": "YulTypedName",
									"src": "10732:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "10740:6:35",
									"nodeType": "YulTypedName",
									"src": "10740:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "10748:6:35",
									"nodeType": "YulTypedName",
									"src": "10748:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "10759:4:35",
									"nodeType": "YulTypedName",
									"src": "10759:4:35",
									"type": ""
								}
							],
							"src": "10583:417:35"
						},
						{
							"body": {
								"nativeSrc": "11246:350:35",
								"nodeType": "YulBlock",
								"src": "11246:350:35",
								"statements": [
									{
										"nativeSrc": "11256:27:35",
										"nodeType": "YulAssignment",
										"src": "11256:27:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11268:9:35",
													"nodeType": "YulIdentifier",
													"src": "11268:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "11279:3:35",
													"nodeType": "YulLiteral",
													"src": "11279:3:35",
													"type": "",
													"value": "192"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11264:3:35",
												"nodeType": "YulIdentifier",
												"src": "11264:3:35"
											},
											"nativeSrc": "11264:19:35",
											"nodeType": "YulFunctionCall",
											"src": "11264:19:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "11256:4:35",
												"nodeType": "YulIdentifier",
												"src": "11256:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11299:9:35",
													"nodeType": "YulIdentifier",
													"src": "11299:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "11310:6:35",
													"nodeType": "YulIdentifier",
													"src": "11310:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11292:6:35",
												"nodeType": "YulIdentifier",
												"src": "11292:6:35"
											},
											"nativeSrc": "11292:25:35",
											"nodeType": "YulFunctionCall",
											"src": "11292:25:35"
										},
										"nativeSrc": "11292:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "11292:25:35"
									},
									{
										"nativeSrc": "11326:29:35",
										"nodeType": "YulVariableDeclaration",
										"src": "11326:29:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "11344:3:35",
															"nodeType": "YulLiteral",
															"src": "11344:3:35",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "11349:1:35",
															"nodeType": "YulLiteral",
															"src": "11349:1:35",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "11340:3:35",
														"nodeType": "YulIdentifier",
														"src": "11340:3:35"
													},
													"nativeSrc": "11340:11:35",
													"nodeType": "YulFunctionCall",
													"src": "11340:11:35"
												},
												{
													"kind": "number",
													"nativeSrc": "11353:1:35",
													"nodeType": "YulLiteral",
													"src": "11353:1:35",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "11336:3:35",
												"nodeType": "YulIdentifier",
												"src": "11336:3:35"
											},
											"nativeSrc": "11336:19:35",
											"nodeType": "YulFunctionCall",
											"src": "11336:19:35"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "11330:2:35",
												"nodeType": "YulTypedName",
												"src": "11330:2:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11375:9:35",
															"nodeType": "YulIdentifier",
															"src": "11375:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "11386:2:35",
															"nodeType": "YulLiteral",
															"src": "11386:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11371:3:35",
														"nodeType": "YulIdentifier",
														"src": "11371:3:35"
													},
													"nativeSrc": "11371:18:35",
													"nodeType": "YulFunctionCall",
													"src": "11371:18:35"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "11395:6:35",
															"nodeType": "YulIdentifier",
															"src": "11395:6:35"
														},
														{
															"name": "_1",
															"nativeSrc": "11403:2:35",
															"nodeType": "YulIdentifier",
															"src": "11403:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11391:3:35",
														"nodeType": "YulIdentifier",
														"src": "11391:3:35"
													},
													"nativeSrc": "11391:15:35",
													"nodeType": "YulFunctionCall",
													"src": "11391:15:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11364:6:35",
												"nodeType": "YulIdentifier",
												"src": "11364:6:35"
											},
											"nativeSrc": "11364:43:35",
											"nodeType": "YulFunctionCall",
											"src": "11364:43:35"
										},
										"nativeSrc": "11364:43:35",
										"nodeType": "YulExpressionStatement",
										"src": "11364:43:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11427:9:35",
															"nodeType": "YulIdentifier",
															"src": "11427:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "11438:2:35",
															"nodeType": "YulLiteral",
															"src": "11438:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11423:3:35",
														"nodeType": "YulIdentifier",
														"src": "11423:3:35"
													},
													"nativeSrc": "11423:18:35",
													"nodeType": "YulFunctionCall",
													"src": "11423:18:35"
												},
												{
													"arguments": [
														{
															"name": "value2",
															"nativeSrc": "11447:6:35",
															"nodeType": "YulIdentifier",
															"src": "11447:6:35"
														},
														{
															"name": "_1",
															"nativeSrc": "11455:2:35",
															"nodeType": "YulIdentifier",
															"src": "11455:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11443:3:35",
														"nodeType": "YulIdentifier",
														"src": "11443:3:35"
													},
													"nativeSrc": "11443:15:35",
													"nodeType": "YulFunctionCall",
													"src": "11443:15:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11416:6:35",
												"nodeType": "YulIdentifier",
												"src": "11416:6:35"
											},
											"nativeSrc": "11416:43:35",
											"nodeType": "YulFunctionCall",
											"src": "11416:43:35"
										},
										"nativeSrc": "11416:43:35",
										"nodeType": "YulExpressionStatement",
										"src": "11416:43:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11479:9:35",
															"nodeType": "YulIdentifier",
															"src": "11479:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "11490:2:35",
															"nodeType": "YulLiteral",
															"src": "11490:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11475:3:35",
														"nodeType": "YulIdentifier",
														"src": "11475:3:35"
													},
													"nativeSrc": "11475:18:35",
													"nodeType": "YulFunctionCall",
													"src": "11475:18:35"
												},
												{
													"name": "value3",
													"nativeSrc": "11495:6:35",
													"nodeType": "YulIdentifier",
													"src": "11495:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11468:6:35",
												"nodeType": "YulIdentifier",
												"src": "11468:6:35"
											},
											"nativeSrc": "11468:34:35",
											"nodeType": "YulFunctionCall",
											"src": "11468:34:35"
										},
										"nativeSrc": "11468:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "11468:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11522:9:35",
															"nodeType": "YulIdentifier",
															"src": "11522:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "11533:3:35",
															"nodeType": "YulLiteral",
															"src": "11533:3:35",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11518:3:35",
														"nodeType": "YulIdentifier",
														"src": "11518:3:35"
													},
													"nativeSrc": "11518:19:35",
													"nodeType": "YulFunctionCall",
													"src": "11518:19:35"
												},
												{
													"name": "value4",
													"nativeSrc": "11539:6:35",
													"nodeType": "YulIdentifier",
													"src": "11539:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11511:6:35",
												"nodeType": "YulIdentifier",
												"src": "11511:6:35"
											},
											"nativeSrc": "11511:35:35",
											"nodeType": "YulFunctionCall",
											"src": "11511:35:35"
										},
										"nativeSrc": "11511:35:35",
										"nodeType": "YulExpressionStatement",
										"src": "11511:35:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11566:9:35",
															"nodeType": "YulIdentifier",
															"src": "11566:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "11577:3:35",
															"nodeType": "YulLiteral",
															"src": "11577:3:35",
															"type": "",
															"value": "160"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11562:3:35",
														"nodeType": "YulIdentifier",
														"src": "11562:3:35"
													},
													"nativeSrc": "11562:19:35",
													"nodeType": "YulFunctionCall",
													"src": "11562:19:35"
												},
												{
													"name": "value5",
													"nativeSrc": "11583:6:35",
													"nodeType": "YulIdentifier",
													"src": "11583:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11555:6:35",
												"nodeType": "YulIdentifier",
												"src": "11555:6:35"
											},
											"nativeSrc": "11555:35:35",
											"nodeType": "YulFunctionCall",
											"src": "11555:35:35"
										},
										"nativeSrc": "11555:35:35",
										"nodeType": "YulExpressionStatement",
										"src": "11555:35:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "11005:591:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "11175:9:35",
									"nodeType": "YulTypedName",
									"src": "11175:9:35",
									"type": ""
								},
								{
									"name": "value5",
									"nativeSrc": "11186:6:35",
									"nodeType": "YulTypedName",
									"src": "11186:6:35",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "11194:6:35",
									"nodeType": "YulTypedName",
									"src": "11194:6:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "11202:6:35",
									"nodeType": "YulTypedName",
									"src": "11202:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "11210:6:35",
									"nodeType": "YulTypedName",
									"src": "11210:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "11218:6:35",
									"nodeType": "YulTypedName",
									"src": "11218:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "11226:6:35",
									"nodeType": "YulTypedName",
									"src": "11226:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "11237:4:35",
									"nodeType": "YulTypedName",
									"src": "11237:4:35",
									"type": ""
								}
							],
							"src": "11005:591:35"
						},
						{
							"body": {
								"nativeSrc": "11730:175:35",
								"nodeType": "YulBlock",
								"src": "11730:175:35",
								"statements": [
									{
										"nativeSrc": "11740:26:35",
										"nodeType": "YulAssignment",
										"src": "11740:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11752:9:35",
													"nodeType": "YulIdentifier",
													"src": "11752:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "11763:2:35",
													"nodeType": "YulLiteral",
													"src": "11763:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "11748:3:35",
												"nodeType": "YulIdentifier",
												"src": "11748:3:35"
											},
											"nativeSrc": "11748:18:35",
											"nodeType": "YulFunctionCall",
											"src": "11748:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "11740:4:35",
												"nodeType": "YulIdentifier",
												"src": "11740:4:35"
											}
										]
									},
									{
										"nativeSrc": "11775:29:35",
										"nodeType": "YulVariableDeclaration",
										"src": "11775:29:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "11793:3:35",
															"nodeType": "YulLiteral",
															"src": "11793:3:35",
															"type": "",
															"value": "160"
														},
														{
															"kind": "number",
															"nativeSrc": "11798:1:35",
															"nodeType": "YulLiteral",
															"src": "11798:1:35",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "11789:3:35",
														"nodeType": "YulIdentifier",
														"src": "11789:3:35"
													},
													"nativeSrc": "11789:11:35",
													"nodeType": "YulFunctionCall",
													"src": "11789:11:35"
												},
												{
													"kind": "number",
													"nativeSrc": "11802:1:35",
													"nodeType": "YulLiteral",
													"src": "11802:1:35",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "11785:3:35",
												"nodeType": "YulIdentifier",
												"src": "11785:3:35"
											},
											"nativeSrc": "11785:19:35",
											"nodeType": "YulFunctionCall",
											"src": "11785:19:35"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "11779:2:35",
												"nodeType": "YulTypedName",
												"src": "11779:2:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "11820:9:35",
													"nodeType": "YulIdentifier",
													"src": "11820:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "11835:6:35",
															"nodeType": "YulIdentifier",
															"src": "11835:6:35"
														},
														{
															"name": "_1",
															"nativeSrc": "11843:2:35",
															"nodeType": "YulIdentifier",
															"src": "11843:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11831:3:35",
														"nodeType": "YulIdentifier",
														"src": "11831:3:35"
													},
													"nativeSrc": "11831:15:35",
													"nodeType": "YulFunctionCall",
													"src": "11831:15:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11813:6:35",
												"nodeType": "YulIdentifier",
												"src": "11813:6:35"
											},
											"nativeSrc": "11813:34:35",
											"nodeType": "YulFunctionCall",
											"src": "11813:34:35"
										},
										"nativeSrc": "11813:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "11813:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "11867:9:35",
															"nodeType": "YulIdentifier",
															"src": "11867:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "11878:2:35",
															"nodeType": "YulLiteral",
															"src": "11878:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "11863:3:35",
														"nodeType": "YulIdentifier",
														"src": "11863:3:35"
													},
													"nativeSrc": "11863:18:35",
													"nodeType": "YulFunctionCall",
													"src": "11863:18:35"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "11887:6:35",
															"nodeType": "YulIdentifier",
															"src": "11887:6:35"
														},
														{
															"name": "_1",
															"nativeSrc": "11895:2:35",
															"nodeType": "YulIdentifier",
															"src": "11895:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "11883:3:35",
														"nodeType": "YulIdentifier",
														"src": "11883:3:35"
													},
													"nativeSrc": "11883:15:35",
													"nodeType": "YulFunctionCall",
													"src": "11883:15:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "11856:6:35",
												"nodeType": "YulIdentifier",
												"src": "11856:6:35"
											},
											"nativeSrc": "11856:43:35",
											"nodeType": "YulFunctionCall",
											"src": "11856:43:35"
										},
										"nativeSrc": "11856:43:35",
										"nodeType": "YulExpressionStatement",
										"src": "11856:43:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
							"nativeSrc": "11601:304:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "11691:9:35",
									"nodeType": "YulTypedName",
									"src": "11691:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "11702:6:35",
									"nodeType": "YulTypedName",
									"src": "11702:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "11710:6:35",
									"nodeType": "YulTypedName",
									"src": "11710:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "11721:4:35",
									"nodeType": "YulTypedName",
									"src": "11721:4:35",
									"type": ""
								}
							],
							"src": "11601:304:35"
						},
						{
							"body": {
								"nativeSrc": "12067:188:35",
								"nodeType": "YulBlock",
								"src": "12067:188:35",
								"statements": [
									{
										"nativeSrc": "12077:26:35",
										"nodeType": "YulAssignment",
										"src": "12077:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12089:9:35",
													"nodeType": "YulIdentifier",
													"src": "12089:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "12100:2:35",
													"nodeType": "YulLiteral",
													"src": "12100:2:35",
													"type": "",
													"value": "96"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12085:3:35",
												"nodeType": "YulIdentifier",
												"src": "12085:3:35"
											},
											"nativeSrc": "12085:18:35",
											"nodeType": "YulFunctionCall",
											"src": "12085:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12077:4:35",
												"nodeType": "YulIdentifier",
												"src": "12077:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12119:9:35",
													"nodeType": "YulIdentifier",
													"src": "12119:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "12134:6:35",
															"nodeType": "YulIdentifier",
															"src": "12134:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "12150:3:35",
																			"nodeType": "YulLiteral",
																			"src": "12150:3:35",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "12155:1:35",
																			"nodeType": "YulLiteral",
																			"src": "12155:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "12146:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "12146:3:35"
																	},
																	"nativeSrc": "12146:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "12146:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "12159:1:35",
																	"nodeType": "YulLiteral",
																	"src": "12159:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "12142:3:35",
																"nodeType": "YulIdentifier",
																"src": "12142:3:35"
															},
															"nativeSrc": "12142:19:35",
															"nodeType": "YulFunctionCall",
															"src": "12142:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12130:3:35",
														"nodeType": "YulIdentifier",
														"src": "12130:3:35"
													},
													"nativeSrc": "12130:32:35",
													"nodeType": "YulFunctionCall",
													"src": "12130:32:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12112:6:35",
												"nodeType": "YulIdentifier",
												"src": "12112:6:35"
											},
											"nativeSrc": "12112:51:35",
											"nodeType": "YulFunctionCall",
											"src": "12112:51:35"
										},
										"nativeSrc": "12112:51:35",
										"nodeType": "YulExpressionStatement",
										"src": "12112:51:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12183:9:35",
															"nodeType": "YulIdentifier",
															"src": "12183:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "12194:2:35",
															"nodeType": "YulLiteral",
															"src": "12194:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12179:3:35",
														"nodeType": "YulIdentifier",
														"src": "12179:3:35"
													},
													"nativeSrc": "12179:18:35",
													"nodeType": "YulFunctionCall",
													"src": "12179:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "12199:6:35",
													"nodeType": "YulIdentifier",
													"src": "12199:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12172:6:35",
												"nodeType": "YulIdentifier",
												"src": "12172:6:35"
											},
											"nativeSrc": "12172:34:35",
											"nodeType": "YulFunctionCall",
											"src": "12172:34:35"
										},
										"nativeSrc": "12172:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "12172:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12226:9:35",
															"nodeType": "YulIdentifier",
															"src": "12226:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "12237:2:35",
															"nodeType": "YulLiteral",
															"src": "12237:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12222:3:35",
														"nodeType": "YulIdentifier",
														"src": "12222:3:35"
													},
													"nativeSrc": "12222:18:35",
													"nodeType": "YulFunctionCall",
													"src": "12222:18:35"
												},
												{
													"name": "value2",
													"nativeSrc": "12242:6:35",
													"nodeType": "YulIdentifier",
													"src": "12242:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12215:6:35",
												"nodeType": "YulIdentifier",
												"src": "12215:6:35"
											},
											"nativeSrc": "12215:34:35",
											"nodeType": "YulFunctionCall",
											"src": "12215:34:35"
										},
										"nativeSrc": "12215:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "12215:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "11910:345:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12020:9:35",
									"nodeType": "YulTypedName",
									"src": "12020:9:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "12031:6:35",
									"nodeType": "YulTypedName",
									"src": "12031:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12039:6:35",
									"nodeType": "YulTypedName",
									"src": "12039:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12047:6:35",
									"nodeType": "YulTypedName",
									"src": "12047:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12058:4:35",
									"nodeType": "YulTypedName",
									"src": "12058:4:35",
									"type": ""
								}
							],
							"src": "11910:345:35"
						},
						{
							"body": {
								"nativeSrc": "12387:140:35",
								"nodeType": "YulBlock",
								"src": "12387:140:35",
								"statements": [
									{
										"nativeSrc": "12397:26:35",
										"nodeType": "YulAssignment",
										"src": "12397:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12409:9:35",
													"nodeType": "YulIdentifier",
													"src": "12409:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "12420:2:35",
													"nodeType": "YulLiteral",
													"src": "12420:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12405:3:35",
												"nodeType": "YulIdentifier",
												"src": "12405:3:35"
											},
											"nativeSrc": "12405:18:35",
											"nodeType": "YulFunctionCall",
											"src": "12405:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "12397:4:35",
												"nodeType": "YulIdentifier",
												"src": "12397:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12439:9:35",
													"nodeType": "YulIdentifier",
													"src": "12439:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "12450:6:35",
													"nodeType": "YulIdentifier",
													"src": "12450:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12432:6:35",
												"nodeType": "YulIdentifier",
												"src": "12432:6:35"
											},
											"nativeSrc": "12432:25:35",
											"nodeType": "YulFunctionCall",
											"src": "12432:25:35"
										},
										"nativeSrc": "12432:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "12432:25:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "12477:9:35",
															"nodeType": "YulIdentifier",
															"src": "12477:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "12488:2:35",
															"nodeType": "YulLiteral",
															"src": "12488:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "12473:3:35",
														"nodeType": "YulIdentifier",
														"src": "12473:3:35"
													},
													"nativeSrc": "12473:18:35",
													"nodeType": "YulFunctionCall",
													"src": "12473:18:35"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "12497:6:35",
															"nodeType": "YulIdentifier",
															"src": "12497:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "12505:14:35",
															"nodeType": "YulLiteral",
															"src": "12505:14:35",
															"type": "",
															"value": "0xffffffffffff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "12493:3:35",
														"nodeType": "YulIdentifier",
														"src": "12493:3:35"
													},
													"nativeSrc": "12493:27:35",
													"nodeType": "YulFunctionCall",
													"src": "12493:27:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "12466:6:35",
												"nodeType": "YulIdentifier",
												"src": "12466:6:35"
											},
											"nativeSrc": "12466:55:35",
											"nodeType": "YulFunctionCall",
											"src": "12466:55:35"
										},
										"nativeSrc": "12466:55:35",
										"nodeType": "YulExpressionStatement",
										"src": "12466:55:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint48__to_t_uint256_t_uint48__fromStack_reversed",
							"nativeSrc": "12260:267:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12348:9:35",
									"nodeType": "YulTypedName",
									"src": "12348:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "12359:6:35",
									"nodeType": "YulTypedName",
									"src": "12359:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "12367:6:35",
									"nodeType": "YulTypedName",
									"src": "12367:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "12378:4:35",
									"nodeType": "YulTypedName",
									"src": "12378:4:35",
									"type": ""
								}
							],
							"src": "12260:267:35"
						},
						{
							"body": {
								"nativeSrc": "12581:79:35",
								"nodeType": "YulBlock",
								"src": "12581:79:35",
								"statements": [
									{
										"nativeSrc": "12591:17:35",
										"nodeType": "YulAssignment",
										"src": "12591:17:35",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "12603:1:35",
													"nodeType": "YulIdentifier",
													"src": "12603:1:35"
												},
												{
													"name": "y",
													"nativeSrc": "12606:1:35",
													"nodeType": "YulIdentifier",
													"src": "12606:1:35"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "12599:3:35",
												"nodeType": "YulIdentifier",
												"src": "12599:3:35"
											},
											"nativeSrc": "12599:9:35",
											"nodeType": "YulFunctionCall",
											"src": "12599:9:35"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "12591:4:35",
												"nodeType": "YulIdentifier",
												"src": "12591:4:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "12632:22:35",
											"nodeType": "YulBlock",
											"src": "12632:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "12634:16:35",
															"nodeType": "YulIdentifier",
															"src": "12634:16:35"
														},
														"nativeSrc": "12634:18:35",
														"nodeType": "YulFunctionCall",
														"src": "12634:18:35"
													},
													"nativeSrc": "12634:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "12634:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "12623:4:35",
													"nodeType": "YulIdentifier",
													"src": "12623:4:35"
												},
												{
													"name": "x",
													"nativeSrc": "12629:1:35",
													"nodeType": "YulIdentifier",
													"src": "12629:1:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "12620:2:35",
												"nodeType": "YulIdentifier",
												"src": "12620:2:35"
											},
											"nativeSrc": "12620:11:35",
											"nodeType": "YulFunctionCall",
											"src": "12620:11:35"
										},
										"nativeSrc": "12617:37:35",
										"nodeType": "YulIf",
										"src": "12617:37:35"
									}
								]
							},
							"name": "checked_sub_t_uint256",
							"nativeSrc": "12532:128:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "12563:1:35",
									"nodeType": "YulTypedName",
									"src": "12563:1:35",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "12566:1:35",
									"nodeType": "YulTypedName",
									"src": "12566:1:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "12572:4:35",
									"nodeType": "YulTypedName",
									"src": "12572:4:35",
									"type": ""
								}
							],
							"src": "12532:128:35"
						},
						{
							"body": {
								"nativeSrc": "12713:77:35",
								"nodeType": "YulBlock",
								"src": "12713:77:35",
								"statements": [
									{
										"nativeSrc": "12723:16:35",
										"nodeType": "YulAssignment",
										"src": "12723:16:35",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "12734:1:35",
													"nodeType": "YulIdentifier",
													"src": "12734:1:35"
												},
												{
													"name": "y",
													"nativeSrc": "12737:1:35",
													"nodeType": "YulIdentifier",
													"src": "12737:1:35"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "12730:3:35",
												"nodeType": "YulIdentifier",
												"src": "12730:3:35"
											},
											"nativeSrc": "12730:9:35",
											"nodeType": "YulFunctionCall",
											"src": "12730:9:35"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "12723:3:35",
												"nodeType": "YulIdentifier",
												"src": "12723:3:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "12762:22:35",
											"nodeType": "YulBlock",
											"src": "12762:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "12764:16:35",
															"nodeType": "YulIdentifier",
															"src": "12764:16:35"
														},
														"nativeSrc": "12764:18:35",
														"nodeType": "YulFunctionCall",
														"src": "12764:18:35"
													},
													"nativeSrc": "12764:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "12764:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "12754:1:35",
													"nodeType": "YulIdentifier",
													"src": "12754:1:35"
												},
												{
													"name": "sum",
													"nativeSrc": "12757:3:35",
													"nodeType": "YulIdentifier",
													"src": "12757:3:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "12751:2:35",
												"nodeType": "YulIdentifier",
												"src": "12751:2:35"
											},
											"nativeSrc": "12751:10:35",
											"nodeType": "YulFunctionCall",
											"src": "12751:10:35"
										},
										"nativeSrc": "12748:36:35",
										"nodeType": "YulIf",
										"src": "12748:36:35"
									}
								]
							},
							"name": "checked_add_t_uint256",
							"nativeSrc": "12665:125:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "12696:1:35",
									"nodeType": "YulTypedName",
									"src": "12696:1:35",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "12699:1:35",
									"nodeType": "YulTypedName",
									"src": "12699:1:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "12705:3:35",
									"nodeType": "YulTypedName",
									"src": "12705:3:35",
									"type": ""
								}
							],
							"src": "12665:125:35"
						},
						{
							"body": {
								"nativeSrc": "12876:103:35",
								"nodeType": "YulBlock",
								"src": "12876:103:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "12922:16:35",
											"nodeType": "YulBlock",
											"src": "12922:16:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "12931:1:35",
																"nodeType": "YulLiteral",
																"src": "12931:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "12934:1:35",
																"nodeType": "YulLiteral",
																"src": "12934:1:35",
																"type": "",
																"value": "0"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "12924:6:35",
															"nodeType": "YulIdentifier",
															"src": "12924:6:35"
														},
														"nativeSrc": "12924:12:35",
														"nodeType": "YulFunctionCall",
														"src": "12924:12:35"
													},
													"nativeSrc": "12924:12:35",
													"nodeType": "YulExpressionStatement",
													"src": "12924:12:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "dataEnd",
															"nativeSrc": "12897:7:35",
															"nodeType": "YulIdentifier",
															"src": "12897:7:35"
														},
														{
															"name": "headStart",
															"nativeSrc": "12906:9:35",
															"nodeType": "YulIdentifier",
															"src": "12906:9:35"
														}
													],
													"functionName": {
														"name": "sub",
														"nativeSrc": "12893:3:35",
														"nodeType": "YulIdentifier",
														"src": "12893:3:35"
													},
													"nativeSrc": "12893:23:35",
													"nodeType": "YulFunctionCall",
													"src": "12893:23:35"
												},
												{
													"kind": "number",
													"nativeSrc": "12918:2:35",
													"nodeType": "YulLiteral",
													"src": "12918:2:35",
													"type": "",
													"value": "32"
												}
											],
											"functionName": {
												"name": "slt",
												"nativeSrc": "12889:3:35",
												"nodeType": "YulIdentifier",
												"src": "12889:3:35"
											},
											"nativeSrc": "12889:32:35",
											"nodeType": "YulFunctionCall",
											"src": "12889:32:35"
										},
										"nativeSrc": "12886:52:35",
										"nodeType": "YulIf",
										"src": "12886:52:35"
									},
									{
										"nativeSrc": "12947:26:35",
										"nodeType": "YulAssignment",
										"src": "12947:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "12963:9:35",
													"nodeType": "YulIdentifier",
													"src": "12963:9:35"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "12957:5:35",
												"nodeType": "YulIdentifier",
												"src": "12957:5:35"
											},
											"nativeSrc": "12957:16:35",
											"nodeType": "YulFunctionCall",
											"src": "12957:16:35"
										},
										"variableNames": [
											{
												"name": "value0",
												"nativeSrc": "12947:6:35",
												"nodeType": "YulIdentifier",
												"src": "12947:6:35"
											}
										]
									}
								]
							},
							"name": "abi_decode_tuple_t_bytes32_fromMemory",
							"nativeSrc": "12795:184:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "12842:9:35",
									"nodeType": "YulTypedName",
									"src": "12842:9:35",
									"type": ""
								},
								{
									"name": "dataEnd",
									"nativeSrc": "12853:7:35",
									"nodeType": "YulTypedName",
									"src": "12853:7:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "value0",
									"nativeSrc": "12865:6:35",
									"nodeType": "YulTypedName",
									"src": "12865:6:35",
									"type": ""
								}
							],
							"src": "12795:184:35"
						},
						{
							"body": {
								"nativeSrc": "13113:145:35",
								"nodeType": "YulBlock",
								"src": "13113:145:35",
								"statements": [
									{
										"nativeSrc": "13123:26:35",
										"nodeType": "YulAssignment",
										"src": "13123:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13135:9:35",
													"nodeType": "YulIdentifier",
													"src": "13135:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "13146:2:35",
													"nodeType": "YulLiteral",
													"src": "13146:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13131:3:35",
												"nodeType": "YulIdentifier",
												"src": "13131:3:35"
											},
											"nativeSrc": "13131:18:35",
											"nodeType": "YulFunctionCall",
											"src": "13131:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13123:4:35",
												"nodeType": "YulIdentifier",
												"src": "13123:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13165:9:35",
													"nodeType": "YulIdentifier",
													"src": "13165:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "13180:6:35",
															"nodeType": "YulIdentifier",
															"src": "13180:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "13196:3:35",
																			"nodeType": "YulLiteral",
																			"src": "13196:3:35",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "13201:1:35",
																			"nodeType": "YulLiteral",
																			"src": "13201:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "13192:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "13192:3:35"
																	},
																	"nativeSrc": "13192:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "13192:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "13205:1:35",
																	"nodeType": "YulLiteral",
																	"src": "13205:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "13188:3:35",
																"nodeType": "YulIdentifier",
																"src": "13188:3:35"
															},
															"nativeSrc": "13188:19:35",
															"nodeType": "YulFunctionCall",
															"src": "13188:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "13176:3:35",
														"nodeType": "YulIdentifier",
														"src": "13176:3:35"
													},
													"nativeSrc": "13176:32:35",
													"nodeType": "YulFunctionCall",
													"src": "13176:32:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13158:6:35",
												"nodeType": "YulIdentifier",
												"src": "13158:6:35"
											},
											"nativeSrc": "13158:51:35",
											"nodeType": "YulFunctionCall",
											"src": "13158:51:35"
										},
										"nativeSrc": "13158:51:35",
										"nodeType": "YulExpressionStatement",
										"src": "13158:51:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13229:9:35",
															"nodeType": "YulIdentifier",
															"src": "13229:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "13240:2:35",
															"nodeType": "YulLiteral",
															"src": "13240:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13225:3:35",
														"nodeType": "YulIdentifier",
														"src": "13225:3:35"
													},
													"nativeSrc": "13225:18:35",
													"nodeType": "YulFunctionCall",
													"src": "13225:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "13245:6:35",
													"nodeType": "YulIdentifier",
													"src": "13245:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13218:6:35",
												"nodeType": "YulIdentifier",
												"src": "13218:6:35"
											},
											"nativeSrc": "13218:34:35",
											"nodeType": "YulFunctionCall",
											"src": "13218:34:35"
										},
										"nativeSrc": "13218:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "13218:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
							"nativeSrc": "12984:274:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13074:9:35",
									"nodeType": "YulTypedName",
									"src": "13074:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13085:6:35",
									"nodeType": "YulTypedName",
									"src": "13085:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13093:6:35",
									"nodeType": "YulTypedName",
									"src": "13093:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "13104:4:35",
									"nodeType": "YulTypedName",
									"src": "13104:4:35",
									"type": ""
								}
							],
							"src": "12984:274:35"
						},
						{
							"body": {
								"nativeSrc": "13476:276:35",
								"nodeType": "YulBlock",
								"src": "13476:276:35",
								"statements": [
									{
										"nativeSrc": "13486:27:35",
										"nodeType": "YulAssignment",
										"src": "13486:27:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13498:9:35",
													"nodeType": "YulIdentifier",
													"src": "13498:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "13509:3:35",
													"nodeType": "YulLiteral",
													"src": "13509:3:35",
													"type": "",
													"value": "160"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13494:3:35",
												"nodeType": "YulIdentifier",
												"src": "13494:3:35"
											},
											"nativeSrc": "13494:19:35",
											"nodeType": "YulFunctionCall",
											"src": "13494:19:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13486:4:35",
												"nodeType": "YulIdentifier",
												"src": "13486:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13529:9:35",
													"nodeType": "YulIdentifier",
													"src": "13529:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "13540:6:35",
													"nodeType": "YulIdentifier",
													"src": "13540:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13522:6:35",
												"nodeType": "YulIdentifier",
												"src": "13522:6:35"
											},
											"nativeSrc": "13522:25:35",
											"nodeType": "YulFunctionCall",
											"src": "13522:25:35"
										},
										"nativeSrc": "13522:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "13522:25:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13567:9:35",
															"nodeType": "YulIdentifier",
															"src": "13567:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "13578:2:35",
															"nodeType": "YulLiteral",
															"src": "13578:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13563:3:35",
														"nodeType": "YulIdentifier",
														"src": "13563:3:35"
													},
													"nativeSrc": "13563:18:35",
													"nodeType": "YulFunctionCall",
													"src": "13563:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "13583:6:35",
													"nodeType": "YulIdentifier",
													"src": "13583:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13556:6:35",
												"nodeType": "YulIdentifier",
												"src": "13556:6:35"
											},
											"nativeSrc": "13556:34:35",
											"nodeType": "YulFunctionCall",
											"src": "13556:34:35"
										},
										"nativeSrc": "13556:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "13556:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13610:9:35",
															"nodeType": "YulIdentifier",
															"src": "13610:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "13621:2:35",
															"nodeType": "YulLiteral",
															"src": "13621:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13606:3:35",
														"nodeType": "YulIdentifier",
														"src": "13606:3:35"
													},
													"nativeSrc": "13606:18:35",
													"nodeType": "YulFunctionCall",
													"src": "13606:18:35"
												},
												{
													"name": "value2",
													"nativeSrc": "13626:6:35",
													"nodeType": "YulIdentifier",
													"src": "13626:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13599:6:35",
												"nodeType": "YulIdentifier",
												"src": "13599:6:35"
											},
											"nativeSrc": "13599:34:35",
											"nodeType": "YulFunctionCall",
											"src": "13599:34:35"
										},
										"nativeSrc": "13599:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "13599:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13653:9:35",
															"nodeType": "YulIdentifier",
															"src": "13653:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "13664:2:35",
															"nodeType": "YulLiteral",
															"src": "13664:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13649:3:35",
														"nodeType": "YulIdentifier",
														"src": "13649:3:35"
													},
													"nativeSrc": "13649:18:35",
													"nodeType": "YulFunctionCall",
													"src": "13649:18:35"
												},
												{
													"name": "value3",
													"nativeSrc": "13669:6:35",
													"nodeType": "YulIdentifier",
													"src": "13669:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13642:6:35",
												"nodeType": "YulIdentifier",
												"src": "13642:6:35"
											},
											"nativeSrc": "13642:34:35",
											"nodeType": "YulFunctionCall",
											"src": "13642:34:35"
										},
										"nativeSrc": "13642:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "13642:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13696:9:35",
															"nodeType": "YulIdentifier",
															"src": "13696:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "13707:3:35",
															"nodeType": "YulLiteral",
															"src": "13707:3:35",
															"type": "",
															"value": "128"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13692:3:35",
														"nodeType": "YulIdentifier",
														"src": "13692:3:35"
													},
													"nativeSrc": "13692:19:35",
													"nodeType": "YulFunctionCall",
													"src": "13692:19:35"
												},
												{
													"arguments": [
														{
															"name": "value4",
															"nativeSrc": "13717:6:35",
															"nodeType": "YulIdentifier",
															"src": "13717:6:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"kind": "number",
																			"nativeSrc": "13733:3:35",
																			"nodeType": "YulLiteral",
																			"src": "13733:3:35",
																			"type": "",
																			"value": "160"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "13738:1:35",
																			"nodeType": "YulLiteral",
																			"src": "13738:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "shl",
																		"nativeSrc": "13729:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "13729:3:35"
																	},
																	"nativeSrc": "13729:11:35",
																	"nodeType": "YulFunctionCall",
																	"src": "13729:11:35"
																},
																{
																	"kind": "number",
																	"nativeSrc": "13742:1:35",
																	"nodeType": "YulLiteral",
																	"src": "13742:1:35",
																	"type": "",
																	"value": "1"
																}
															],
															"functionName": {
																"name": "sub",
																"nativeSrc": "13725:3:35",
																"nodeType": "YulIdentifier",
																"src": "13725:3:35"
															},
															"nativeSrc": "13725:19:35",
															"nodeType": "YulFunctionCall",
															"src": "13725:19:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "13713:3:35",
														"nodeType": "YulIdentifier",
														"src": "13713:3:35"
													},
													"nativeSrc": "13713:32:35",
													"nodeType": "YulFunctionCall",
													"src": "13713:32:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13685:6:35",
												"nodeType": "YulIdentifier",
												"src": "13685:6:35"
											},
											"nativeSrc": "13685:61:35",
											"nodeType": "YulFunctionCall",
											"src": "13685:61:35"
										},
										"nativeSrc": "13685:61:35",
										"nodeType": "YulExpressionStatement",
										"src": "13685:61:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
							"nativeSrc": "13263:489:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13413:9:35",
									"nodeType": "YulTypedName",
									"src": "13413:9:35",
									"type": ""
								},
								{
									"name": "value4",
									"nativeSrc": "13424:6:35",
									"nodeType": "YulTypedName",
									"src": "13424:6:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "13432:6:35",
									"nodeType": "YulTypedName",
									"src": "13432:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "13440:6:35",
									"nodeType": "YulTypedName",
									"src": "13440:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13448:6:35",
									"nodeType": "YulTypedName",
									"src": "13448:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13456:6:35",
									"nodeType": "YulTypedName",
									"src": "13456:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "13467:4:35",
									"nodeType": "YulTypedName",
									"src": "13467:4:35",
									"type": ""
								}
							],
							"src": "13263:489:35"
						},
						{
							"body": {
								"nativeSrc": "13893:130:35",
								"nodeType": "YulBlock",
								"src": "13893:130:35",
								"statements": [
									{
										"nativeSrc": "13903:26:35",
										"nodeType": "YulAssignment",
										"src": "13903:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13915:9:35",
													"nodeType": "YulIdentifier",
													"src": "13915:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "13926:2:35",
													"nodeType": "YulLiteral",
													"src": "13926:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "13911:3:35",
												"nodeType": "YulIdentifier",
												"src": "13911:3:35"
											},
											"nativeSrc": "13911:18:35",
											"nodeType": "YulFunctionCall",
											"src": "13911:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "13903:4:35",
												"nodeType": "YulIdentifier",
												"src": "13903:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "13945:9:35",
													"nodeType": "YulIdentifier",
													"src": "13945:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "13960:6:35",
															"nodeType": "YulIdentifier",
															"src": "13960:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "13968:4:35",
															"nodeType": "YulLiteral",
															"src": "13968:4:35",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "13956:3:35",
														"nodeType": "YulIdentifier",
														"src": "13956:3:35"
													},
													"nativeSrc": "13956:17:35",
													"nodeType": "YulFunctionCall",
													"src": "13956:17:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13938:6:35",
												"nodeType": "YulIdentifier",
												"src": "13938:6:35"
											},
											"nativeSrc": "13938:36:35",
											"nodeType": "YulFunctionCall",
											"src": "13938:36:35"
										},
										"nativeSrc": "13938:36:35",
										"nodeType": "YulExpressionStatement",
										"src": "13938:36:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "13994:9:35",
															"nodeType": "YulIdentifier",
															"src": "13994:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "14005:2:35",
															"nodeType": "YulLiteral",
															"src": "14005:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "13990:3:35",
														"nodeType": "YulIdentifier",
														"src": "13990:3:35"
													},
													"nativeSrc": "13990:18:35",
													"nodeType": "YulFunctionCall",
													"src": "13990:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "14010:6:35",
													"nodeType": "YulIdentifier",
													"src": "14010:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "13983:6:35",
												"nodeType": "YulIdentifier",
												"src": "13983:6:35"
											},
											"nativeSrc": "13983:34:35",
											"nodeType": "YulFunctionCall",
											"src": "13983:34:35"
										},
										"nativeSrc": "13983:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "13983:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "13757:266:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "13854:9:35",
									"nodeType": "YulTypedName",
									"src": "13854:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "13865:6:35",
									"nodeType": "YulTypedName",
									"src": "13865:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "13873:6:35",
									"nodeType": "YulTypedName",
									"src": "13873:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "13884:4:35",
									"nodeType": "YulTypedName",
									"src": "13884:4:35",
									"type": ""
								}
							],
							"src": "13757:266:35"
						},
						{
							"body": {
								"nativeSrc": "14060:95:35",
								"nodeType": "YulBlock",
								"src": "14060:95:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14077:1:35",
													"nodeType": "YulLiteral",
													"src": "14077:1:35",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "14084:3:35",
															"nodeType": "YulLiteral",
															"src": "14084:3:35",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "14089:10:35",
															"nodeType": "YulLiteral",
															"src": "14089:10:35",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "14080:3:35",
														"nodeType": "YulIdentifier",
														"src": "14080:3:35"
													},
													"nativeSrc": "14080:20:35",
													"nodeType": "YulFunctionCall",
													"src": "14080:20:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14070:6:35",
												"nodeType": "YulIdentifier",
												"src": "14070:6:35"
											},
											"nativeSrc": "14070:31:35",
											"nodeType": "YulFunctionCall",
											"src": "14070:31:35"
										},
										"nativeSrc": "14070:31:35",
										"nodeType": "YulExpressionStatement",
										"src": "14070:31:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14117:1:35",
													"nodeType": "YulLiteral",
													"src": "14117:1:35",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "14120:4:35",
													"nodeType": "YulLiteral",
													"src": "14120:4:35",
													"type": "",
													"value": "0x12"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14110:6:35",
												"nodeType": "YulIdentifier",
												"src": "14110:6:35"
											},
											"nativeSrc": "14110:15:35",
											"nodeType": "YulFunctionCall",
											"src": "14110:15:35"
										},
										"nativeSrc": "14110:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "14110:15:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14141:1:35",
													"nodeType": "YulLiteral",
													"src": "14141:1:35",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "14144:4:35",
													"nodeType": "YulLiteral",
													"src": "14144:4:35",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "14134:6:35",
												"nodeType": "YulIdentifier",
												"src": "14134:6:35"
											},
											"nativeSrc": "14134:15:35",
											"nodeType": "YulFunctionCall",
											"src": "14134:15:35"
										},
										"nativeSrc": "14134:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "14134:15:35"
									}
								]
							},
							"name": "panic_error_0x12",
							"nativeSrc": "14028:127:35",
							"nodeType": "YulFunctionDefinition",
							"src": "14028:127:35"
						},
						{
							"body": {
								"nativeSrc": "14216:65:35",
								"nodeType": "YulBlock",
								"src": "14216:65:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14233:1:35",
													"nodeType": "YulLiteral",
													"src": "14233:1:35",
													"type": "",
													"value": "0"
												},
												{
													"name": "ptr",
													"nativeSrc": "14236:3:35",
													"nodeType": "YulIdentifier",
													"src": "14236:3:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "14226:6:35",
												"nodeType": "YulIdentifier",
												"src": "14226:6:35"
											},
											"nativeSrc": "14226:14:35",
											"nodeType": "YulFunctionCall",
											"src": "14226:14:35"
										},
										"nativeSrc": "14226:14:35",
										"nodeType": "YulExpressionStatement",
										"src": "14226:14:35"
									},
									{
										"nativeSrc": "14249:26:35",
										"nodeType": "YulAssignment",
										"src": "14249:26:35",
										"value": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "14267:1:35",
													"nodeType": "YulLiteral",
													"src": "14267:1:35",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "14270:4:35",
													"nodeType": "YulLiteral",
													"src": "14270:4:35",
													"type": "",
													"value": "0x20"
												}
											],
											"functionName": {
												"name": "keccak256",
												"nativeSrc": "14257:9:35",
												"nodeType": "YulIdentifier",
												"src": "14257:9:35"
											},
											"nativeSrc": "14257:18:35",
											"nodeType": "YulFunctionCall",
											"src": "14257:18:35"
										},
										"variableNames": [
											{
												"name": "data",
												"nativeSrc": "14249:4:35",
												"nodeType": "YulIdentifier",
												"src": "14249:4:35"
											}
										]
									}
								]
							},
							"name": "array_dataslot_string_storage",
							"nativeSrc": "14160:121:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "ptr",
									"nativeSrc": "14199:3:35",
									"nodeType": "YulTypedName",
									"src": "14199:3:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "data",
									"nativeSrc": "14207:4:35",
									"nodeType": "YulTypedName",
									"src": "14207:4:35",
									"type": ""
								}
							],
							"src": "14160:121:35"
						},
						{
							"body": {
								"nativeSrc": "14367:437:35",
								"nodeType": "YulBlock",
								"src": "14367:437:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "14400:398:35",
											"nodeType": "YulBlock",
											"src": "14400:398:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "14421:1:35",
																"nodeType": "YulLiteral",
																"src": "14421:1:35",
																"type": "",
																"value": "0"
															},
															{
																"name": "array",
																"nativeSrc": "14424:5:35",
																"nodeType": "YulIdentifier",
																"src": "14424:5:35"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "14414:6:35",
															"nodeType": "YulIdentifier",
															"src": "14414:6:35"
														},
														"nativeSrc": "14414:16:35",
														"nodeType": "YulFunctionCall",
														"src": "14414:16:35"
													},
													"nativeSrc": "14414:16:35",
													"nodeType": "YulExpressionStatement",
													"src": "14414:16:35"
												},
												{
													"nativeSrc": "14443:30:35",
													"nodeType": "YulVariableDeclaration",
													"src": "14443:30:35",
													"value": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "14465:1:35",
																"nodeType": "YulLiteral",
																"src": "14465:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "14468:4:35",
																"nodeType": "YulLiteral",
																"src": "14468:4:35",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "keccak256",
															"nativeSrc": "14455:9:35",
															"nodeType": "YulIdentifier",
															"src": "14455:9:35"
														},
														"nativeSrc": "14455:18:35",
														"nodeType": "YulFunctionCall",
														"src": "14455:18:35"
													},
													"variables": [
														{
															"name": "data",
															"nativeSrc": "14447:4:35",
															"nodeType": "YulTypedName",
															"src": "14447:4:35",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "14486:57:35",
													"nodeType": "YulVariableDeclaration",
													"src": "14486:57:35",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "14509:4:35",
																"nodeType": "YulIdentifier",
																"src": "14509:4:35"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14519:1:35",
																		"nodeType": "YulLiteral",
																		"src": "14519:1:35",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "startIndex",
																				"nativeSrc": "14526:10:35",
																				"nodeType": "YulIdentifier",
																				"src": "14526:10:35"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14538:2:35",
																				"nodeType": "YulLiteral",
																				"src": "14538:2:35",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14522:3:35",
																			"nodeType": "YulIdentifier",
																			"src": "14522:3:35"
																		},
																		"nativeSrc": "14522:19:35",
																		"nodeType": "YulFunctionCall",
																		"src": "14522:19:35"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "14515:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "14515:3:35"
																},
																"nativeSrc": "14515:27:35",
																"nodeType": "YulFunctionCall",
																"src": "14515:27:35"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "14505:3:35",
															"nodeType": "YulIdentifier",
															"src": "14505:3:35"
														},
														"nativeSrc": "14505:38:35",
														"nodeType": "YulFunctionCall",
														"src": "14505:38:35"
													},
													"variables": [
														{
															"name": "deleteStart",
															"nativeSrc": "14490:11:35",
															"nodeType": "YulTypedName",
															"src": "14490:11:35",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "14580:23:35",
														"nodeType": "YulBlock",
														"src": "14580:23:35",
														"statements": [
															{
																"nativeSrc": "14582:19:35",
																"nodeType": "YulAssignment",
																"src": "14582:19:35",
																"value": {
																	"name": "data",
																	"nativeSrc": "14597:4:35",
																	"nodeType": "YulIdentifier",
																	"src": "14597:4:35"
																},
																"variableNames": [
																	{
																		"name": "deleteStart",
																		"nativeSrc": "14582:11:35",
																		"nodeType": "YulIdentifier",
																		"src": "14582:11:35"
																	}
																]
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "startIndex",
																"nativeSrc": "14562:10:35",
																"nodeType": "YulIdentifier",
																"src": "14562:10:35"
															},
															{
																"kind": "number",
																"nativeSrc": "14574:4:35",
																"nodeType": "YulLiteral",
																"src": "14574:4:35",
																"type": "",
																"value": "0x20"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "14559:2:35",
															"nodeType": "YulIdentifier",
															"src": "14559:2:35"
														},
														"nativeSrc": "14559:20:35",
														"nodeType": "YulFunctionCall",
														"src": "14559:20:35"
													},
													"nativeSrc": "14556:47:35",
													"nodeType": "YulIf",
													"src": "14556:47:35"
												},
												{
													"nativeSrc": "14616:41:35",
													"nodeType": "YulVariableDeclaration",
													"src": "14616:41:35",
													"value": {
														"arguments": [
															{
																"name": "data",
																"nativeSrc": "14630:4:35",
																"nodeType": "YulIdentifier",
																"src": "14630:4:35"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "14640:1:35",
																		"nodeType": "YulLiteral",
																		"src": "14640:1:35",
																		"type": "",
																		"value": "5"
																	},
																	{
																		"arguments": [
																			{
																				"name": "len",
																				"nativeSrc": "14647:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "14647:3:35"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "14652:2:35",
																				"nodeType": "YulLiteral",
																				"src": "14652:2:35",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "14643:3:35",
																			"nodeType": "YulIdentifier",
																			"src": "14643:3:35"
																		},
																		"nativeSrc": "14643:12:35",
																		"nodeType": "YulFunctionCall",
																		"src": "14643:12:35"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "14636:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "14636:3:35"
																},
																"nativeSrc": "14636:20:35",
																"nodeType": "YulFunctionCall",
																"src": "14636:20:35"
															}
														],
														"functionName": {
															"name": "add",
															"nativeSrc": "14626:3:35",
															"nodeType": "YulIdentifier",
															"src": "14626:3:35"
														},
														"nativeSrc": "14626:31:35",
														"nodeType": "YulFunctionCall",
														"src": "14626:31:35"
													},
													"variables": [
														{
															"name": "_1",
															"nativeSrc": "14620:2:35",
															"nodeType": "YulTypedName",
															"src": "14620:2:35",
															"type": ""
														}
													]
												},
												{
													"nativeSrc": "14670:24:35",
													"nodeType": "YulVariableDeclaration",
													"src": "14670:24:35",
													"value": {
														"name": "deleteStart",
														"nativeSrc": "14683:11:35",
														"nodeType": "YulIdentifier",
														"src": "14683:11:35"
													},
													"variables": [
														{
															"name": "start",
															"nativeSrc": "14674:5:35",
															"nodeType": "YulTypedName",
															"src": "14674:5:35",
															"type": ""
														}
													]
												},
												{
													"body": {
														"nativeSrc": "14768:20:35",
														"nodeType": "YulBlock",
														"src": "14768:20:35",
														"statements": [
															{
																"expression": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "14777:5:35",
																			"nodeType": "YulIdentifier",
																			"src": "14777:5:35"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "14784:1:35",
																			"nodeType": "YulLiteral",
																			"src": "14784:1:35",
																			"type": "",
																			"value": "0"
																		}
																	],
																	"functionName": {
																		"name": "sstore",
																		"nativeSrc": "14770:6:35",
																		"nodeType": "YulIdentifier",
																		"src": "14770:6:35"
																	},
																	"nativeSrc": "14770:16:35",
																	"nodeType": "YulFunctionCall",
																	"src": "14770:16:35"
																},
																"nativeSrc": "14770:16:35",
																"nodeType": "YulExpressionStatement",
																"src": "14770:16:35"
															}
														]
													},
													"condition": {
														"arguments": [
															{
																"name": "start",
																"nativeSrc": "14718:5:35",
																"nodeType": "YulIdentifier",
																"src": "14718:5:35"
															},
															{
																"name": "_1",
																"nativeSrc": "14725:2:35",
																"nodeType": "YulIdentifier",
																"src": "14725:2:35"
															}
														],
														"functionName": {
															"name": "lt",
															"nativeSrc": "14715:2:35",
															"nodeType": "YulIdentifier",
															"src": "14715:2:35"
														},
														"nativeSrc": "14715:13:35",
														"nodeType": "YulFunctionCall",
														"src": "14715:13:35"
													},
													"nativeSrc": "14707:81:35",
													"nodeType": "YulForLoop",
													"post": {
														"nativeSrc": "14729:26:35",
														"nodeType": "YulBlock",
														"src": "14729:26:35",
														"statements": [
															{
																"nativeSrc": "14731:22:35",
																"nodeType": "YulAssignment",
																"src": "14731:22:35",
																"value": {
																	"arguments": [
																		{
																			"name": "start",
																			"nativeSrc": "14744:5:35",
																			"nodeType": "YulIdentifier",
																			"src": "14744:5:35"
																		},
																		{
																			"kind": "number",
																			"nativeSrc": "14751:1:35",
																			"nodeType": "YulLiteral",
																			"src": "14751:1:35",
																			"type": "",
																			"value": "1"
																		}
																	],
																	"functionName": {
																		"name": "add",
																		"nativeSrc": "14740:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "14740:3:35"
																	},
																	"nativeSrc": "14740:13:35",
																	"nodeType": "YulFunctionCall",
																	"src": "14740:13:35"
																},
																"variableNames": [
																	{
																		"name": "start",
																		"nativeSrc": "14731:5:35",
																		"nodeType": "YulIdentifier",
																		"src": "14731:5:35"
																	}
																]
															}
														]
													},
													"pre": {
														"nativeSrc": "14711:3:35",
														"nodeType": "YulBlock",
														"src": "14711:3:35",
														"statements": []
													},
													"src": "14707:81:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "len",
													"nativeSrc": "14383:3:35",
													"nodeType": "YulIdentifier",
													"src": "14383:3:35"
												},
												{
													"kind": "number",
													"nativeSrc": "14388:2:35",
													"nodeType": "YulLiteral",
													"src": "14388:2:35",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "14380:2:35",
												"nodeType": "YulIdentifier",
												"src": "14380:2:35"
											},
											"nativeSrc": "14380:11:35",
											"nodeType": "YulFunctionCall",
											"src": "14380:11:35"
										},
										"nativeSrc": "14377:421:35",
										"nodeType": "YulIf",
										"src": "14377:421:35"
									}
								]
							},
							"name": "clean_up_bytearray_end_slots_string_storage",
							"nativeSrc": "14286:518:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "array",
									"nativeSrc": "14339:5:35",
									"nodeType": "YulTypedName",
									"src": "14339:5:35",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "14346:3:35",
									"nodeType": "YulTypedName",
									"src": "14346:3:35",
									"type": ""
								},
								{
									"name": "startIndex",
									"nativeSrc": "14351:10:35",
									"nodeType": "YulTypedName",
									"src": "14351:10:35",
									"type": ""
								}
							],
							"src": "14286:518:35"
						},
						{
							"body": {
								"nativeSrc": "14894:81:35",
								"nodeType": "YulBlock",
								"src": "14894:81:35",
								"statements": [
									{
										"nativeSrc": "14904:65:35",
										"nodeType": "YulAssignment",
										"src": "14904:65:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "data",
															"nativeSrc": "14919:4:35",
															"nodeType": "YulIdentifier",
															"src": "14919:4:35"
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "14937:1:35",
																					"nodeType": "YulLiteral",
																					"src": "14937:1:35",
																					"type": "",
																					"value": "3"
																				},
																				{
																					"name": "len",
																					"nativeSrc": "14940:3:35",
																					"nodeType": "YulIdentifier",
																					"src": "14940:3:35"
																				}
																			],
																			"functionName": {
																				"name": "shl",
																				"nativeSrc": "14933:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "14933:3:35"
																			},
																			"nativeSrc": "14933:11:35",
																			"nodeType": "YulFunctionCall",
																			"src": "14933:11:35"
																		},
																		{
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "14950:1:35",
																					"nodeType": "YulLiteral",
																					"src": "14950:1:35",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "not",
																				"nativeSrc": "14946:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "14946:3:35"
																			},
																			"nativeSrc": "14946:6:35",
																			"nodeType": "YulFunctionCall",
																			"src": "14946:6:35"
																		}
																	],
																	"functionName": {
																		"name": "shr",
																		"nativeSrc": "14929:3:35",
																		"nodeType": "YulIdentifier",
																		"src": "14929:3:35"
																	},
																	"nativeSrc": "14929:24:35",
																	"nodeType": "YulFunctionCall",
																	"src": "14929:24:35"
																}
															],
															"functionName": {
																"name": "not",
																"nativeSrc": "14925:3:35",
																"nodeType": "YulIdentifier",
																"src": "14925:3:35"
															},
															"nativeSrc": "14925:29:35",
															"nodeType": "YulFunctionCall",
															"src": "14925:29:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "14915:3:35",
														"nodeType": "YulIdentifier",
														"src": "14915:3:35"
													},
													"nativeSrc": "14915:40:35",
													"nodeType": "YulFunctionCall",
													"src": "14915:40:35"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "14961:1:35",
															"nodeType": "YulLiteral",
															"src": "14961:1:35",
															"type": "",
															"value": "1"
														},
														{
															"name": "len",
															"nativeSrc": "14964:3:35",
															"nodeType": "YulIdentifier",
															"src": "14964:3:35"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "14957:3:35",
														"nodeType": "YulIdentifier",
														"src": "14957:3:35"
													},
													"nativeSrc": "14957:11:35",
													"nodeType": "YulFunctionCall",
													"src": "14957:11:35"
												}
											],
											"functionName": {
												"name": "or",
												"nativeSrc": "14912:2:35",
												"nodeType": "YulIdentifier",
												"src": "14912:2:35"
											},
											"nativeSrc": "14912:57:35",
											"nodeType": "YulFunctionCall",
											"src": "14912:57:35"
										},
										"variableNames": [
											{
												"name": "used",
												"nativeSrc": "14904:4:35",
												"nodeType": "YulIdentifier",
												"src": "14904:4:35"
											}
										]
									}
								]
							},
							"name": "extract_used_part_and_set_length_of_short_byte_array",
							"nativeSrc": "14809:166:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "data",
									"nativeSrc": "14871:4:35",
									"nodeType": "YulTypedName",
									"src": "14871:4:35",
									"type": ""
								},
								{
									"name": "len",
									"nativeSrc": "14877:3:35",
									"nodeType": "YulTypedName",
									"src": "14877:3:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "used",
									"nativeSrc": "14885:4:35",
									"nodeType": "YulTypedName",
									"src": "14885:4:35",
									"type": ""
								}
							],
							"src": "14809:166:35"
						},
						{
							"body": {
								"nativeSrc": "15076:1249:35",
								"nodeType": "YulBlock",
								"src": "15076:1249:35",
								"statements": [
									{
										"nativeSrc": "15086:24:35",
										"nodeType": "YulVariableDeclaration",
										"src": "15086:24:35",
										"value": {
											"arguments": [
												{
													"name": "src",
													"nativeSrc": "15106:3:35",
													"nodeType": "YulIdentifier",
													"src": "15106:3:35"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "15100:5:35",
												"nodeType": "YulIdentifier",
												"src": "15100:5:35"
											},
											"nativeSrc": "15100:10:35",
											"nodeType": "YulFunctionCall",
											"src": "15100:10:35"
										},
										"variables": [
											{
												"name": "newLen",
												"nativeSrc": "15090:6:35",
												"nodeType": "YulTypedName",
												"src": "15090:6:35",
												"type": ""
											}
										]
									},
									{
										"body": {
											"nativeSrc": "15153:22:35",
											"nodeType": "YulBlock",
											"src": "15153:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x41",
															"nativeSrc": "15155:16:35",
															"nodeType": "YulIdentifier",
															"src": "15155:16:35"
														},
														"nativeSrc": "15155:18:35",
														"nodeType": "YulFunctionCall",
														"src": "15155:18:35"
													},
													"nativeSrc": "15155:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "15155:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "15125:6:35",
													"nodeType": "YulIdentifier",
													"src": "15125:6:35"
												},
												{
													"kind": "number",
													"nativeSrc": "15133:18:35",
													"nodeType": "YulLiteral",
													"src": "15133:18:35",
													"type": "",
													"value": "0xffffffffffffffff"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "15122:2:35",
												"nodeType": "YulIdentifier",
												"src": "15122:2:35"
											},
											"nativeSrc": "15122:30:35",
											"nodeType": "YulFunctionCall",
											"src": "15122:30:35"
										},
										"nativeSrc": "15119:56:35",
										"nodeType": "YulIf",
										"src": "15119:56:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "slot",
													"nativeSrc": "15228:4:35",
													"nodeType": "YulIdentifier",
													"src": "15228:4:35"
												},
												{
													"arguments": [
														{
															"arguments": [
																{
																	"name": "slot",
																	"nativeSrc": "15266:4:35",
																	"nodeType": "YulIdentifier",
																	"src": "15266:4:35"
																}
															],
															"functionName": {
																"name": "sload",
																"nativeSrc": "15260:5:35",
																"nodeType": "YulIdentifier",
																"src": "15260:5:35"
															},
															"nativeSrc": "15260:11:35",
															"nodeType": "YulFunctionCall",
															"src": "15260:11:35"
														}
													],
													"functionName": {
														"name": "extract_byte_array_length",
														"nativeSrc": "15234:25:35",
														"nodeType": "YulIdentifier",
														"src": "15234:25:35"
													},
													"nativeSrc": "15234:38:35",
													"nodeType": "YulFunctionCall",
													"src": "15234:38:35"
												},
												{
													"name": "newLen",
													"nativeSrc": "15274:6:35",
													"nodeType": "YulIdentifier",
													"src": "15274:6:35"
												}
											],
											"functionName": {
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "15184:43:35",
												"nodeType": "YulIdentifier",
												"src": "15184:43:35"
											},
											"nativeSrc": "15184:97:35",
											"nodeType": "YulFunctionCall",
											"src": "15184:97:35"
										},
										"nativeSrc": "15184:97:35",
										"nodeType": "YulExpressionStatement",
										"src": "15184:97:35"
									},
									{
										"nativeSrc": "15290:18:35",
										"nodeType": "YulVariableDeclaration",
										"src": "15290:18:35",
										"value": {
											"kind": "number",
											"nativeSrc": "15307:1:35",
											"nodeType": "YulLiteral",
											"src": "15307:1:35",
											"type": "",
											"value": "0"
										},
										"variables": [
											{
												"name": "srcOffset",
												"nativeSrc": "15294:9:35",
												"nodeType": "YulTypedName",
												"src": "15294:9:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "15317:23:35",
										"nodeType": "YulVariableDeclaration",
										"src": "15317:23:35",
										"value": {
											"kind": "number",
											"nativeSrc": "15336:4:35",
											"nodeType": "YulLiteral",
											"src": "15336:4:35",
											"type": "",
											"value": "0x20"
										},
										"variables": [
											{
												"name": "srcOffset_1",
												"nativeSrc": "15321:11:35",
												"nodeType": "YulTypedName",
												"src": "15321:11:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "15349:17:35",
										"nodeType": "YulAssignment",
										"src": "15349:17:35",
										"value": {
											"kind": "number",
											"nativeSrc": "15362:4:35",
											"nodeType": "YulLiteral",
											"src": "15362:4:35",
											"type": "",
											"value": "0x20"
										},
										"variableNames": [
											{
												"name": "srcOffset",
												"nativeSrc": "15349:9:35",
												"nodeType": "YulIdentifier",
												"src": "15349:9:35"
											}
										]
									},
									{
										"cases": [
											{
												"body": {
													"nativeSrc": "15412:656:35",
													"nodeType": "YulBlock",
													"src": "15412:656:35",
													"statements": [
														{
															"nativeSrc": "15426:35:35",
															"nodeType": "YulVariableDeclaration",
															"src": "15426:35:35",
															"value": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "15445:6:35",
																		"nodeType": "YulIdentifier",
																		"src": "15445:6:35"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "15457:2:35",
																				"nodeType": "YulLiteral",
																				"src": "15457:2:35",
																				"type": "",
																				"value": "31"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "15453:3:35",
																			"nodeType": "YulIdentifier",
																			"src": "15453:3:35"
																		},
																		"nativeSrc": "15453:7:35",
																		"nodeType": "YulFunctionCall",
																		"src": "15453:7:35"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "15441:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "15441:3:35"
																},
																"nativeSrc": "15441:20:35",
																"nodeType": "YulFunctionCall",
																"src": "15441:20:35"
															},
															"variables": [
																{
																	"name": "loopEnd",
																	"nativeSrc": "15430:7:35",
																	"nodeType": "YulTypedName",
																	"src": "15430:7:35",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "15474:49:35",
															"nodeType": "YulVariableDeclaration",
															"src": "15474:49:35",
															"value": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "15518:4:35",
																		"nodeType": "YulIdentifier",
																		"src": "15518:4:35"
																	}
																],
																"functionName": {
																	"name": "array_dataslot_string_storage",
																	"nativeSrc": "15488:29:35",
																	"nodeType": "YulIdentifier",
																	"src": "15488:29:35"
																},
																"nativeSrc": "15488:35:35",
																"nodeType": "YulFunctionCall",
																"src": "15488:35:35"
															},
															"variables": [
																{
																	"name": "dstPtr",
																	"nativeSrc": "15478:6:35",
																	"nodeType": "YulTypedName",
																	"src": "15478:6:35",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "15536:10:35",
															"nodeType": "YulVariableDeclaration",
															"src": "15536:10:35",
															"value": {
																"kind": "number",
																"nativeSrc": "15545:1:35",
																"nodeType": "YulLiteral",
																"src": "15545:1:35",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "15540:1:35",
																	"nodeType": "YulTypedName",
																	"src": "15540:1:35",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "15623:172:35",
																"nodeType": "YulBlock",
																"src": "15623:172:35",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "15648:6:35",
																					"nodeType": "YulIdentifier",
																					"src": "15648:6:35"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nativeSrc": "15666:3:35",
																									"nodeType": "YulIdentifier",
																									"src": "15666:3:35"
																								},
																								{
																									"name": "srcOffset",
																									"nativeSrc": "15671:9:35",
																									"nodeType": "YulIdentifier",
																									"src": "15671:9:35"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "15662:3:35",
																								"nodeType": "YulIdentifier",
																								"src": "15662:3:35"
																							},
																							"nativeSrc": "15662:19:35",
																							"nodeType": "YulFunctionCall",
																							"src": "15662:19:35"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "15656:5:35",
																						"nodeType": "YulIdentifier",
																						"src": "15656:5:35"
																					},
																					"nativeSrc": "15656:26:35",
																					"nodeType": "YulFunctionCall",
																					"src": "15656:26:35"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "15641:6:35",
																				"nodeType": "YulIdentifier",
																				"src": "15641:6:35"
																			},
																			"nativeSrc": "15641:42:35",
																			"nodeType": "YulFunctionCall",
																			"src": "15641:42:35"
																		},
																		"nativeSrc": "15641:42:35",
																		"nodeType": "YulExpressionStatement",
																		"src": "15641:42:35"
																	},
																	{
																		"nativeSrc": "15700:24:35",
																		"nodeType": "YulAssignment",
																		"src": "15700:24:35",
																		"value": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "15714:6:35",
																					"nodeType": "YulIdentifier",
																					"src": "15714:6:35"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "15722:1:35",
																					"nodeType": "YulLiteral",
																					"src": "15722:1:35",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "15710:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "15710:3:35"
																			},
																			"nativeSrc": "15710:14:35",
																			"nodeType": "YulFunctionCall",
																			"src": "15710:14:35"
																		},
																		"variableNames": [
																			{
																				"name": "dstPtr",
																				"nativeSrc": "15700:6:35",
																				"nodeType": "YulIdentifier",
																				"src": "15700:6:35"
																			}
																		]
																	},
																	{
																		"nativeSrc": "15741:40:35",
																		"nodeType": "YulAssignment",
																		"src": "15741:40:35",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcOffset",
																					"nativeSrc": "15758:9:35",
																					"nodeType": "YulIdentifier",
																					"src": "15758:9:35"
																				},
																				{
																					"name": "srcOffset_1",
																					"nativeSrc": "15769:11:35",
																					"nodeType": "YulIdentifier",
																					"src": "15769:11:35"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "15754:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "15754:3:35"
																			},
																			"nativeSrc": "15754:27:35",
																			"nodeType": "YulFunctionCall",
																			"src": "15754:27:35"
																		},
																		"variableNames": [
																			{
																				"name": "srcOffset",
																				"nativeSrc": "15741:9:35",
																				"nodeType": "YulIdentifier",
																				"src": "15741:9:35"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "15570:1:35",
																		"nodeType": "YulIdentifier",
																		"src": "15570:1:35"
																	},
																	{
																		"name": "loopEnd",
																		"nativeSrc": "15573:7:35",
																		"nodeType": "YulIdentifier",
																		"src": "15573:7:35"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "15567:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "15567:2:35"
																},
																"nativeSrc": "15567:14:35",
																"nodeType": "YulFunctionCall",
																"src": "15567:14:35"
															},
															"nativeSrc": "15559:236:35",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "15582:28:35",
																"nodeType": "YulBlock",
																"src": "15582:28:35",
																"statements": [
																	{
																		"nativeSrc": "15584:24:35",
																		"nodeType": "YulAssignment",
																		"src": "15584:24:35",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "15593:1:35",
																					"nodeType": "YulIdentifier",
																					"src": "15593:1:35"
																				},
																				{
																					"name": "srcOffset_1",
																					"nativeSrc": "15596:11:35",
																					"nodeType": "YulIdentifier",
																					"src": "15596:11:35"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "15589:3:35",
																				"nodeType": "YulIdentifier",
																				"src": "15589:3:35"
																			},
																			"nativeSrc": "15589:19:35",
																			"nodeType": "YulFunctionCall",
																			"src": "15589:19:35"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "15584:1:35",
																				"nodeType": "YulIdentifier",
																				"src": "15584:1:35"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "15563:3:35",
																"nodeType": "YulBlock",
																"src": "15563:3:35",
																"statements": []
															},
															"src": "15559:236:35"
														},
														{
															"body": {
																"nativeSrc": "15843:166:35",
																"nodeType": "YulBlock",
																"src": "15843:166:35",
																"statements": [
																	{
																		"nativeSrc": "15861:43:35",
																		"nodeType": "YulVariableDeclaration",
																		"src": "15861:43:35",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "15888:3:35",
																							"nodeType": "YulIdentifier",
																							"src": "15888:3:35"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "15893:9:35",
																							"nodeType": "YulIdentifier",
																							"src": "15893:9:35"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "15884:3:35",
																						"nodeType": "YulIdentifier",
																						"src": "15884:3:35"
																					},
																					"nativeSrc": "15884:19:35",
																					"nodeType": "YulFunctionCall",
																					"src": "15884:19:35"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "15878:5:35",
																				"nodeType": "YulIdentifier",
																				"src": "15878:5:35"
																			},
																			"nativeSrc": "15878:26:35",
																			"nodeType": "YulFunctionCall",
																			"src": "15878:26:35"
																		},
																		"variables": [
																			{
																				"name": "lastValue",
																				"nativeSrc": "15865:9:35",
																				"nodeType": "YulTypedName",
																				"src": "15865:9:35",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dstPtr",
																					"nativeSrc": "15928:6:35",
																					"nodeType": "YulIdentifier",
																					"src": "15928:6:35"
																				},
																				{
																					"arguments": [
																						{
																							"name": "lastValue",
																							"nativeSrc": "15940:9:35",
																							"nodeType": "YulIdentifier",
																							"src": "15940:9:35"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nativeSrc": "15967:1:35",
																															"nodeType": "YulLiteral",
																															"src": "15967:1:35",
																															"type": "",
																															"value": "3"
																														},
																														{
																															"name": "newLen",
																															"nativeSrc": "15970:6:35",
																															"nodeType": "YulIdentifier",
																															"src": "15970:6:35"
																														}
																													],
																													"functionName": {
																														"name": "shl",
																														"nativeSrc": "15963:3:35",
																														"nodeType": "YulIdentifier",
																														"src": "15963:3:35"
																													},
																													"nativeSrc": "15963:14:35",
																													"nodeType": "YulFunctionCall",
																													"src": "15963:14:35"
																												},
																												{
																													"kind": "number",
																													"nativeSrc": "15979:3:35",
																													"nodeType": "YulLiteral",
																													"src": "15979:3:35",
																													"type": "",
																													"value": "248"
																												}
																											],
																											"functionName": {
																												"name": "and",
																												"nativeSrc": "15959:3:35",
																												"nodeType": "YulIdentifier",
																												"src": "15959:3:35"
																											},
																											"nativeSrc": "15959:24:35",
																											"nodeType": "YulFunctionCall",
																											"src": "15959:24:35"
																										},
																										{
																											"arguments": [
																												{
																													"kind": "number",
																													"nativeSrc": "15989:1:35",
																													"nodeType": "YulLiteral",
																													"src": "15989:1:35",
																													"type": "",
																													"value": "0"
																												}
																											],
																											"functionName": {
																												"name": "not",
																												"nativeSrc": "15985:3:35",
																												"nodeType": "YulIdentifier",
																												"src": "15985:3:35"
																											},
																											"nativeSrc": "15985:6:35",
																											"nodeType": "YulFunctionCall",
																											"src": "15985:6:35"
																										}
																									],
																									"functionName": {
																										"name": "shr",
																										"nativeSrc": "15955:3:35",
																										"nodeType": "YulIdentifier",
																										"src": "15955:3:35"
																									},
																									"nativeSrc": "15955:37:35",
																									"nodeType": "YulFunctionCall",
																									"src": "15955:37:35"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "15951:3:35",
																								"nodeType": "YulIdentifier",
																								"src": "15951:3:35"
																							},
																							"nativeSrc": "15951:42:35",
																							"nodeType": "YulFunctionCall",
																							"src": "15951:42:35"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "15936:3:35",
																						"nodeType": "YulIdentifier",
																						"src": "15936:3:35"
																					},
																					"nativeSrc": "15936:58:35",
																					"nodeType": "YulFunctionCall",
																					"src": "15936:58:35"
																				}
																			],
																			"functionName": {
																				"name": "sstore",
																				"nativeSrc": "15921:6:35",
																				"nodeType": "YulIdentifier",
																				"src": "15921:6:35"
																			},
																			"nativeSrc": "15921:74:35",
																			"nodeType": "YulFunctionCall",
																			"src": "15921:74:35"
																		},
																		"nativeSrc": "15921:74:35",
																		"nodeType": "YulExpressionStatement",
																		"src": "15921:74:35"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "loopEnd",
																		"nativeSrc": "15814:7:35",
																		"nodeType": "YulIdentifier",
																		"src": "15814:7:35"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "15823:6:35",
																		"nodeType": "YulIdentifier",
																		"src": "15823:6:35"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "15811:2:35",
																	"nodeType": "YulIdentifier",
																	"src": "15811:2:35"
																},
																"nativeSrc": "15811:19:35",
																"nodeType": "YulFunctionCall",
																"src": "15811:19:35"
															},
															"nativeSrc": "15808:201:35",
															"nodeType": "YulIf",
															"src": "15808:201:35"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "16029:4:35",
																		"nodeType": "YulIdentifier",
																		"src": "16029:4:35"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "16043:1:35",
																						"nodeType": "YulLiteral",
																						"src": "16043:1:35",
																						"type": "",
																						"value": "1"
																					},
																					{
																						"name": "newLen",
																						"nativeSrc": "16046:6:35",
																						"nodeType": "YulIdentifier",
																						"src": "16046:6:35"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "16039:3:35",
																					"nodeType": "YulIdentifier",
																					"src": "16039:3:35"
																				},
																				"nativeSrc": "16039:14:35",
																				"nodeType": "YulFunctionCall",
																				"src": "16039:14:35"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "16055:1:35",
																				"nodeType": "YulLiteral",
																				"src": "16055:1:35",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "16035:3:35",
																			"nodeType": "YulIdentifier",
																			"src": "16035:3:35"
																		},
																		"nativeSrc": "16035:22:35",
																		"nodeType": "YulFunctionCall",
																		"src": "16035:22:35"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "16022:6:35",
																	"nodeType": "YulIdentifier",
																	"src": "16022:6:35"
																},
																"nativeSrc": "16022:36:35",
																"nodeType": "YulFunctionCall",
																"src": "16022:36:35"
															},
															"nativeSrc": "16022:36:35",
															"nodeType": "YulExpressionStatement",
															"src": "16022:36:35"
														}
													]
												},
												"nativeSrc": "15405:663:35",
												"nodeType": "YulCase",
												"src": "15405:663:35",
												"value": {
													"kind": "number",
													"nativeSrc": "15410:1:35",
													"nodeType": "YulLiteral",
													"src": "15410:1:35",
													"type": "",
													"value": "1"
												}
											},
											{
												"body": {
													"nativeSrc": "16085:234:35",
													"nodeType": "YulBlock",
													"src": "16085:234:35",
													"statements": [
														{
															"nativeSrc": "16099:14:35",
															"nodeType": "YulVariableDeclaration",
															"src": "16099:14:35",
															"value": {
																"kind": "number",
																"nativeSrc": "16112:1:35",
																"nodeType": "YulLiteral",
																"src": "16112:1:35",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "16103:5:35",
																	"nodeType": "YulTypedName",
																	"src": "16103:5:35",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "16148:67:35",
																"nodeType": "YulBlock",
																"src": "16148:67:35",
																"statements": [
																	{
																		"nativeSrc": "16166:35:35",
																		"nodeType": "YulAssignment",
																		"src": "16166:35:35",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nativeSrc": "16185:3:35",
																							"nodeType": "YulIdentifier",
																							"src": "16185:3:35"
																						},
																						{
																							"name": "srcOffset",
																							"nativeSrc": "16190:9:35",
																							"nodeType": "YulIdentifier",
																							"src": "16190:9:35"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "16181:3:35",
																						"nodeType": "YulIdentifier",
																						"src": "16181:3:35"
																					},
																					"nativeSrc": "16181:19:35",
																					"nodeType": "YulFunctionCall",
																					"src": "16181:19:35"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "16175:5:35",
																				"nodeType": "YulIdentifier",
																				"src": "16175:5:35"
																			},
																			"nativeSrc": "16175:26:35",
																			"nodeType": "YulFunctionCall",
																			"src": "16175:26:35"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "16166:5:35",
																				"nodeType": "YulIdentifier",
																				"src": "16166:5:35"
																			}
																		]
																	}
																]
															},
															"condition": {
																"name": "newLen",
																"nativeSrc": "16129:6:35",
																"nodeType": "YulIdentifier",
																"src": "16129:6:35"
															},
															"nativeSrc": "16126:89:35",
															"nodeType": "YulIf",
															"src": "16126:89:35"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "16235:4:35",
																		"nodeType": "YulIdentifier",
																		"src": "16235:4:35"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "16294:5:35",
																				"nodeType": "YulIdentifier",
																				"src": "16294:5:35"
																			},
																			{
																				"name": "newLen",
																				"nativeSrc": "16301:6:35",
																				"nodeType": "YulIdentifier",
																				"src": "16301:6:35"
																			}
																		],
																		"functionName": {
																			"name": "extract_used_part_and_set_length_of_short_byte_array",
																			"nativeSrc": "16241:52:35",
																			"nodeType": "YulIdentifier",
																			"src": "16241:52:35"
																		},
																		"nativeSrc": "16241:67:35",
																		"nodeType": "YulFunctionCall",
																		"src": "16241:67:35"
																	}
																],
																"functionName": {
																	"name": "sstore",
																	"nativeSrc": "16228:6:35",
																	"nodeType": "YulIdentifier",
																	"src": "16228:6:35"
																},
																"nativeSrc": "16228:81:35",
																"nodeType": "YulFunctionCall",
																"src": "16228:81:35"
															},
															"nativeSrc": "16228:81:35",
															"nodeType": "YulExpressionStatement",
															"src": "16228:81:35"
														}
													]
												},
												"nativeSrc": "16077:242:35",
												"nodeType": "YulCase",
												"src": "16077:242:35",
												"value": "default"
											}
										],
										"expression": {
											"arguments": [
												{
													"name": "newLen",
													"nativeSrc": "15385:6:35",
													"nodeType": "YulIdentifier",
													"src": "15385:6:35"
												},
												{
													"kind": "number",
													"nativeSrc": "15393:2:35",
													"nodeType": "YulLiteral",
													"src": "15393:2:35",
													"type": "",
													"value": "31"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "15382:2:35",
												"nodeType": "YulIdentifier",
												"src": "15382:2:35"
											},
											"nativeSrc": "15382:14:35",
											"nodeType": "YulFunctionCall",
											"src": "15382:14:35"
										},
										"nativeSrc": "15375:944:35",
										"nodeType": "YulSwitch",
										"src": "15375:944:35"
									}
								]
							},
							"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
							"nativeSrc": "14980:1345:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "slot",
									"nativeSrc": "15061:4:35",
									"nodeType": "YulTypedName",
									"src": "15061:4:35",
									"type": ""
								},
								{
									"name": "src",
									"nativeSrc": "15067:3:35",
									"nodeType": "YulTypedName",
									"src": "15067:3:35",
									"type": ""
								}
							],
							"src": "14980:1345:35"
						},
						{
							"body": {
								"nativeSrc": "16459:119:35",
								"nodeType": "YulBlock",
								"src": "16459:119:35",
								"statements": [
									{
										"nativeSrc": "16469:26:35",
										"nodeType": "YulAssignment",
										"src": "16469:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "16481:9:35",
													"nodeType": "YulIdentifier",
													"src": "16481:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "16492:2:35",
													"nodeType": "YulLiteral",
													"src": "16492:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "16477:3:35",
												"nodeType": "YulIdentifier",
												"src": "16477:3:35"
											},
											"nativeSrc": "16477:18:35",
											"nodeType": "YulFunctionCall",
											"src": "16477:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "16469:4:35",
												"nodeType": "YulIdentifier",
												"src": "16469:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "16511:9:35",
													"nodeType": "YulIdentifier",
													"src": "16511:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "16522:6:35",
													"nodeType": "YulIdentifier",
													"src": "16522:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16504:6:35",
												"nodeType": "YulIdentifier",
												"src": "16504:6:35"
											},
											"nativeSrc": "16504:25:35",
											"nodeType": "YulFunctionCall",
											"src": "16504:25:35"
										},
										"nativeSrc": "16504:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "16504:25:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "16549:9:35",
															"nodeType": "YulIdentifier",
															"src": "16549:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "16560:2:35",
															"nodeType": "YulLiteral",
															"src": "16560:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "16545:3:35",
														"nodeType": "YulIdentifier",
														"src": "16545:3:35"
													},
													"nativeSrc": "16545:18:35",
													"nodeType": "YulFunctionCall",
													"src": "16545:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "16565:6:35",
													"nodeType": "YulIdentifier",
													"src": "16565:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16538:6:35",
												"nodeType": "YulIdentifier",
												"src": "16538:6:35"
											},
											"nativeSrc": "16538:34:35",
											"nodeType": "YulFunctionCall",
											"src": "16538:34:35"
										},
										"nativeSrc": "16538:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "16538:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
							"nativeSrc": "16330:248:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16420:9:35",
									"nodeType": "YulTypedName",
									"src": "16420:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "16431:6:35",
									"nodeType": "YulTypedName",
									"src": "16431:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "16439:6:35",
									"nodeType": "YulTypedName",
									"src": "16439:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "16450:4:35",
									"nodeType": "YulTypedName",
									"src": "16450:4:35",
									"type": ""
								}
							],
							"src": "16330:248:35"
						},
						{
							"body": {
								"nativeSrc": "16719:130:35",
								"nodeType": "YulBlock",
								"src": "16719:130:35",
								"statements": [
									{
										"nativeSrc": "16729:26:35",
										"nodeType": "YulAssignment",
										"src": "16729:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "16741:9:35",
													"nodeType": "YulIdentifier",
													"src": "16741:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "16752:2:35",
													"nodeType": "YulLiteral",
													"src": "16752:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "16737:3:35",
												"nodeType": "YulIdentifier",
												"src": "16737:3:35"
											},
											"nativeSrc": "16737:18:35",
											"nodeType": "YulFunctionCall",
											"src": "16737:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "16729:4:35",
												"nodeType": "YulIdentifier",
												"src": "16729:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "16771:9:35",
													"nodeType": "YulIdentifier",
													"src": "16771:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "16786:6:35",
															"nodeType": "YulIdentifier",
															"src": "16786:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "16794:4:35",
															"nodeType": "YulLiteral",
															"src": "16794:4:35",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "16782:3:35",
														"nodeType": "YulIdentifier",
														"src": "16782:3:35"
													},
													"nativeSrc": "16782:17:35",
													"nodeType": "YulFunctionCall",
													"src": "16782:17:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16764:6:35",
												"nodeType": "YulIdentifier",
												"src": "16764:6:35"
											},
											"nativeSrc": "16764:36:35",
											"nodeType": "YulFunctionCall",
											"src": "16764:36:35"
										},
										"nativeSrc": "16764:36:35",
										"nodeType": "YulExpressionStatement",
										"src": "16764:36:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "16820:9:35",
															"nodeType": "YulIdentifier",
															"src": "16820:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "16831:2:35",
															"nodeType": "YulLiteral",
															"src": "16831:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "16816:3:35",
														"nodeType": "YulIdentifier",
														"src": "16816:3:35"
													},
													"nativeSrc": "16816:18:35",
													"nodeType": "YulFunctionCall",
													"src": "16816:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "16836:6:35",
													"nodeType": "YulIdentifier",
													"src": "16836:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "16809:6:35",
												"nodeType": "YulIdentifier",
												"src": "16809:6:35"
											},
											"nativeSrc": "16809:34:35",
											"nodeType": "YulFunctionCall",
											"src": "16809:34:35"
										},
										"nativeSrc": "16809:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "16809:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_32_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "16583:266:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16680:9:35",
									"nodeType": "YulTypedName",
									"src": "16680:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "16691:6:35",
									"nodeType": "YulTypedName",
									"src": "16691:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "16699:6:35",
									"nodeType": "YulTypedName",
									"src": "16699:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "16710:4:35",
									"nodeType": "YulTypedName",
									"src": "16710:4:35",
									"type": ""
								}
							],
							"src": "16583:266:35"
						},
						{
							"body": {
								"nativeSrc": "17035:217:35",
								"nodeType": "YulBlock",
								"src": "17035:217:35",
								"statements": [
									{
										"nativeSrc": "17045:27:35",
										"nodeType": "YulAssignment",
										"src": "17045:27:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "17057:9:35",
													"nodeType": "YulIdentifier",
													"src": "17057:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "17068:3:35",
													"nodeType": "YulLiteral",
													"src": "17068:3:35",
													"type": "",
													"value": "128"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "17053:3:35",
												"nodeType": "YulIdentifier",
												"src": "17053:3:35"
											},
											"nativeSrc": "17053:19:35",
											"nodeType": "YulFunctionCall",
											"src": "17053:19:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "17045:4:35",
												"nodeType": "YulIdentifier",
												"src": "17045:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "17088:9:35",
													"nodeType": "YulIdentifier",
													"src": "17088:9:35"
												},
												{
													"name": "value0",
													"nativeSrc": "17099:6:35",
													"nodeType": "YulIdentifier",
													"src": "17099:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17081:6:35",
												"nodeType": "YulIdentifier",
												"src": "17081:6:35"
											},
											"nativeSrc": "17081:25:35",
											"nodeType": "YulFunctionCall",
											"src": "17081:25:35"
										},
										"nativeSrc": "17081:25:35",
										"nodeType": "YulExpressionStatement",
										"src": "17081:25:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17126:9:35",
															"nodeType": "YulIdentifier",
															"src": "17126:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "17137:2:35",
															"nodeType": "YulLiteral",
															"src": "17137:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17122:3:35",
														"nodeType": "YulIdentifier",
														"src": "17122:3:35"
													},
													"nativeSrc": "17122:18:35",
													"nodeType": "YulFunctionCall",
													"src": "17122:18:35"
												},
												{
													"arguments": [
														{
															"name": "value1",
															"nativeSrc": "17146:6:35",
															"nodeType": "YulIdentifier",
															"src": "17146:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "17154:4:35",
															"nodeType": "YulLiteral",
															"src": "17154:4:35",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "17142:3:35",
														"nodeType": "YulIdentifier",
														"src": "17142:3:35"
													},
													"nativeSrc": "17142:17:35",
													"nodeType": "YulFunctionCall",
													"src": "17142:17:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17115:6:35",
												"nodeType": "YulIdentifier",
												"src": "17115:6:35"
											},
											"nativeSrc": "17115:45:35",
											"nodeType": "YulFunctionCall",
											"src": "17115:45:35"
										},
										"nativeSrc": "17115:45:35",
										"nodeType": "YulExpressionStatement",
										"src": "17115:45:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17180:9:35",
															"nodeType": "YulIdentifier",
															"src": "17180:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "17191:2:35",
															"nodeType": "YulLiteral",
															"src": "17191:2:35",
															"type": "",
															"value": "64"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17176:3:35",
														"nodeType": "YulIdentifier",
														"src": "17176:3:35"
													},
													"nativeSrc": "17176:18:35",
													"nodeType": "YulFunctionCall",
													"src": "17176:18:35"
												},
												{
													"name": "value2",
													"nativeSrc": "17196:6:35",
													"nodeType": "YulIdentifier",
													"src": "17196:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17169:6:35",
												"nodeType": "YulIdentifier",
												"src": "17169:6:35"
											},
											"nativeSrc": "17169:34:35",
											"nodeType": "YulFunctionCall",
											"src": "17169:34:35"
										},
										"nativeSrc": "17169:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "17169:34:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "17223:9:35",
															"nodeType": "YulIdentifier",
															"src": "17223:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "17234:2:35",
															"nodeType": "YulLiteral",
															"src": "17234:2:35",
															"type": "",
															"value": "96"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17219:3:35",
														"nodeType": "YulIdentifier",
														"src": "17219:3:35"
													},
													"nativeSrc": "17219:18:35",
													"nodeType": "YulFunctionCall",
													"src": "17219:18:35"
												},
												{
													"name": "value3",
													"nativeSrc": "17239:6:35",
													"nodeType": "YulIdentifier",
													"src": "17239:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17212:6:35",
												"nodeType": "YulIdentifier",
												"src": "17212:6:35"
											},
											"nativeSrc": "17212:34:35",
											"nodeType": "YulFunctionCall",
											"src": "17212:34:35"
										},
										"nativeSrc": "17212:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "17212:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
							"nativeSrc": "16854:398:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "16980:9:35",
									"nodeType": "YulTypedName",
									"src": "16980:9:35",
									"type": ""
								},
								{
									"name": "value3",
									"nativeSrc": "16991:6:35",
									"nodeType": "YulTypedName",
									"src": "16991:6:35",
									"type": ""
								},
								{
									"name": "value2",
									"nativeSrc": "16999:6:35",
									"nodeType": "YulTypedName",
									"src": "16999:6:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "17007:6:35",
									"nodeType": "YulTypedName",
									"src": "17007:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "17015:6:35",
									"nodeType": "YulTypedName",
									"src": "17015:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "17026:4:35",
									"nodeType": "YulTypedName",
									"src": "17026:4:35",
									"type": ""
								}
							],
							"src": "16854:398:35"
						},
						{
							"body": {
								"nativeSrc": "17289:95:35",
								"nodeType": "YulBlock",
								"src": "17289:95:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "17306:1:35",
													"nodeType": "YulLiteral",
													"src": "17306:1:35",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "17313:3:35",
															"nodeType": "YulLiteral",
															"src": "17313:3:35",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "17318:10:35",
															"nodeType": "YulLiteral",
															"src": "17318:10:35",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "17309:3:35",
														"nodeType": "YulIdentifier",
														"src": "17309:3:35"
													},
													"nativeSrc": "17309:20:35",
													"nodeType": "YulFunctionCall",
													"src": "17309:20:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17299:6:35",
												"nodeType": "YulIdentifier",
												"src": "17299:6:35"
											},
											"nativeSrc": "17299:31:35",
											"nodeType": "YulFunctionCall",
											"src": "17299:31:35"
										},
										"nativeSrc": "17299:31:35",
										"nodeType": "YulExpressionStatement",
										"src": "17299:31:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "17346:1:35",
													"nodeType": "YulLiteral",
													"src": "17346:1:35",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "17349:4:35",
													"nodeType": "YulLiteral",
													"src": "17349:4:35",
													"type": "",
													"value": "0x21"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17339:6:35",
												"nodeType": "YulIdentifier",
												"src": "17339:6:35"
											},
											"nativeSrc": "17339:15:35",
											"nodeType": "YulFunctionCall",
											"src": "17339:15:35"
										},
										"nativeSrc": "17339:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "17339:15:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "17370:1:35",
													"nodeType": "YulLiteral",
													"src": "17370:1:35",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "17373:4:35",
													"nodeType": "YulLiteral",
													"src": "17373:4:35",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "17363:6:35",
												"nodeType": "YulIdentifier",
												"src": "17363:6:35"
											},
											"nativeSrc": "17363:15:35",
											"nodeType": "YulFunctionCall",
											"src": "17363:15:35"
										},
										"nativeSrc": "17363:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "17363:15:35"
									}
								]
							},
							"name": "panic_error_0x21",
							"nativeSrc": "17257:127:35",
							"nodeType": "YulFunctionDefinition",
							"src": "17257:127:35"
						},
						{
							"body": {
								"nativeSrc": "17421:95:35",
								"nodeType": "YulBlock",
								"src": "17421:95:35",
								"statements": [
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "17438:1:35",
													"nodeType": "YulLiteral",
													"src": "17438:1:35",
													"type": "",
													"value": "0"
												},
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "17445:3:35",
															"nodeType": "YulLiteral",
															"src": "17445:3:35",
															"type": "",
															"value": "224"
														},
														{
															"kind": "number",
															"nativeSrc": "17450:10:35",
															"nodeType": "YulLiteral",
															"src": "17450:10:35",
															"type": "",
															"value": "0x4e487b71"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "17441:3:35",
														"nodeType": "YulIdentifier",
														"src": "17441:3:35"
													},
													"nativeSrc": "17441:20:35",
													"nodeType": "YulFunctionCall",
													"src": "17441:20:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17431:6:35",
												"nodeType": "YulIdentifier",
												"src": "17431:6:35"
											},
											"nativeSrc": "17431:31:35",
											"nodeType": "YulFunctionCall",
											"src": "17431:31:35"
										},
										"nativeSrc": "17431:31:35",
										"nodeType": "YulExpressionStatement",
										"src": "17431:31:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "17478:1:35",
													"nodeType": "YulLiteral",
													"src": "17478:1:35",
													"type": "",
													"value": "4"
												},
												{
													"kind": "number",
													"nativeSrc": "17481:4:35",
													"nodeType": "YulLiteral",
													"src": "17481:4:35",
													"type": "",
													"value": "0x32"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "17471:6:35",
												"nodeType": "YulIdentifier",
												"src": "17471:6:35"
											},
											"nativeSrc": "17471:15:35",
											"nodeType": "YulFunctionCall",
											"src": "17471:15:35"
										},
										"nativeSrc": "17471:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "17471:15:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"kind": "number",
													"nativeSrc": "17502:1:35",
													"nodeType": "YulLiteral",
													"src": "17502:1:35",
													"type": "",
													"value": "0"
												},
												{
													"kind": "number",
													"nativeSrc": "17505:4:35",
													"nodeType": "YulLiteral",
													"src": "17505:4:35",
													"type": "",
													"value": "0x24"
												}
											],
											"functionName": {
												"name": "revert",
												"nativeSrc": "17495:6:35",
												"nodeType": "YulIdentifier",
												"src": "17495:6:35"
											},
											"nativeSrc": "17495:15:35",
											"nodeType": "YulFunctionCall",
											"src": "17495:15:35"
										},
										"nativeSrc": "17495:15:35",
										"nodeType": "YulExpressionStatement",
										"src": "17495:15:35"
									}
								]
							},
							"name": "panic_error_0x32",
							"nativeSrc": "17389:127:35",
							"nodeType": "YulFunctionDefinition",
							"src": "17389:127:35"
						},
						{
							"body": {
								"nativeSrc": "17567:171:35",
								"nodeType": "YulBlock",
								"src": "17567:171:35",
								"statements": [
									{
										"body": {
											"nativeSrc": "17598:111:35",
											"nodeType": "YulBlock",
											"src": "17598:111:35",
											"statements": [
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "17619:1:35",
																"nodeType": "YulLiteral",
																"src": "17619:1:35",
																"type": "",
																"value": "0"
															},
															{
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "17626:3:35",
																		"nodeType": "YulLiteral",
																		"src": "17626:3:35",
																		"type": "",
																		"value": "224"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "17631:10:35",
																		"nodeType": "YulLiteral",
																		"src": "17631:10:35",
																		"type": "",
																		"value": "0x4e487b71"
																	}
																],
																"functionName": {
																	"name": "shl",
																	"nativeSrc": "17622:3:35",
																	"nodeType": "YulIdentifier",
																	"src": "17622:3:35"
																},
																"nativeSrc": "17622:20:35",
																"nodeType": "YulFunctionCall",
																"src": "17622:20:35"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "17612:6:35",
															"nodeType": "YulIdentifier",
															"src": "17612:6:35"
														},
														"nativeSrc": "17612:31:35",
														"nodeType": "YulFunctionCall",
														"src": "17612:31:35"
													},
													"nativeSrc": "17612:31:35",
													"nodeType": "YulExpressionStatement",
													"src": "17612:31:35"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "17663:1:35",
																"nodeType": "YulLiteral",
																"src": "17663:1:35",
																"type": "",
																"value": "4"
															},
															{
																"kind": "number",
																"nativeSrc": "17666:4:35",
																"nodeType": "YulLiteral",
																"src": "17666:4:35",
																"type": "",
																"value": "0x12"
															}
														],
														"functionName": {
															"name": "mstore",
															"nativeSrc": "17656:6:35",
															"nodeType": "YulIdentifier",
															"src": "17656:6:35"
														},
														"nativeSrc": "17656:15:35",
														"nodeType": "YulFunctionCall",
														"src": "17656:15:35"
													},
													"nativeSrc": "17656:15:35",
													"nodeType": "YulExpressionStatement",
													"src": "17656:15:35"
												},
												{
													"expression": {
														"arguments": [
															{
																"kind": "number",
																"nativeSrc": "17691:1:35",
																"nodeType": "YulLiteral",
																"src": "17691:1:35",
																"type": "",
																"value": "0"
															},
															{
																"kind": "number",
																"nativeSrc": "17694:4:35",
																"nodeType": "YulLiteral",
																"src": "17694:4:35",
																"type": "",
																"value": "0x24"
															}
														],
														"functionName": {
															"name": "revert",
															"nativeSrc": "17684:6:35",
															"nodeType": "YulIdentifier",
															"src": "17684:6:35"
														},
														"nativeSrc": "17684:15:35",
														"nodeType": "YulFunctionCall",
														"src": "17684:15:35"
													},
													"nativeSrc": "17684:15:35",
													"nodeType": "YulExpressionStatement",
													"src": "17684:15:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "y",
													"nativeSrc": "17587:1:35",
													"nodeType": "YulIdentifier",
													"src": "17587:1:35"
												}
											],
											"functionName": {
												"name": "iszero",
												"nativeSrc": "17580:6:35",
												"nodeType": "YulIdentifier",
												"src": "17580:6:35"
											},
											"nativeSrc": "17580:9:35",
											"nodeType": "YulFunctionCall",
											"src": "17580:9:35"
										},
										"nativeSrc": "17577:132:35",
										"nodeType": "YulIf",
										"src": "17577:132:35"
									},
									{
										"nativeSrc": "17718:14:35",
										"nodeType": "YulAssignment",
										"src": "17718:14:35",
										"value": {
											"arguments": [
												{
													"name": "x",
													"nativeSrc": "17727:1:35",
													"nodeType": "YulIdentifier",
													"src": "17727:1:35"
												},
												{
													"name": "y",
													"nativeSrc": "17730:1:35",
													"nodeType": "YulIdentifier",
													"src": "17730:1:35"
												}
											],
											"functionName": {
												"name": "div",
												"nativeSrc": "17723:3:35",
												"nodeType": "YulIdentifier",
												"src": "17723:3:35"
											},
											"nativeSrc": "17723:9:35",
											"nodeType": "YulFunctionCall",
											"src": "17723:9:35"
										},
										"variableNames": [
											{
												"name": "r",
												"nativeSrc": "17718:1:35",
												"nodeType": "YulIdentifier",
												"src": "17718:1:35"
											}
										]
									}
								]
							},
							"name": "checked_div_t_uint256",
							"nativeSrc": "17521:217:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "17552:1:35",
									"nodeType": "YulTypedName",
									"src": "17552:1:35",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "17555:1:35",
									"nodeType": "YulTypedName",
									"src": "17555:1:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "r",
									"nativeSrc": "17561:1:35",
									"nodeType": "YulTypedName",
									"src": "17561:1:35",
									"type": ""
								}
							],
							"src": "17521:217:35"
						},
						{
							"body": {
								"nativeSrc": "17880:150:35",
								"nodeType": "YulBlock",
								"src": "17880:150:35",
								"statements": [
									{
										"nativeSrc": "17890:27:35",
										"nodeType": "YulVariableDeclaration",
										"src": "17890:27:35",
										"value": {
											"arguments": [
												{
													"name": "value0",
													"nativeSrc": "17910:6:35",
													"nodeType": "YulIdentifier",
													"src": "17910:6:35"
												}
											],
											"functionName": {
												"name": "mload",
												"nativeSrc": "17904:5:35",
												"nodeType": "YulIdentifier",
												"src": "17904:5:35"
											},
											"nativeSrc": "17904:13:35",
											"nodeType": "YulFunctionCall",
											"src": "17904:13:35"
										},
										"variables": [
											{
												"name": "length",
												"nativeSrc": "17894:6:35",
												"nodeType": "YulTypedName",
												"src": "17894:6:35",
												"type": ""
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "17965:6:35",
															"nodeType": "YulIdentifier",
															"src": "17965:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "17973:4:35",
															"nodeType": "YulLiteral",
															"src": "17973:4:35",
															"type": "",
															"value": "0x20"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "17961:3:35",
														"nodeType": "YulIdentifier",
														"src": "17961:3:35"
													},
													"nativeSrc": "17961:17:35",
													"nodeType": "YulFunctionCall",
													"src": "17961:17:35"
												},
												{
													"name": "pos",
													"nativeSrc": "17980:3:35",
													"nodeType": "YulIdentifier",
													"src": "17980:3:35"
												},
												{
													"name": "length",
													"nativeSrc": "17985:6:35",
													"nodeType": "YulIdentifier",
													"src": "17985:6:35"
												}
											],
											"functionName": {
												"name": "copy_memory_to_memory_with_cleanup",
												"nativeSrc": "17926:34:35",
												"nodeType": "YulIdentifier",
												"src": "17926:34:35"
											},
											"nativeSrc": "17926:66:35",
											"nodeType": "YulFunctionCall",
											"src": "17926:66:35"
										},
										"nativeSrc": "17926:66:35",
										"nodeType": "YulExpressionStatement",
										"src": "17926:66:35"
									},
									{
										"nativeSrc": "18001:23:35",
										"nodeType": "YulAssignment",
										"src": "18001:23:35",
										"value": {
											"arguments": [
												{
													"name": "pos",
													"nativeSrc": "18012:3:35",
													"nodeType": "YulIdentifier",
													"src": "18012:3:35"
												},
												{
													"name": "length",
													"nativeSrc": "18017:6:35",
													"nodeType": "YulIdentifier",
													"src": "18017:6:35"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "18008:3:35",
												"nodeType": "YulIdentifier",
												"src": "18008:3:35"
											},
											"nativeSrc": "18008:16:35",
											"nodeType": "YulFunctionCall",
											"src": "18008:16:35"
										},
										"variableNames": [
											{
												"name": "end",
												"nativeSrc": "18001:3:35",
												"nodeType": "YulIdentifier",
												"src": "18001:3:35"
											}
										]
									}
								]
							},
							"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
							"nativeSrc": "17743:287:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "pos",
									"nativeSrc": "17856:3:35",
									"nodeType": "YulTypedName",
									"src": "17856:3:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "17861:6:35",
									"nodeType": "YulTypedName",
									"src": "17861:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "end",
									"nativeSrc": "17872:3:35",
									"nodeType": "YulTypedName",
									"src": "17872:3:35",
									"type": ""
								}
							],
							"src": "17743:287:35"
						},
						{
							"body": {
								"nativeSrc": "18084:136:35",
								"nodeType": "YulBlock",
								"src": "18084:136:35",
								"statements": [
									{
										"nativeSrc": "18094:29:35",
										"nodeType": "YulVariableDeclaration",
										"src": "18094:29:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "18112:3:35",
															"nodeType": "YulLiteral",
															"src": "18112:3:35",
															"type": "",
															"value": "208"
														},
														{
															"kind": "number",
															"nativeSrc": "18117:1:35",
															"nodeType": "YulLiteral",
															"src": "18117:1:35",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "18108:3:35",
														"nodeType": "YulIdentifier",
														"src": "18108:3:35"
													},
													"nativeSrc": "18108:11:35",
													"nodeType": "YulFunctionCall",
													"src": "18108:11:35"
												},
												{
													"kind": "number",
													"nativeSrc": "18121:1:35",
													"nodeType": "YulLiteral",
													"src": "18121:1:35",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "18104:3:35",
												"nodeType": "YulIdentifier",
												"src": "18104:3:35"
											},
											"nativeSrc": "18104:19:35",
											"nodeType": "YulFunctionCall",
											"src": "18104:19:35"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "18098:2:35",
												"nodeType": "YulTypedName",
												"src": "18098:2:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "18132:35:35",
										"nodeType": "YulAssignment",
										"src": "18132:35:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "x",
															"nativeSrc": "18148:1:35",
															"nodeType": "YulIdentifier",
															"src": "18148:1:35"
														},
														{
															"name": "_1",
															"nativeSrc": "18151:2:35",
															"nodeType": "YulIdentifier",
															"src": "18151:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "18144:3:35",
														"nodeType": "YulIdentifier",
														"src": "18144:3:35"
													},
													"nativeSrc": "18144:10:35",
													"nodeType": "YulFunctionCall",
													"src": "18144:10:35"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nativeSrc": "18160:1:35",
															"nodeType": "YulIdentifier",
															"src": "18160:1:35"
														},
														{
															"name": "_1",
															"nativeSrc": "18163:2:35",
															"nodeType": "YulIdentifier",
															"src": "18163:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "18156:3:35",
														"nodeType": "YulIdentifier",
														"src": "18156:3:35"
													},
													"nativeSrc": "18156:10:35",
													"nodeType": "YulFunctionCall",
													"src": "18156:10:35"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "18140:3:35",
												"nodeType": "YulIdentifier",
												"src": "18140:3:35"
											},
											"nativeSrc": "18140:27:35",
											"nodeType": "YulFunctionCall",
											"src": "18140:27:35"
										},
										"variableNames": [
											{
												"name": "diff",
												"nativeSrc": "18132:4:35",
												"nodeType": "YulIdentifier",
												"src": "18132:4:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "18192:22:35",
											"nodeType": "YulBlock",
											"src": "18192:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "18194:16:35",
															"nodeType": "YulIdentifier",
															"src": "18194:16:35"
														},
														"nativeSrc": "18194:18:35",
														"nodeType": "YulFunctionCall",
														"src": "18194:18:35"
													},
													"nativeSrc": "18194:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "18194:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "diff",
													"nativeSrc": "18182:4:35",
													"nodeType": "YulIdentifier",
													"src": "18182:4:35"
												},
												{
													"name": "_1",
													"nativeSrc": "18188:2:35",
													"nodeType": "YulIdentifier",
													"src": "18188:2:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "18179:2:35",
												"nodeType": "YulIdentifier",
												"src": "18179:2:35"
											},
											"nativeSrc": "18179:12:35",
											"nodeType": "YulFunctionCall",
											"src": "18179:12:35"
										},
										"nativeSrc": "18176:38:35",
										"nodeType": "YulIf",
										"src": "18176:38:35"
									}
								]
							},
							"name": "checked_sub_t_uint208",
							"nativeSrc": "18035:185:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "18066:1:35",
									"nodeType": "YulTypedName",
									"src": "18066:1:35",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "18069:1:35",
									"nodeType": "YulTypedName",
									"src": "18069:1:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "diff",
									"nativeSrc": "18075:4:35",
									"nodeType": "YulTypedName",
									"src": "18075:4:35",
									"type": ""
								}
							],
							"src": "18035:185:35"
						},
						{
							"body": {
								"nativeSrc": "18362:130:35",
								"nodeType": "YulBlock",
								"src": "18362:130:35",
								"statements": [
									{
										"nativeSrc": "18372:26:35",
										"nodeType": "YulAssignment",
										"src": "18372:26:35",
										"value": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "18384:9:35",
													"nodeType": "YulIdentifier",
													"src": "18384:9:35"
												},
												{
													"kind": "number",
													"nativeSrc": "18395:2:35",
													"nodeType": "YulLiteral",
													"src": "18395:2:35",
													"type": "",
													"value": "64"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "18380:3:35",
												"nodeType": "YulIdentifier",
												"src": "18380:3:35"
											},
											"nativeSrc": "18380:18:35",
											"nodeType": "YulFunctionCall",
											"src": "18380:18:35"
										},
										"variableNames": [
											{
												"name": "tail",
												"nativeSrc": "18372:4:35",
												"nodeType": "YulIdentifier",
												"src": "18372:4:35"
											}
										]
									},
									{
										"expression": {
											"arguments": [
												{
													"name": "headStart",
													"nativeSrc": "18414:9:35",
													"nodeType": "YulIdentifier",
													"src": "18414:9:35"
												},
												{
													"arguments": [
														{
															"name": "value0",
															"nativeSrc": "18429:6:35",
															"nodeType": "YulIdentifier",
															"src": "18429:6:35"
														},
														{
															"kind": "number",
															"nativeSrc": "18437:4:35",
															"nodeType": "YulLiteral",
															"src": "18437:4:35",
															"type": "",
															"value": "0xff"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "18425:3:35",
														"nodeType": "YulIdentifier",
														"src": "18425:3:35"
													},
													"nativeSrc": "18425:17:35",
													"nodeType": "YulFunctionCall",
													"src": "18425:17:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "18407:6:35",
												"nodeType": "YulIdentifier",
												"src": "18407:6:35"
											},
											"nativeSrc": "18407:36:35",
											"nodeType": "YulFunctionCall",
											"src": "18407:36:35"
										},
										"nativeSrc": "18407:36:35",
										"nodeType": "YulExpressionStatement",
										"src": "18407:36:35"
									},
									{
										"expression": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "headStart",
															"nativeSrc": "18463:9:35",
															"nodeType": "YulIdentifier",
															"src": "18463:9:35"
														},
														{
															"kind": "number",
															"nativeSrc": "18474:2:35",
															"nodeType": "YulLiteral",
															"src": "18474:2:35",
															"type": "",
															"value": "32"
														}
													],
													"functionName": {
														"name": "add",
														"nativeSrc": "18459:3:35",
														"nodeType": "YulIdentifier",
														"src": "18459:3:35"
													},
													"nativeSrc": "18459:18:35",
													"nodeType": "YulFunctionCall",
													"src": "18459:18:35"
												},
												{
													"name": "value1",
													"nativeSrc": "18479:6:35",
													"nodeType": "YulIdentifier",
													"src": "18479:6:35"
												}
											],
											"functionName": {
												"name": "mstore",
												"nativeSrc": "18452:6:35",
												"nodeType": "YulIdentifier",
												"src": "18452:6:35"
											},
											"nativeSrc": "18452:34:35",
											"nodeType": "YulFunctionCall",
											"src": "18452:34:35"
										},
										"nativeSrc": "18452:34:35",
										"nodeType": "YulExpressionStatement",
										"src": "18452:34:35"
									}
								]
							},
							"name": "abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed",
							"nativeSrc": "18225:267:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "headStart",
									"nativeSrc": "18323:9:35",
									"nodeType": "YulTypedName",
									"src": "18323:9:35",
									"type": ""
								},
								{
									"name": "value1",
									"nativeSrc": "18334:6:35",
									"nodeType": "YulTypedName",
									"src": "18334:6:35",
									"type": ""
								},
								{
									"name": "value0",
									"nativeSrc": "18342:6:35",
									"nodeType": "YulTypedName",
									"src": "18342:6:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "tail",
									"nativeSrc": "18353:4:35",
									"nodeType": "YulTypedName",
									"src": "18353:4:35",
									"type": ""
								}
							],
							"src": "18225:267:35"
						},
						{
							"body": {
								"nativeSrc": "18545:134:35",
								"nodeType": "YulBlock",
								"src": "18545:134:35",
								"statements": [
									{
										"nativeSrc": "18555:29:35",
										"nodeType": "YulVariableDeclaration",
										"src": "18555:29:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"kind": "number",
															"nativeSrc": "18573:3:35",
															"nodeType": "YulLiteral",
															"src": "18573:3:35",
															"type": "",
															"value": "208"
														},
														{
															"kind": "number",
															"nativeSrc": "18578:1:35",
															"nodeType": "YulLiteral",
															"src": "18578:1:35",
															"type": "",
															"value": "1"
														}
													],
													"functionName": {
														"name": "shl",
														"nativeSrc": "18569:3:35",
														"nodeType": "YulIdentifier",
														"src": "18569:3:35"
													},
													"nativeSrc": "18569:11:35",
													"nodeType": "YulFunctionCall",
													"src": "18569:11:35"
												},
												{
													"kind": "number",
													"nativeSrc": "18582:1:35",
													"nodeType": "YulLiteral",
													"src": "18582:1:35",
													"type": "",
													"value": "1"
												}
											],
											"functionName": {
												"name": "sub",
												"nativeSrc": "18565:3:35",
												"nodeType": "YulIdentifier",
												"src": "18565:3:35"
											},
											"nativeSrc": "18565:19:35",
											"nodeType": "YulFunctionCall",
											"src": "18565:19:35"
										},
										"variables": [
											{
												"name": "_1",
												"nativeSrc": "18559:2:35",
												"nodeType": "YulTypedName",
												"src": "18559:2:35",
												"type": ""
											}
										]
									},
									{
										"nativeSrc": "18593:34:35",
										"nodeType": "YulAssignment",
										"src": "18593:34:35",
										"value": {
											"arguments": [
												{
													"arguments": [
														{
															"name": "x",
															"nativeSrc": "18608:1:35",
															"nodeType": "YulIdentifier",
															"src": "18608:1:35"
														},
														{
															"name": "_1",
															"nativeSrc": "18611:2:35",
															"nodeType": "YulIdentifier",
															"src": "18611:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "18604:3:35",
														"nodeType": "YulIdentifier",
														"src": "18604:3:35"
													},
													"nativeSrc": "18604:10:35",
													"nodeType": "YulFunctionCall",
													"src": "18604:10:35"
												},
												{
													"arguments": [
														{
															"name": "y",
															"nativeSrc": "18620:1:35",
															"nodeType": "YulIdentifier",
															"src": "18620:1:35"
														},
														{
															"name": "_1",
															"nativeSrc": "18623:2:35",
															"nodeType": "YulIdentifier",
															"src": "18623:2:35"
														}
													],
													"functionName": {
														"name": "and",
														"nativeSrc": "18616:3:35",
														"nodeType": "YulIdentifier",
														"src": "18616:3:35"
													},
													"nativeSrc": "18616:10:35",
													"nodeType": "YulFunctionCall",
													"src": "18616:10:35"
												}
											],
											"functionName": {
												"name": "add",
												"nativeSrc": "18600:3:35",
												"nodeType": "YulIdentifier",
												"src": "18600:3:35"
											},
											"nativeSrc": "18600:27:35",
											"nodeType": "YulFunctionCall",
											"src": "18600:27:35"
										},
										"variableNames": [
											{
												"name": "sum",
												"nativeSrc": "18593:3:35",
												"nodeType": "YulIdentifier",
												"src": "18593:3:35"
											}
										]
									},
									{
										"body": {
											"nativeSrc": "18651:22:35",
											"nodeType": "YulBlock",
											"src": "18651:22:35",
											"statements": [
												{
													"expression": {
														"arguments": [],
														"functionName": {
															"name": "panic_error_0x11",
															"nativeSrc": "18653:16:35",
															"nodeType": "YulIdentifier",
															"src": "18653:16:35"
														},
														"nativeSrc": "18653:18:35",
														"nodeType": "YulFunctionCall",
														"src": "18653:18:35"
													},
													"nativeSrc": "18653:18:35",
													"nodeType": "YulExpressionStatement",
													"src": "18653:18:35"
												}
											]
										},
										"condition": {
											"arguments": [
												{
													"name": "sum",
													"nativeSrc": "18642:3:35",
													"nodeType": "YulIdentifier",
													"src": "18642:3:35"
												},
												{
													"name": "_1",
													"nativeSrc": "18647:2:35",
													"nodeType": "YulIdentifier",
													"src": "18647:2:35"
												}
											],
											"functionName": {
												"name": "gt",
												"nativeSrc": "18639:2:35",
												"nodeType": "YulIdentifier",
												"src": "18639:2:35"
											},
											"nativeSrc": "18639:11:35",
											"nodeType": "YulFunctionCall",
											"src": "18639:11:35"
										},
										"nativeSrc": "18636:37:35",
										"nodeType": "YulIf",
										"src": "18636:37:35"
									}
								]
							},
							"name": "checked_add_t_uint208",
							"nativeSrc": "18497:182:35",
							"nodeType": "YulFunctionDefinition",
							"parameters": [
								{
									"name": "x",
									"nativeSrc": "18528:1:35",
									"nodeType": "YulTypedName",
									"src": "18528:1:35",
									"type": ""
								},
								{
									"name": "y",
									"nativeSrc": "18531:1:35",
									"nodeType": "YulTypedName",
									"src": "18531:1:35",
									"type": ""
								}
							],
							"returnVariables": [
								{
									"name": "sum",
									"nativeSrc": "18537:3:35",
									"nodeType": "YulTypedName",
									"src": "18537:3:35",
									"type": ""
								}
							],
							"src": "18497:182:35"
						}
					]
				},
				"contents": "{\n    { }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value1 := memPtr\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        let _1 := 32\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint48__to_t_uint48__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffff))\n    }\n    function abi_decode_uint8(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 192) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := abi_decode_uint8(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := abi_decode_uint8(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n    }\n    function abi_decode_tuple_t_addresst_uint32(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value1 := value\n    }\n    function abi_encode_tuple_t_struct$_Checkpoint208_$9593_memory_ptr__to_t_struct$_Checkpoint208_$9593_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(mload(value0), 0xffffffffffff))\n        mstore(add(headStart, 0x20), and(mload(add(value0, 0x20)), sub(shl(208, 1), 1)))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := 1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_2e5045ff73280aa8e8acd8c82710f23812497f87f7f576e2220a2ddd0d45eade__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"EIP712: Uninitialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256_t_uint48__to_t_uint256_t_uint48__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffff))\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_rational_48_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_rational_32_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function checked_sub_t_uint208(x, y) -> diff\n    {\n        let _1 := sub(shl(208, 1), 1)\n        diff := sub(and(x, _1), and(y, _1))\n        if gt(diff, _1) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_rational_208_by_1_t_uint256__to_t_uint8_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint208(x, y) -> sum\n    {\n        let _1 := sub(shl(208, 1), 1)\n        sum := add(and(x, _1), and(y, _1))\n        if gt(sum, _1) { panic_error_0x11() }\n    }\n}",
				"id": 35,
				"language": "Yul",
				"name": "#utility.yul"
			}
		],
		"immutableReferences": {
			"1113": [
				{
					"length": 32,
					"start": 4128
				},
				{
					"length": 32,
					"start": 4169
				},
				{
					"length": 32,
					"start": 4488
				}
			]
		},
		"linkReferences": {},
		"object": "6080604052600436106101c5575f3560e01c8063715018a6116100f25780639ab24eb011610092578063d505accf11610062578063d505accf1461056b578063dd62ed3e1461058a578063f1127ed8146105a9578063f2fde38b146105f4575f80fd5b80639ab24eb0146104de578063a9059cbb146104fd578063ad3cb1cc1461051c578063c3cda5201461054c575f80fd5b80638da5cb5b116100cd5780638da5cb5b1461044d5780638e539e8c1461048957806391ddadf4146104a857806395d89b41146104ca575f80fd5b8063715018a6146103f35780637ecebe001461040757806384b0196e14610426575f80fd5b8063485cc95511610168578063587cde1e11610138578063587cde1e1461034a5780635c19a95c146103815780636fcfff45146103a057806370a08231146103d4575f80fd5b8063485cc955146102cc5780634bf5d7e9146102ed5780634f1ef2861461032357806352d1902d14610336575f80fd5b806323b872dd116101a357806323b872dd1461025f578063313ce5671461027e5780633644e515146102995780633a46b1a8146102ad575f80fd5b806306fdde03146101c9578063095ea7b3146101f357806318160ddd14610222575b5f80fd5b3480156101d4575f80fd5b506101dd610613565b6040516101ea9190612430565b60405180910390f35b3480156101fe575f80fd5b5061021261020d36600461245d565b6106b8565b60405190151581526020016101ea565b34801561022d575f80fd5b507f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02545b6040519081526020016101ea565b34801561026a575f80fd5b50610212610279366004612485565b6106d1565b348015610289575f80fd5b50604051601281526020016101ea565b3480156102a4575f80fd5b506102516106f6565b3480156102b8575f80fd5b506102516102c736600461245d565b610704565b3480156102d7575f80fd5b506102eb6102e63660046124be565b61074f565b005b3480156102f8575f80fd5b5060408051808201909152600e81526d06d6f64653d74696d657374616d760941b60208201526101dd565b6102eb610331366004612503565b61090b565b348015610341575f80fd5b5061025161092a565b348015610355575f80fd5b506103696103643660046125bf565b610945565b6040516001600160a01b0390911681526020016101ea565b34801561038c575f80fd5b506102eb61039b3660046125bf565b61096e565b3480156103ab575f80fd5b506103bf6103ba3660046125bf565b610979565b60405163ffffffff90911681526020016101ea565b3480156103df575f80fd5b506102516103ee3660046125bf565b610983565b3480156103fe575f80fd5b506102eb6109b3565b348015610412575f80fd5b506102516104213660046125bf565b6109c6565b348015610431575f80fd5b5061043a6109d0565b6040516101ea97969594939291906125d8565b348015610458575f80fd5b507f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b0316610369565b348015610494575f80fd5b506102516104a336600461266f565b610a7e565b3480156104b3575f80fd5b5060405165ffffffffffff421681526020016101ea565b3480156104d5575f80fd5b506101dd610ab3565b3480156104e9575f80fd5b506102516104f83660046125bf565b610af1565b348015610508575f80fd5b5061021261051736600461245d565b610b3f565b348015610527575f80fd5b506101dd604051806040016040528060058152602001640352e302e360dc1b81525081565b348015610557575f80fd5b506102eb610566366004612696565b610b4c565b348015610576575f80fd5b506102eb6105853660046126ea565b610bff565b348015610595575f80fd5b506102516105a43660046124be565b610d18565b3480156105b4575f80fd5b506105c86105c336600461274f565b610d61565b60408051825165ffffffffffff1681526020928301516001600160d01b031692810192909252016101ea565b3480156105ff575f80fd5b506102eb61060e3660046125bf565b610d7e565b60605f5f80516020612afc8339815191525b90508060030180546106369061278c565b80601f01602080910402602001604051908101604052809291908181526020018280546106629061278c565b80156106ad5780601f10610684576101008083540402835291602001916106ad565b820191905f5260205f20905b81548152906001019060200180831161069057829003601f168201915b505050505091505090565b5f336106c5818585610dbb565b60019150505b92915050565b5f336106de858285610dcd565b6106e9858585610e31565b60019150505b9392505050565b5f6106ff610e8e565b905090565b5f5f80516020612adc83398151915261073e61071f84610e97565b6001600160a01b0386165f908152600184016020526040902090610edb565b6001600160d01b0316949350505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff165f811580156107945750825b90505f8267ffffffffffffffff1660011480156107b05750303b155b9050811580156107be575080155b156107dc5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561080657845460ff60401b1916600160401b1785555b6108516040518060400160405280600e81526020016d4e6578742050726f20566973746160901b8152506040518060400160405280600381526020016227282b60e91b815250610f8b565b6108806040518060400160405280600e81526020016d4e6578742050726f20566973746160901b815250610f9d565b610888610fc8565b61089186610fd0565b610899610fc8565b6108bc876108a96012600a6128b8565b6108b7906316bf96c96128c6565b610fe1565b831561090257845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610913611015565b61091c826110b9565b61092682826110c1565b5050565b5f61093361117d565b505f80516020612b3c83398151915290565b6001600160a01b039081165f9081525f80516020612adc83398151915260205260409020541690565b3361092681836111c6565b5f6106cb8261124d565b5f805f80516020612afc8339815191525b6001600160a01b039093165f9081526020939093525050604090205490565b6109bb61129c565b6109c45f6112f7565b565b5f6106cb82611367565b5f60608082808083815f80516020612b1c83398151915280549091501580156109fb57506001810154155b610a445760405162461bcd60e51b81526020600482015260156024820152741152540dcc4c8e88155b9a5b9a5d1a585b1a5e9959605a1b60448201526064015b60405180910390fd5b610a4c611371565b610a546113af565b604080515f80825260208201909252600f60f81b9c939b5091995046985030975095509350915050565b5f5f80516020612adc833981519152610aa3610a9984610e97565b6002830190610edb565b6001600160d01b03169392505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0480546060915f80516020612afc833981519152916106369061278c565b6001600160a01b0381165f9081527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d01602052604081205f80516020612adc83398151915290610aa3906113c5565b5f336106c5818585610e31565b83421115610b7057604051632341d78760e11b815260048101859052602401610a3b565b604080517fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60208201526001600160a01b0388169181019190915260608101869052608081018590525f90610be990610be19060a001604051602081830303815290604052805190602001206113fc565b858585611428565b9050610bf58187611454565b61090281886111c6565b83421115610c235760405163313c898160e11b815260048101859052602401610a3b565b5f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9888888610c518c611492565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e0016040516020818303038152906040528051906020012090505f610cab826113fc565b90505f610cba82878787611428565b9050896001600160a01b0316816001600160a01b031614610d01576040516325c0072360e11b81526001600160a01b0380831660048301528b166024820152604401610a3b565b610d0c8a8a8a610dbb565b50505050505050505050565b6001600160a01b039182165f9081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b604080518082019091525f80825260208201526106ef83836114d3565b610d8661129c565b6001600160a01b038116610daf57604051631e4fbdf760e01b81525f6004820152602401610a3b565b610db8816112f7565b50565b610dc8838383600161153c565b505050565b5f610dd88484610d18565b90505f19811015610e2b5781811015610e1d57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610a3b565b610e2b84848484035f61153c565b50505050565b6001600160a01b038316610e5a57604051634b637e8f60e11b81525f6004820152602401610a3b565b6001600160a01b038216610e835760405163ec442f0560e01b81525f6004820152602401610a3b565b610dc8838383611620565b5f6106ff61162b565b5f4265ffffffffffff81168310610ed257604051637669fc0f60e11b81526004810184905265ffffffffffff82166024820152604401610a3b565b6106ef8361169e565b81545f9081816005811115610f37575f610ef4846116d4565b610efe90856128dd565b5f8881526020902090915081015465ffffffffffff9081169087161015610f2757809150610f35565b610f328160016128f0565b92505b505b5f610f4487878585611827565b90508015610f7e57610f6887610f5b6001846128dd565b5f91825260209091200190565b54600160301b90046001600160d01b0316610f80565b5f5b979650505050505050565b610f93611886565b61092682826118cf565b610fa5611886565b610db881604051806040016040528060018152602001603160f81b81525061191f565b6109c4611886565b610fd8611886565b610db88161197e565b6001600160a01b03821661100a5760405163ec442f0560e01b81525f6004820152602401610a3b565b6109265f8383611620565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061109b57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661108f5f80516020612b3c833981519152546001600160a01b031690565b6001600160a01b031614155b156109c45760405163703e46dd60e11b815260040160405180910390fd5b610db861129c565b816001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561111b575060408051601f3d908101601f1916820190925261111891810190612903565b60015b61114357604051634c9c8ce360e01b81526001600160a01b0383166004820152602401610a3b565b5f80516020612b3c833981519152811461117357604051632a87526960e21b815260048101829052602401610a3b565b610dc88383611986565b306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109c45760405163703e46dd60e11b815260040160405180910390fd5b5f80516020612adc8339815191525f6111de84610945565b6001600160a01b038581165f8181526020869052604080822080546001600160a01b031916898616908117909155905194955093928516927f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610e2b8184611248876119db565b6119e5565b6001600160a01b0381165f9081527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0160205260408120545f80516020612adc833981519152906106ef90611b5b565b336112ce7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146109c45760405163118cdaa760e01b8152336004820152602401610a3b565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a3505050565b5f6106cb82611b8b565b7fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d10280546060915f80516020612b1c833981519152916106369061278c565b60605f5f80516020612b1c833981519152610625565b80545f9080156113f4576113de83610f5b6001846128dd565b54600160301b90046001600160d01b03166106ef565b5f9392505050565b5f6106cb611408610e8e565b8360405161190160f01b8152600281019290925260228201526042902090565b5f805f8061143888888888611bb3565b9250925092506114488282611c7b565b50909695505050505050565b5f61145e83611492565b9050808214610dc8576040516301d4b62360e61b81526001600160a01b038416600482015260248101829052604401610a3b565b6001600160a01b03165f9081527f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb006020526040902080546001810190915590565b6040805180820182525f80825260208083018290526001600160a01b03861682527fe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d019052919091205f80516020612adc833981519152906115349084611d33565b949350505050565b5f80516020612afc8339815191526001600160a01b0385166115735760405163e602df0560e01b81525f6004820152602401610a3b565b6001600160a01b03841661159c57604051634a1406b160e11b81525f6004820152602401610a3b565b6001600160a01b038086165f9081526001830160209081526040808320938816835292905220839055811561161957836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161161091815260200190565b60405180910390a35b5050505050565b610dc8838383611da0565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611655611e25565b61165d611e8d565b60408051602081019490945283019190915260608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b5f65ffffffffffff8211156116d0576040516306dfcc6560e41b81526030600482015260248101839052604401610a3b565b5090565b5f600182116116e1575090565b816001600160801b82106116fa5760809190911c9060401b5b600160401b82106117105760409190911c9060201b5b64010000000082106117275760209190911c9060101b5b62010000821061173c5760109190911c9060081b5b61010082106117505760089190911c9060041b5b601082106117635760049190911c9060021b5b6004821061176f5760011b5b600302600190811c908185816117875761178761291a565b048201901c9050600181858161179f5761179f61291a565b048201901c905060018185816117b7576117b761291a565b048201901c905060018185816117cf576117cf61291a565b048201901c905060018185816117e7576117e761291a565b048201901c905060018185816117ff576117ff61291a565b048201901c905061181e8185816118185761181861291a565b04821190565b90039392505050565b5f5b8183101561187e575f61183c8484611ecf565b5f8781526020902090915065ffffffffffff86169082015465ffffffffffff16111561186a57809250611878565b6118758160016128f0565b93505b50611829565b509392505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166109c457604051631afcd79f60e31b815260040160405180910390fd5b6118d7611886565b5f80516020612afc8339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace036119108482612972565b5060048101610e2b8382612972565b611927611886565b5f80516020612b1c8339815191527fa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d1026119608482612972565b506003810161196f8382612972565b505f8082556001909101555050565b610d86611886565b61198f82611ee9565b6040516001600160a01b038316907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b905f90a28051156119d357610dc88282611f4c565b610926611fbe565b5f6106cb82610983565b5f80516020612adc8339815191526001600160a01b0384811690841614801590611a0e57505f82115b15610e2b576001600160a01b03841615611ab7576001600160a01b0384165f90815260018201602052604081208190611a5290611fdd611a4d87611fe8565b61201b565b6001600160d01b031691506001600160d01b03169150856001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611aac929190918252602082015260400190565b60405180910390a250505b6001600160a01b03831615610e2b576001600160a01b0383165f90815260018201602052604081208190611af19061204c611a4d87611fe8565b6001600160d01b031691506001600160d01b03169150846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248383604051611b4b929190918252602082015260400190565b60405180910390a2505050505050565b5f63ffffffff8211156116d0576040516306dfcc6560e41b81526020600482015260248101839052604401610a3b565b5f807f5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00610994565b5f80807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115611bec57505f91506003905082611c71565b604080515f808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015611c3d573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116611c6857505f925060019150829050611c71565b92505f91508190505b9450945094915050565b5f826003811115611c8e57611c8e612a32565b03611c97575050565b6001826003811115611cab57611cab612a32565b03611cc95760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115611cdd57611cdd612a32565b03611cfe5760405163fce698f760e01b815260048101829052602401610a3b565b6003826003811115611d1257611d12612a32565b03610926576040516335e2f38360e21b815260048101829052602401610a3b565b604080518082019091525f8082526020820152825f018263ffffffff1681548110611d6057611d60612a46565b5f9182526020918290206040805180820190915291015465ffffffffffff81168252600160301b90046001600160d01b0316918101919091529392505050565b611dab838383612057565b6001600160a01b038316611e1a575f611de27f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace025490565b90506001600160d01b0380821115611e1757604051630e58ae9360e11b81526004810183905260248101829052604401610a3b565b50505b610dc8838383612190565b5f5f80516020612b1c83398151915281611e3d611371565b805190915015611e5557805160209091012092915050565b81548015611e64579392505050565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470935050505090565b5f5f80516020612b1c83398151915281611ea56113af565b805190915015611ebd57805160209091012092915050565b60018201548015611e64579392505050565b5f611edd6002848418612a5a565b6106ef908484166128f0565b806001600160a01b03163b5f03611f1e57604051634c9c8ce360e01b81526001600160a01b0382166004820152602401610a3b565b5f80516020612b3c83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b60605f80846001600160a01b031684604051611f689190612a79565b5f60405180830381855af49150503d805f8114611fa0576040519150601f19603f3d011682016040523d82523d5f602084013e611fa5565b606091505b5091509150611fb5858383612201565b95945050505050565b34156109c45760405163b398979f60e01b815260040160405180910390fd5b5f6106ef8284612a94565b5f6001600160d01b038211156116d0576040516306dfcc6560e41b815260d0600482015260248101839052604401610a3b565b5f8061203f4261203761202d886113c5565b868863ffffffff16565b87919061225d565b915091505b935093915050565b5f6106ef8284612abb565b5f80516020612afc8339815191526001600160a01b0384166120915781816002015f82825461208691906128f0565b909155506121019050565b6001600160a01b0384165f90815260208290526040902054828110156120e35760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610a3b565b6001600160a01b0385165f9081526020839052604090209083900390555b6001600160a01b03831661211f57600281018054839003905561213d565b6001600160a01b0383165f9081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161218291815260200190565b60405180910390a350505050565b5f80516020612adc8339815191526001600160a01b0384166121c2576121bf8160020161204c611a4d85611fe8565b50505b6001600160a01b0383166121e6576121e381600201611fdd611a4d85611fe8565b50505b610e2b6121f285610945565b6121fb85610945565b846119e5565b606082612216576122118261226a565b6106ef565b815115801561222d57506001600160a01b0384163b155b1561225657604051639996b31560e01b81526001600160a01b0385166004820152602401610a3b565b50806106ef565b5f8061203f858585612293565b80511561227a5780518082602001fd5b60405163d6bda27560e01b815260040160405180910390fd5b82545f9081908015612389575f6122af87610f5b6001856128dd565b805490915065ffffffffffff80821691600160301b90046001600160d01b03169088168211156122f257604051632520601d60e01b815260040160405180910390fd5b8765ffffffffffff168265ffffffffffff160361232b57825465ffffffffffff16600160301b6001600160d01b0389160217835561237b565b6040805180820190915265ffffffffffff808a1682526001600160d01b03808a1660208085019182528d54600181018f555f8f81529190912094519151909216600160301b029216919091179101555b945085935061204492505050565b50506040805180820190915265ffffffffffff80851682526001600160d01b0380851660208085019182528854600181018a555f8a815291822095519251909316600160301b029190931617920191909155905081612044565b5f5b838110156123fd5781810151838201526020016123e5565b50505f910152565b5f815180845261241c8160208601602086016123e3565b601f01601f19169290920160200192915050565b602081525f6106ef6020830184612405565b80356001600160a01b0381168114612458575f80fd5b919050565b5f806040838503121561246e575f80fd5b61247783612442565b946020939093013593505050565b5f805f60608486031215612497575f80fd5b6124a084612442565b92506124ae60208501612442565b9150604084013590509250925092565b5f80604083850312156124cf575f80fd5b6124d883612442565b91506124e660208401612442565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f8060408385031215612514575f80fd5b61251d83612442565b9150602083013567ffffffffffffffff80821115612539575f80fd5b818501915085601f83011261254c575f80fd5b81358181111561255e5761255e6124ef565b604051601f8201601f19908116603f01168101908382118183101715612586576125866124ef565b8160405282815288602084870101111561259e575f80fd5b826020860160208301375f6020848301015280955050505050509250929050565b5f602082840312156125cf575f80fd5b6106ef82612442565b60ff60f81b881681525f602060e060208401526125f860e084018a612405565b838103604085015261260a818a612405565b606085018990526001600160a01b038816608086015260a0850187905284810360c0860152855180825260208088019350909101905f5b8181101561265d57835183529284019291840191600101612641565b50909c9b505050505050505050505050565b5f6020828403121561267f575f80fd5b5035919050565b803560ff81168114612458575f80fd5b5f805f805f8060c087890312156126ab575f80fd5b6126b487612442565b955060208701359450604087013593506126d060608801612686565b92506080870135915060a087013590509295509295509295565b5f805f805f805f60e0888a031215612700575f80fd5b61270988612442565b965061271760208901612442565b9550604088013594506060880135935061273360808901612686565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215612760575f80fd5b61276983612442565b9150602083013563ffffffff81168114612781575f80fd5b809150509250929050565b600181811c908216806127a057607f821691505b6020821081036127be57634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b600181815b8085111561281257815f19048211156127f8576127f86127c4565b8085161561280557918102915b93841c93908002906127dd565b509250929050565b5f82612828575060016106cb565b8161283457505f6106cb565b816001811461284a576002811461285457612870565b60019150506106cb565b60ff841115612865576128656127c4565b50506001821b6106cb565b5060208310610133831016604e8410600b8410161715612893575081810a6106cb565b61289d83836127d8565b805f19048211156128b0576128b06127c4565b029392505050565b5f6106ef60ff84168361281a565b80820281158282048414176106cb576106cb6127c4565b818103818111156106cb576106cb6127c4565b808201808211156106cb576106cb6127c4565b5f60208284031215612913575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b601f821115610dc857805f5260205f20601f840160051c810160208510156129535750805b601f840160051c820191505b81811015611619575f815560010161295f565b815167ffffffffffffffff81111561298c5761298c6124ef565b6129a08161299a845461278c565b8461292e565b602080601f8311600181146129d3575f84156129bc5750858301515b5f19600386901b1c1916600185901b178555612a2a565b5f85815260208120601f198616915b82811015612a01578886015182559484019460019091019084016129e2565b5085821015612a1e57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f82612a7457634e487b7160e01b5f52601260045260245ffd5b500490565b5f8251612a8a8184602087016123e3565b9190910192915050565b6001600160d01b03828116828216039080821115612ab457612ab46127c4565b5092915050565b6001600160d01b03818116838216019080821115612ab457612ab46127c456fee8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220ca54c6c59aca917cfd139c6ebb26882ae2ff0ba831e27d74043d1b416a13538764736f6c63430008160033",
		"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C5 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x715018A6 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x9AB24EB0 GT PUSH2 0x92 JUMPI DUP1 PUSH4 0xD505ACCF GT PUSH2 0x62 JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x56B JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x58A JUMPI DUP1 PUSH4 0xF1127ED8 EQ PUSH2 0x5A9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x9AB24EB0 EQ PUSH2 0x4DE JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x4FD JUMPI DUP1 PUSH4 0xAD3CB1CC EQ PUSH2 0x51C JUMPI DUP1 PUSH4 0xC3CDA520 EQ PUSH2 0x54C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xCD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x44D JUMPI DUP1 PUSH4 0x8E539E8C EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0x91DDADF4 EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4CA JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3F3 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x407 JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x426 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x485CC955 GT PUSH2 0x168 JUMPI DUP1 PUSH4 0x587CDE1E GT PUSH2 0x138 JUMPI DUP1 PUSH4 0x587CDE1E EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0x5C19A95C EQ PUSH2 0x381 JUMPI DUP1 PUSH4 0x6FCFFF45 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x3D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x485CC955 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x4BF5D7E9 EQ PUSH2 0x2ED JUMPI DUP1 PUSH4 0x4F1EF286 EQ PUSH2 0x323 JUMPI DUP1 PUSH4 0x52D1902D EQ PUSH2 0x336 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x25F JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x27E JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x299 JUMPI DUP1 PUSH4 0x3A46B1A8 EQ PUSH2 0x2AD JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1F3 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x222 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DD PUSH2 0x613 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EA SWAP2 SWAP1 PUSH2 0x2430 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x20D CALLDATASIZE PUSH1 0x4 PUSH2 0x245D JUMP JUMPDEST PUSH2 0x6B8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x26A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x279 CALLDATASIZE PUSH1 0x4 PUSH2 0x2485 JUMP JUMPDEST PUSH2 0x6D1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x289 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x6F6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x2C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x245D JUMP JUMPDEST PUSH2 0x704 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D7 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x2E6 CALLDATASIZE PUSH1 0x4 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0x74F JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F8 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0xE DUP2 MSTORE PUSH14 0x6D6F64653D74696D657374616D7 PUSH1 0x94 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x1DD JUMP JUMPDEST PUSH2 0x2EB PUSH2 0x331 CALLDATASIZE PUSH1 0x4 PUSH2 0x2503 JUMP JUMPDEST PUSH2 0x90B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x341 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x92A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x355 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x369 PUSH2 0x364 CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x945 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x39B CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x96E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x3BF PUSH2 0x3BA CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x979 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3DF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x3EE CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x983 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x9B3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x412 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x421 CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0x9C6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x431 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x43A PUSH2 0x9D0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1EA SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x25D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x369 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x494 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x4A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x266F JUMP JUMPDEST PUSH2 0xA7E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH6 0xFFFFFFFFFFFF TIMESTAMP AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D5 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DD PUSH2 0xAB3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4E9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x4F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0xAF1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x212 PUSH2 0x517 CALLDATASIZE PUSH1 0x4 PUSH2 0x245D JUMP JUMPDEST PUSH2 0xB3F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x527 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x1DD PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x352E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x557 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x566 CALLDATASIZE PUSH1 0x4 PUSH2 0x2696 JUMP JUMPDEST PUSH2 0xB4C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x576 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x585 CALLDATASIZE PUSH1 0x4 PUSH2 0x26EA JUMP JUMPDEST PUSH2 0xBFF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x595 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x251 PUSH2 0x5A4 CALLDATASIZE PUSH1 0x4 PUSH2 0x24BE JUMP JUMPDEST PUSH2 0xD18 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B4 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x5C8 PUSH2 0x5C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x274F JUMP JUMPDEST PUSH2 0xD61 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP3 MLOAD PUSH6 0xFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE ADD PUSH2 0x1EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EB PUSH2 0x60E CALLDATASIZE PUSH1 0x4 PUSH2 0x25BF JUMP JUMPDEST PUSH2 0xD7E JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST SWAP1 POP DUP1 PUSH1 0x3 ADD DUP1 SLOAD PUSH2 0x636 SWAP1 PUSH2 0x278C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x662 SWAP1 PUSH2 0x278C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x6AD JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x684 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x6AD JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x690 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x6C5 DUP2 DUP6 DUP6 PUSH2 0xDBB JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x6DE DUP6 DUP3 DUP6 PUSH2 0xDCD JUMP JUMPDEST PUSH2 0x6E9 DUP6 DUP6 DUP6 PUSH2 0xE31 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6FF PUSH2 0xE8E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x73E PUSH2 0x71F DUP5 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP5 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x794 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x7B0 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x7BE JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x7DC JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x806 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x851 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4E6578742050726F205669737461 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x27282B PUSH1 0xE9 SHL DUP2 MSTORE POP PUSH2 0xF8B JUMP JUMPDEST PUSH2 0x880 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x4E6578742050726F205669737461 PUSH1 0x90 SHL DUP2 MSTORE POP PUSH2 0xF9D JUMP JUMPDEST PUSH2 0x888 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x891 DUP7 PUSH2 0xFD0 JUMP JUMPDEST PUSH2 0x899 PUSH2 0xFC8 JUMP JUMPDEST PUSH2 0x8BC DUP8 PUSH2 0x8A9 PUSH1 0x12 PUSH1 0xA PUSH2 0x28B8 JUMP JUMPDEST PUSH2 0x8B7 SWAP1 PUSH4 0x16BF96C9 PUSH2 0x28C6 JUMP JUMPDEST PUSH2 0xFE1 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x902 JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x913 PUSH2 0x1015 JUMP JUMPDEST PUSH2 0x91C DUP3 PUSH2 0x10B9 JUMP JUMPDEST PUSH2 0x926 DUP3 DUP3 PUSH2 0x10C1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 PUSH2 0x933 PUSH2 0x117D JUMP JUMPDEST POP PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD AND SWAP1 JUMP JUMPDEST CALLER PUSH2 0x926 DUP2 DUP4 PUSH2 0x11C6 JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x124D JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP4 SWAP1 SWAP4 MSTORE POP POP PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x9BB PUSH2 0x129C JUMP JUMPDEST PUSH2 0x9C4 PUSH0 PUSH2 0x12F7 JUMP JUMPDEST JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x1367 JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 DUP2 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD SWAP1 SWAP2 POP ISZERO DUP1 ISZERO PUSH2 0x9FB JUMPI POP PUSH1 0x1 DUP2 ADD SLOAD ISZERO JUMPDEST PUSH2 0xA44 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x1152540DCC4C8E88155B9A5B9A5D1A585B1A5E9959 PUSH1 0x5A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA4C PUSH2 0x1371 JUMP JUMPDEST PUSH2 0xA54 PUSH2 0x13AF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP13 SWAP4 SWAP12 POP SWAP2 SWAP10 POP CHAINID SWAP9 POP ADDRESS SWAP8 POP SWAP6 POP SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0xAA3 PUSH2 0xA99 DUP5 PUSH2 0xE97 JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SWAP1 PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x636 SWAP1 PUSH2 0x278C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0xE8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0xAA3 SWAP1 PUSH2 0x13C5 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x6C5 DUP2 DUP6 DUP6 PUSH2 0xE31 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xB70 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2341D787 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xE48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0xBE9 SWAP1 PUSH2 0xBE1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x13FC JUMP JUMPDEST DUP6 DUP6 DUP6 PUSH2 0x1428 JUMP JUMPDEST SWAP1 POP PUSH2 0xBF5 DUP2 DUP8 PUSH2 0x1454 JUMP JUMPDEST PUSH2 0x902 DUP2 DUP9 PUSH2 0x11C6 JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0xC23 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0xC51 DUP13 PUSH2 0x1492 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0xCAB DUP3 PUSH2 0x13FC JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0xCBA DUP3 DUP8 DUP8 DUP8 PUSH2 0x1428 JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xD01 JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xD0C DUP11 DUP11 DUP11 PUSH2 0xDBB JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH2 0x6EF DUP4 DUP4 PUSH2 0x14D3 JUMP JUMPDEST PUSH2 0xD86 PUSH2 0x129C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xDAF JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xDB8 DUP2 PUSH2 0x12F7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x153C JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xDD8 DUP5 DUP5 PUSH2 0xD18 JUMP JUMPDEST SWAP1 POP PUSH0 NOT DUP2 LT ISZERO PUSH2 0xE2B JUMPI DUP2 DUP2 LT ISZERO PUSH2 0xE1D JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xE2B DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x153C JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xE5A JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xE83 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH2 0x1620 JUMP JUMPDEST PUSH0 PUSH2 0x6FF PUSH2 0x162B JUMP JUMPDEST PUSH0 TIMESTAMP PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP4 LT PUSH2 0xED2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7669FC0F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH6 0xFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x6EF DUP4 PUSH2 0x169E JUMP JUMPDEST DUP2 SLOAD PUSH0 SWAP1 DUP2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xF37 JUMPI PUSH0 PUSH2 0xEF4 DUP5 PUSH2 0x16D4 JUMP JUMPDEST PUSH2 0xEFE SWAP1 DUP6 PUSH2 0x28DD JUMP JUMPDEST PUSH0 DUP9 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP DUP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP8 AND LT ISZERO PUSH2 0xF27 JUMPI DUP1 SWAP2 POP PUSH2 0xF35 JUMP JUMPDEST PUSH2 0xF32 DUP2 PUSH1 0x1 PUSH2 0x28F0 JUMP JUMPDEST SWAP3 POP JUMPDEST POP JUMPDEST PUSH0 PUSH2 0xF44 DUP8 DUP8 DUP6 DUP6 PUSH2 0x1827 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0xF7E JUMPI PUSH2 0xF68 DUP8 PUSH2 0xF5B PUSH1 0x1 DUP5 PUSH2 0x28DD JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SWAP1 JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0xF80 JUMP JUMPDEST PUSH0 JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xF93 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0x926 DUP3 DUP3 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0xFA5 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0xDB8 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH2 0x191F JUMP JUMPDEST PUSH2 0x9C4 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0xFD8 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0xDB8 DUP2 PUSH2 0x197E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x100A JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0x926 PUSH0 DUP4 DUP4 PUSH2 0x1620 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 PUSH2 0x109B JUMPI POP PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x108F PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDB8 PUSH2 0x129C JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0x52D1902D PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x111B JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0x1118 SWAP2 DUP2 ADD SWAP1 PUSH2 0x2903 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x1143 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 EQ PUSH2 0x1173 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2A875269 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 PUSH2 0x1986 JUMP JUMPDEST ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x703E46DD PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH0 PUSH2 0x11DE DUP5 PUSH2 0x945 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP7 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP10 DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP5 SWAP6 POP SWAP4 SWAP3 DUP6 AND SWAP3 PUSH32 0x3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F SWAP2 SWAP1 LOG4 PUSH2 0xE2B DUP2 DUP5 PUSH2 0x1248 DUP8 PUSH2 0x19DB JUMP JUMPDEST PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0xE8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x6EF SWAP1 PUSH2 0x1B5B JUMP JUMPDEST CALLER PUSH2 0x12CE PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x1B8B JUMP JUMPDEST PUSH32 0xA16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D102 DUP1 SLOAD PUSH1 0x60 SWAP2 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH2 0x636 SWAP1 PUSH2 0x278C JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH2 0x625 JUMP JUMPDEST DUP1 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0x13F4 JUMPI PUSH2 0x13DE DUP4 PUSH2 0xF5B PUSH1 0x1 DUP5 PUSH2 0x28DD JUMP JUMPDEST SLOAD PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND PUSH2 0x6EF JUMP JUMPDEST PUSH0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6CB PUSH2 0x1408 PUSH2 0xE8E JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x1438 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1BB3 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x1448 DUP3 DUP3 PUSH2 0x1C7B JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x145E DUP4 PUSH2 0x1492 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 EQ PUSH2 0xDC8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1D4B623 PUSH1 0xE6 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH32 0x5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH32 0xE8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 0x1534 SWAP1 DUP5 PUSH2 0x1D33 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1573 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x159C JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP4 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP4 SWAP1 SSTORE DUP2 ISZERO PUSH2 0x1619 JUMPI DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP6 PUSH1 0x40 MLOAD PUSH2 0x1610 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH2 0x1DA0 JUMP JUMPDEST PUSH0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH2 0x1655 PUSH2 0x1E25 JUMP JUMPDEST PUSH2 0x165D PUSH2 0x1E8D JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH6 0xFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x30 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP3 GT PUSH2 0x16E1 JUMPI POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x80 SHL DUP3 LT PUSH2 0x16FA JUMPI PUSH1 0x80 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x40 SHL JUMPDEST PUSH1 0x1 PUSH1 0x40 SHL DUP3 LT PUSH2 0x1710 JUMPI PUSH1 0x40 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x20 SHL JUMPDEST PUSH5 0x100000000 DUP3 LT PUSH2 0x1727 JUMPI PUSH1 0x20 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x10 SHL JUMPDEST PUSH3 0x10000 DUP3 LT PUSH2 0x173C JUMPI PUSH1 0x10 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x8 SHL JUMPDEST PUSH2 0x100 DUP3 LT PUSH2 0x1750 JUMPI PUSH1 0x8 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x4 SHL JUMPDEST PUSH1 0x10 DUP3 LT PUSH2 0x1763 JUMPI PUSH1 0x4 SWAP2 SWAP1 SWAP2 SHR SWAP1 PUSH1 0x2 SHL JUMPDEST PUSH1 0x4 DUP3 LT PUSH2 0x176F JUMPI PUSH1 0x1 SHL JUMPDEST PUSH1 0x3 MUL PUSH1 0x1 SWAP1 DUP2 SHR SWAP1 DUP2 DUP6 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1787 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x179F JUMPI PUSH2 0x179F PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17B7 JUMPI PUSH2 0x17B7 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17CF JUMPI PUSH2 0x17CF PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17E7 JUMPI PUSH2 0x17E7 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH1 0x1 DUP2 DUP6 DUP2 PUSH2 0x17FF JUMPI PUSH2 0x17FF PUSH2 0x291A JUMP JUMPDEST DIV DUP3 ADD SWAP1 SHR SWAP1 POP PUSH2 0x181E DUP2 DUP6 DUP2 PUSH2 0x1818 JUMPI PUSH2 0x1818 PUSH2 0x291A JUMP JUMPDEST DIV DUP3 GT SWAP1 JUMP JUMPDEST SWAP1 SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP4 LT ISZERO PUSH2 0x187E JUMPI PUSH0 PUSH2 0x183C DUP5 DUP5 PUSH2 0x1ECF JUMP JUMPDEST PUSH0 DUP8 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 SWAP1 SWAP2 POP PUSH6 0xFFFFFFFFFFFF DUP7 AND SWAP1 DUP3 ADD SLOAD PUSH6 0xFFFFFFFFFFFF AND GT ISZERO PUSH2 0x186A JUMPI DUP1 SWAP3 POP PUSH2 0x1878 JUMP JUMPDEST PUSH2 0x1875 DUP2 PUSH1 0x1 PUSH2 0x28F0 JUMP JUMPDEST SWAP4 POP JUMPDEST POP PUSH2 0x1829 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x18D7 PUSH2 0x1886 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03 PUSH2 0x1910 DUP5 DUP3 PUSH2 0x2972 JUMP JUMPDEST POP PUSH1 0x4 DUP2 ADD PUSH2 0xE2B DUP4 DUP3 PUSH2 0x2972 JUMP JUMPDEST PUSH2 0x1927 PUSH2 0x1886 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH32 0xA16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D102 PUSH2 0x1960 DUP5 DUP3 PUSH2 0x2972 JUMP JUMPDEST POP PUSH1 0x3 DUP2 ADD PUSH2 0x196F DUP4 DUP3 PUSH2 0x2972 JUMP JUMPDEST POP PUSH0 DUP1 DUP3 SSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE POP POP JUMP JUMPDEST PUSH2 0xD86 PUSH2 0x1886 JUMP JUMPDEST PUSH2 0x198F DUP3 PUSH2 0x1EE9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP1 PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B SWAP1 PUSH0 SWAP1 LOG2 DUP1 MLOAD ISZERO PUSH2 0x19D3 JUMPI PUSH2 0xDC8 DUP3 DUP3 PUSH2 0x1F4C JUMP JUMPDEST PUSH2 0x926 PUSH2 0x1FBE JUMP JUMPDEST PUSH0 PUSH2 0x6CB DUP3 PUSH2 0x983 JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP1 DUP5 AND EQ DUP1 ISZERO SWAP1 PUSH2 0x1A0E JUMPI POP PUSH0 DUP3 GT JUMPDEST ISZERO PUSH2 0xE2B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0x1AB7 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1A52 SWAP1 PUSH2 0x1FDD PUSH2 0x1A4D DUP8 PUSH2 0x1FE8 JUMP JUMPDEST PUSH2 0x201B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1AAC SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0xE2B JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 PUSH2 0x1AF1 SWAP1 PUSH2 0x204C PUSH2 0x1A4D DUP8 PUSH2 0x1FE8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 POP DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724 DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x1B4B SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH4 0xFFFFFFFF DUP3 GT ISZERO PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 PUSH32 0x5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00 PUSH2 0x994 JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0x1BEC JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0x1C71 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1C3D JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C68 JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0x1C71 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1C8E JUMPI PUSH2 0x1C8E PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x1C97 JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1CAB JUMPI PUSH2 0x1CAB PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x1CC9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1CDD JUMPI PUSH2 0x1CDD PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x1CFE JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x1D12 JUMPI PUSH2 0x1D12 PUSH2 0x2A32 JUMP JUMPDEST SUB PUSH2 0x926 JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH0 ADD DUP3 PUSH4 0xFFFFFFFF AND DUP2 SLOAD DUP2 LT PUSH2 0x1D60 JUMPI PUSH2 0x1D60 PUSH2 0x2A46 JUMP JUMPDEST PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE SWAP2 ADD SLOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x1DAB DUP4 DUP4 DUP4 PUSH2 0x2057 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x1E1A JUMPI PUSH0 PUSH2 0x1DE2 PUSH32 0x52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02 SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP3 GT ISZERO PUSH2 0x1E17 JUMPI PUSH1 0x40 MLOAD PUSH4 0xE58AE93 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xDC8 DUP4 DUP4 DUP4 PUSH2 0x2190 JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 PUSH2 0x1E3D PUSH2 0x1371 JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1E55 JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP1 ISZERO PUSH2 0x1E64 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0xC5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH0 PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B1C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 PUSH2 0x1EA5 PUSH2 0x13AF JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1EBD JUMPI DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x1E64 JUMPI SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x1EDD PUSH1 0x2 DUP5 DUP5 XOR PUSH2 0x2A5A JUMP JUMPDEST PUSH2 0x6EF SWAP1 DUP5 DUP5 AND PUSH2 0x28F0 JUMP JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE PUSH0 SUB PUSH2 0x1F1E JUMPI PUSH1 0x40 MLOAD PUSH4 0x4C9C8CE3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2B3C DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x40 MLOAD PUSH2 0x1F68 SWAP2 SWAP1 PUSH2 0x2A79 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1FA0 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1FA5 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1FB5 DUP6 DUP4 DUP4 PUSH2 0x2201 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x9C4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB398979F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x6EF DUP3 DUP5 PUSH2 0x2A94 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 GT ISZERO PUSH2 0x16D0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x6DFCC65 PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0xD0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x203F TIMESTAMP PUSH2 0x2037 PUSH2 0x202D DUP9 PUSH2 0x13C5 JUMP JUMPDEST DUP7 DUP9 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP8 SWAP2 SWAP1 PUSH2 0x225D JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6EF DUP3 DUP5 PUSH2 0x2ABB JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2AFC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2091 JUMPI DUP2 DUP2 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x2086 SWAP2 SWAP1 PUSH2 0x28F0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x2101 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 DUP2 LT ISZERO PUSH2 0x20E3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0xA3B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP4 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x211F JUMPI PUSH1 0x2 DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 0x213D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP3 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP5 PUSH1 0x40 MLOAD PUSH2 0x2182 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x2ADC DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x21C2 JUMPI PUSH2 0x21BF DUP2 PUSH1 0x2 ADD PUSH2 0x204C PUSH2 0x1A4D DUP6 PUSH2 0x1FE8 JUMP JUMPDEST POP POP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x21E6 JUMPI PUSH2 0x21E3 DUP2 PUSH1 0x2 ADD PUSH2 0x1FDD PUSH2 0x1A4D DUP6 PUSH2 0x1FE8 JUMP JUMPDEST POP POP JUMPDEST PUSH2 0xE2B PUSH2 0x21F2 DUP6 PUSH2 0x945 JUMP JUMPDEST PUSH2 0x21FB DUP6 PUSH2 0x945 JUMP JUMPDEST DUP5 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x2216 JUMPI PUSH2 0x2211 DUP3 PUSH2 0x226A JUMP JUMPDEST PUSH2 0x6EF JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x222D JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x2256 JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA3B JUMP JUMPDEST POP DUP1 PUSH2 0x6EF JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x203F DUP6 DUP6 DUP6 PUSH2 0x2293 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x227A JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xD6BDA275 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP2 SWAP1 DUP1 ISZERO PUSH2 0x2389 JUMPI PUSH0 PUSH2 0x22AF DUP8 PUSH2 0xF5B PUSH1 0x1 DUP6 PUSH2 0x28DD JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP2 POP PUSH6 0xFFFFFFFFFFFF DUP1 DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0x30 SHL SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB AND SWAP1 DUP9 AND DUP3 GT ISZERO PUSH2 0x22F2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x2520601D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP8 PUSH6 0xFFFFFFFFFFFF AND DUP3 PUSH6 0xFFFFFFFFFFFF AND SUB PUSH2 0x232B JUMPI DUP3 SLOAD PUSH6 0xFFFFFFFFFFFF AND PUSH1 0x1 PUSH1 0x30 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP10 AND MUL OR DUP4 SSTORE PUSH2 0x237B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP11 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP11 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP14 SLOAD PUSH1 0x1 DUP2 ADD DUP16 SSTORE PUSH0 DUP16 DUP2 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP5 MLOAD SWAP2 MLOAD SWAP1 SWAP3 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 ADD SSTORE JUMPDEST SWAP5 POP DUP6 SWAP4 POP PUSH2 0x2044 SWAP3 POP POP POP JUMP JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH6 0xFFFFFFFFFFFF DUP1 DUP6 AND DUP3 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP1 DUP6 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE DUP9 SLOAD PUSH1 0x1 DUP2 ADD DUP11 SSTORE PUSH0 DUP11 DUP2 MSTORE SWAP2 DUP3 KECCAK256 SWAP6 MLOAD SWAP3 MLOAD SWAP1 SWAP4 AND PUSH1 0x1 PUSH1 0x30 SHL MUL SWAP2 SWAP1 SWAP4 AND OR SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 POP DUP2 PUSH2 0x2044 JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x23FD JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x23E5 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x241C DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x23E3 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x6EF PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x2405 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x2458 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x246E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2477 DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2497 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24A0 DUP5 PUSH2 0x2442 JUMP JUMPDEST SWAP3 POP PUSH2 0x24AE PUSH1 0x20 DUP6 ADD PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24CF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24D8 DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH2 0x24E6 PUSH1 0x20 DUP5 ADD PUSH2 0x2442 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2514 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x251D DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2539 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x254C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x255E JUMPI PUSH2 0x255E PUSH2 0x24EF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x2586 JUMPI PUSH2 0x2586 PUSH2 0x24EF JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP9 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x259E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x25CF JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x6EF DUP3 PUSH2 0x2442 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH0 PUSH1 0x20 PUSH1 0xE0 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x25F8 PUSH1 0xE0 DUP5 ADD DUP11 PUSH2 0x2405 JUMP JUMPDEST DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x260A DUP2 DUP11 PUSH2 0x2405 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD DUP10 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0xA0 DUP6 ADD DUP8 SWAP1 MSTORE DUP5 DUP2 SUB PUSH1 0xC0 DUP7 ADD MSTORE DUP6 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP9 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x265D JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x2641 JUMP JUMPDEST POP SWAP1 SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x267F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0x2458 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0xC0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x26AB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x26B4 DUP8 PUSH2 0x2442 JUMP JUMPDEST SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH2 0x26D0 PUSH1 0x60 DUP9 ADD PUSH2 0x2686 JUMP JUMPDEST SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0xA0 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0x2700 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2709 DUP9 PUSH2 0x2442 JUMP JUMPDEST SWAP7 POP PUSH2 0x2717 PUSH1 0x20 DUP10 ADD PUSH2 0x2442 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH2 0x2733 PUSH1 0x80 DUP10 ADD PUSH2 0x2686 JUMP JUMPDEST SWAP3 POP PUSH1 0xA0 DUP9 ADD CALLDATALOAD SWAP2 POP PUSH1 0xC0 DUP9 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2760 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2769 DUP4 PUSH2 0x2442 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x2781 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x27A0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x27BE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0x2812 JUMPI DUP2 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x27F8 JUMPI PUSH2 0x27F8 PUSH2 0x27C4 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0x2805 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0x27DD JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x2828 JUMPI POP PUSH1 0x1 PUSH2 0x6CB JUMP JUMPDEST DUP2 PUSH2 0x2834 JUMPI POP PUSH0 PUSH2 0x6CB JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x284A JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x2854 JUMPI PUSH2 0x2870 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x6CB JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x2865 JUMPI PUSH2 0x2865 PUSH2 0x27C4 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x6CB JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x2893 JUMPI POP DUP2 DUP2 EXP PUSH2 0x6CB JUMP JUMPDEST PUSH2 0x289D DUP4 DUP4 PUSH2 0x27D8 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x28B0 JUMPI PUSH2 0x28B0 PUSH2 0x27C4 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x6EF PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x281A JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x27C4 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x27C4 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6CB JUMPI PUSH2 0x6CB PUSH2 0x27C4 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2913 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0xDC8 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x2953 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1619 JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x295F JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x298C JUMPI PUSH2 0x298C PUSH2 0x24EF JUMP JUMPDEST PUSH2 0x29A0 DUP2 PUSH2 0x299A DUP5 SLOAD PUSH2 0x278C JUMP JUMPDEST DUP5 PUSH2 0x292E JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x29D3 JUMPI PUSH0 DUP5 ISZERO PUSH2 0x29BC JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0x2A2A JUMP JUMPDEST PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2A01 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0x29E2 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0x2A1E JUMPI DUP8 DUP6 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP5 PUSH1 0x1 SHL ADD DUP6 SSTORE JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP3 PUSH2 0x2A74 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x2A8A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x23E3 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP3 DUP2 AND DUP3 DUP3 AND SUB SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2AB4 JUMPI PUSH2 0x2AB4 PUSH2 0x27C4 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xD0 SHL SUB DUP2 DUP2 AND DUP4 DUP3 AND ADD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0x2AB4 JUMPI PUSH2 0x2AB4 PUSH2 0x27C4 JUMP INVALID 0xE8 0xB2 PUSH13 0x30FAD74198956032A3533D9033 DUP6 0xD5 PUSH14 0xD795AF560196F9C78D4AF40D0052 0xC6 ORIGIN SELFBALANCE 0xE1 DELEGATECALL PUSH30 0xB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE00A16A46D942 PUSH2 0xC751 PUSH29 0xC8FF89F61C0CE93598E3C849801011DEE649A6A557D100360894A13BA1 LOG3 0x21 MOD PUSH8 0xC828492DB98DCA3E KECCAK256 PUSH23 0xCC3735A920A3CA505D382BBCA2646970667358221220CA SLOAD 0xC6 0xC5 SWAP11 0xCA SWAP2 PUSH29 0xFD139C6EBB26882AE2FF0BA831E27D74043D1B416A13538764736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ",
		"sourceMap": "955:1459:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2716:144:4;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;5210:186;;;;;;;;;;-1:-1:-1;5210:186:4;;;;;:::i;:::-;;:::i;:::-;;;1372:14:35;;1365:22;1347:41;;1335:2;1320:18;5210:186:4;1207:187:35;3896:152:4;;;;;;;;;;-1:-1:-1;4027:14:4;;3896:152;;;1545:25:35;;;1533:2;1518:18;3896:152:4;1399:177:35;5988:244:4;;;;;;;;;;-1:-1:-1;5988:244:4;;;;;:::i;:::-;;:::i;3754:82::-;;;;;;;;;;-1:-1:-1;3754:82:4;;3827:2;2056:36:35;;2044:2;2029:18;3754:82:4;1914:184:35;3085:112:5;;;;;;;;;;;;;:::i;5247:253:1:-;;;;;;;;;;-1:-1:-1;5247:253:1;;;;;:::i;:::-;;:::i;1214:350:34:-;;;;;;;;;;-1:-1:-1;1214:350:34;;;;;:::i;:::-;;:::i;:::-;;1731:107;;;;;;;;;;-1:-1:-1;1808:23:34;;;;;;;;;;;;-1:-1:-1;;;1808:23:34;;;;1731:107;;4161:214:3;;;;;;:::i;:::-;;:::i;3708:134::-;;;;;;;;;;;;;:::i;6697:172:1:-;;;;;;;;;;-1:-1:-1;6697:172:1;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;4037:32:35;;;4019:51;;4007:2;3992:18;6697:172:1;3873:203:35;6951:138:1;;;;;;;;;;-1:-1:-1;6951:138:1;;;;;:::i;:::-;;:::i;3559:126:6:-;;;;;;;;;;-1:-1:-1;3559:126:6;;;;;:::i;:::-;;:::i;:::-;;;4255:10:35;4243:23;;;4225:42;;4213:2;4198:18;3559:126:6;4081:192:35;4106:171:4;;;;;;;;;;-1:-1:-1;4106:171:4;;;;;:::i;:::-;;:::i;3155:101:0:-;;;;;;;;;;;;;:::i;2220:192:34:-;;;;;;;;;;-1:-1:-1;2220:192:34;;;;;:::i;:::-;;:::i;5173:903:9:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;2441:144:0:-;;;;;;;;;;-1:-1:-1;1313:22:0;2570:8;-1:-1:-1;;;;;2570:8:0;2441:144;;6136:230:1;;;;;;;;;;-1:-1:-1;6136:230:1;;;;;:::i;:::-;;:::i;1570:102:34:-;;;;;;;;;;-1:-1:-1;1570:102:34;;5901:14:35;1649:15:34;5889:27:35;5871:46;;5859:2;5844:18;1570:102:34;5727:196:35;2973:148:4;;;;;;;;;;;;;:::i;4672:190:1:-;;;;;;;;;;-1:-1:-1;4672:190:1;;;;;:::i;:::-;;:::i;4472:178:4:-;;;;;;;;;;-1:-1:-1;4472:178:4;;;;;:::i;:::-;;:::i;1819:58:3:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1819:58:3;;;;;7167:554:1;;;;;;;;;;-1:-1:-1;7167:554:1;;;;;:::i;:::-;;:::i;2098:672:5:-;;;;;;;;;;-1:-1:-1;2098:672:5;;;;;:::i;:::-;;:::i;4708:195:4:-;;;;;;;;;;-1:-1:-1;4708:195:4;;;;;:::i;:::-;;:::i;3762:163:6:-;;;;;;;;;;-1:-1:-1;3762:163:6;;;;;:::i;:::-;;:::i;:::-;;;;7821:13:35;;7836:14;7817:34;7799:53;;7912:4;7900:17;;;7894:24;-1:-1:-1;;;;;7890:50:35;7868:20;;;7861:80;;;;7772:18;3762:163:6;7591:356:35;3405:215:0;;;;;;;;;;-1:-1:-1;3405:215:0;;;;;:::i;:::-;;:::i;2716:144:4:-;2761:13;2786:22;-1:-1:-1;;;;;;;;;;;2811:18:4;2786:43;;2846:1;:7;;2839:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2716:144;:::o;5210:186::-;5283:4;966:10:7;5337:31:4;966:10:7;5353:7:4;5362:5;5337:8;:31::i;:::-;5385:4;5378:11;;;5210:186;;;;;:::o;5988:244::-;6075:4;966:10:7;6131:37:4;6147:4;966:10:7;6162:5:4;6131:15;:37::i;:::-;6178:26;6188:4;6194:2;6198:5;6178:9;:26::i;:::-;6221:4;6214:11;;;5988:244;;;;;;:::o;3085:112:5:-;3144:7;3170:20;:18;:20::i;:::-;3163:27;;3085:112;:::o;5247:253:1:-;5334:7;-1:-1:-1;;;;;;;;;;;5413:80:1;5463:29;5482:9;5463:18;:29::i;:::-;-1:-1:-1;;;;;5413:31:1;;;;;;:22;;;:31;;;;;;:49;:80::i;:::-;-1:-1:-1;;;;;5406:87:1;;5247:253;-1:-1:-1;;;;5247:253:1:o;1214:350:34:-;8870:21:2;4302:15;;-1:-1:-1;;;4302:15:2;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:2;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:2;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:2;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:2;-1:-1:-1;;;5013:22:2;;;4979:67;1316:37:34::1;;;;;;;;;;;;;;-1:-1:-1::0;;;1316:37:34::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;1316:37:34::1;;::::0;:12:::1;:37::i;:::-;1363:36;;;;;;;;;;;;;;-1:-1:-1::0;;;1363:36:34::1;;::::0;:18:::1;:36::i;:::-;1409:19;:17;:19::i;:::-;1438:28;1453:12;1438:14;:28::i;:::-;1476:24;:22;:24::i;:::-;1511:46;1517:9:::0;1540:16:::1;3827:2:4::0;1540::34::1;:16;:::i;:::-;1528:28;::::0;:9:::1;:28;:::i;:::-;1511:5;:46::i;:::-;5070:14:2::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:2;;;5142:14;;-1:-1:-1;10172:50:35;;5142:14:2;;10160:2:35;10145:18;5142:14:2;;;;;;;5066:101;4092:1081;;;;;1214:350:34;;:::o;4161:214:3:-;2655:13;:11;:13::i;:::-;4276:36:::1;4294:17;4276;:36::i;:::-;4322:46;4344:17;4363:4;4322:21;:46::i;:::-;4161:214:::0;;:::o;3708:134::-;3777:7;2926:20;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;;3708:134:3;:::o;6697:172:1:-;-1:-1:-1;;;;;6841:21:1;;;6762:7;6841:21;;;-1:-1:-1;;;;;;;;;;;6841:21:1;;;;;;;;6697:172::o;6951:138::-;966:10:7;7053:29:1;966:10:7;7072:9:1;7053;:29::i;3559:126:6:-;3629:6;3654:24;3670:7;3654:15;:24::i;4106:171:4:-;4171:7;;-1:-1:-1;;;;;;;;;;;4215:18:4;-1:-1:-1;;;;;4250:20:4;;;:11;:20;;;;;;;;-1:-1:-1;;4250:20:4;;;;;4106:171::o;3155:101:0:-;2334:13;:11;:13::i;:::-;3219:30:::1;3246:1;3219:18;:30::i;:::-;3155:101::o:0;2220:192:34:-;2356:7;2386:19;2399:5;2386:12;:19::i;5173:903:9:-;5271:13;5298:18;;5271:13;;;5298:18;5271:13;-1:-1:-1;;;;;;;;;;;5777:13:9;;5511:45;;-1:-1:-1;5777:18:9;:43;;;;-1:-1:-1;5799:16:9;;;;:21;5777:43;5769:77;;;;-1:-1:-1;;;5769:77:9;;10435:2:35;5769:77:9;;;10417:21:35;10474:2;10454:18;;;10447:30;-1:-1:-1;;;10493:18:35;;;10486:51;10554:18;;5769:77:9;;;;;;;;;5908:13;:11;:13::i;:::-;5935:16;:14;:16::i;:::-;6043;;;6027:1;6043:16;;;;;;;;;-1:-1:-1;;;5857:212:9;;;-1:-1:-1;5857:212:9;;-1:-1:-1;5965:13:9;;-1:-1:-1;6000:4:9;;-1:-1:-1;6027:1:9;-1:-1:-1;6043:16:9;-1:-1:-1;5857:212:9;-1:-1:-1;;5173:903:9:o;6136:230:1:-;6212:7;-1:-1:-1;;;;;;;;;;;6291:68:1;6329:29;6348:9;6329:18;:29::i;:::-;6291:19;;;;:37;:68::i;:::-;-1:-1:-1;;;;;6284:75:1;;6136:230;-1:-1:-1;;;6136:230:1:o;2973:148:4:-;3105:9;3098:16;;3020:13;;-1:-1:-1;;;;;;;;;;;2064:20:4;3098:16;;;:::i;4672:190:1:-;-1:-1:-1;;;;;4815:31:1;;4736:7;4815:31;;;:22;:31;;;;;-1:-1:-1;;;;;;;;;;;3058:20:1;4815:40;;:38;:40::i;4472:178:4:-;4541:4;966:10:7;4595:27:4;966:10:7;4612:2:4;4616:5;4595:9;:27::i;7167:554:1:-;7372:6;7354:15;:24;7350:91;;;7401:29;;-1:-1:-1;;;7401:29:1;;;;;1545:25:35;;;1518:18;;7401:29:1;1399:177:35;7350:91:1;7521:57;;;2345:71;7521:57;;;10814:25:35;-1:-1:-1;;;;;10875:32:35;;10855:18;;;10848:60;;;;10924:18;;;10917:34;;;10967:18;;;10960:34;;;7450:14:1;;7467:168;;7494:86;;10786:19:35;;7521:57:1;;;;;;;;;;;;7511:68;;;;;;7494:16;:86::i;:::-;7594:1;7609;7624;7467:13;:168::i;:::-;7450:185;;7645:31;7662:6;7670:5;7645:16;:31::i;:::-;7686:28;7696:6;7704:9;7686;:28::i;2098:672:5:-;2319:8;2301:15;:26;2297:97;;;2350:33;;-1:-1:-1;;;2350:33:5;;;;;1545:25:35;;;1518:18;;2350:33:5;1399:177:35;2297:97:5;2404:18;1279:95;2463:5;2470:7;2479:5;2486:16;2496:5;2486:9;:16::i;:::-;2435:78;;;;;;11292:25:35;;;;-1:-1:-1;;;;;11391:15:35;;;11371:18;;;11364:43;11443:15;;;;11423:18;;;11416:43;11475:18;;;11468:34;11518:19;;;11511:35;11562:19;;;11555:35;;;11264:19;;2435:78:5;;;;;;;;;;;;2425:89;;;;;;2404:110;;2525:12;2540:28;2557:10;2540:16;:28::i;:::-;2525:43;;2579:14;2596:28;2610:4;2616:1;2619;2622;2596:13;:28::i;:::-;2579:45;;2648:5;-1:-1:-1;;;;;2638:15:5;:6;-1:-1:-1;;;;;2638:15:5;;2634:88;;2676:35;;-1:-1:-1;;;2676:35:5;;-1:-1:-1;;;;;11831:15:35;;;2676:35:5;;;11813:34:35;11883:15;;11863:18;;;11856:43;11748:18;;2676:35:5;11601:304:35;2634:88:5;2732:31;2741:5;2748:7;2757:5;2732:8;:31::i;:::-;2287:483;;;2098:672;;;;;;;:::o;4708:195:4:-;-1:-1:-1;;;;;4867:20:4;;;4788:7;4867:20;;;:13;:20;;;;;;;;:29;;;;;;;;;;;;;4708:195::o;3762:163:6:-;-1:-1:-1;;;;;;;;;;;;;;;;;3892:26:6;3905:7;3914:3;3892:12;:26::i;3405:215:0:-;2334:13;:11;:13::i;:::-;-1:-1:-1;;;;;3489:22:0;::::1;3485:91;;3534:31;::::0;-1:-1:-1;;;3534:31:0;;3562:1:::1;3534:31;::::0;::::1;4019:51:35::0;3992:18;;3534:31:0::1;3873:203:35::0;3485:91:0::1;3585:28;3604:8;3585:18;:28::i;:::-;3405:215:::0;:::o;10001:128:4:-;10085:37;10094:5;10101:7;10110:5;10117:4;10085:8;:37::i;:::-;10001:128;;;:::o;11745:476::-;11844:24;11871:25;11881:5;11888:7;11871:9;:25::i;:::-;11844:52;;-1:-1:-1;;11910:16:4;:36;11906:309;;;11985:5;11966:16;:24;11962:130;;;12017:60;;-1:-1:-1;;;12017:60:4;;-1:-1:-1;;;;;12130:32:35;;12017:60:4;;;12112:51:35;12179:18;;;12172:34;;;12222:18;;;12215:34;;;12085:18;;12017:60:4;11910:345:35;11962:130:4;12133:57;12142:5;12149:7;12177:5;12158:16;:24;12184:5;12133:8;:57::i;:::-;11834:387;11745:476;;;:::o;6605:300::-;-1:-1:-1;;;;;6688:18:4;;6684:86;;6729:30;;-1:-1:-1;;;6729:30:4;;6756:1;6729:30;;;4019:51:35;3992:18;;6729:30:4;3873:203:35;6684:86:4;-1:-1:-1;;;;;6783:16:4;;6779:86;;6822:32;;-1:-1:-1;;;6822:32:4;;6851:1;6822:32;;;4019:51:35;3992:18;;6822:32:4;3873:203:35;6779:86:4;6874:24;6882:4;6888:2;6892:5;6874:7;:24::i;4015:109:9:-;4068:7;4094:23;:21;:23::i;4309:273:1:-;4379:6;1649:15:34;4444:29:1;;;;;4440:90;;4482:48;;-1:-1:-1;;;4482:48:1;;;;;12432:25:35;;;12505:14;12493:27;;12473:18;;;12466:55;12405:18;;4482:48:1;12260:267:35;4440:90:1;4547:28;4565:9;4547:17;:28::i;9584:606:32:-;9702:24;;9669:7;;;9702:24;9801:1;9795:7;;9791:234;;;9818:11;9838:14;9848:3;9838:9;:14::i;:::-;9832:20;;:3;:20;:::i;:::-;14399:28;14462:20;;;14527:4;14514:18;;9818:34;;-1:-1:-1;14510:28:32;;9876:42;;;;;9870:48;;;;9866:149;;;9945:3;9938:10;;9866:149;;;9993:7;:3;9999:1;9993:7;:::i;:::-;9987:13;;9866:149;9804:221;9791:234;10035:11;10049:53;10068:4;10087:3;10092;10097:4;10049:18;:53::i;:::-;10035:67;-1:-1:-1;10120:8:32;;:63;;10135:41;10149:4;10168:7;10174:1;10168:3;:7;:::i;:::-;14399:28;14462:20;;;14527:4;14514:18;;;14510:28;;14289:265;10135:41;:48;-1:-1:-1;;;10135:48:32;;-1:-1:-1;;;;;10135:48:32;10120:63;;;10131:1;10120:63;10113:70;9584:606;-1:-1:-1;;;;;;;9584:606:32:o;2282:147:4:-;6931:20:2;:18;:20::i;:::-;2384:38:4::1;2407:5;2414:7;2384:22;:38::i;1832:125:5:-:0;6931:20:2;:18;:20::i;:::-;1916:34:5::1;1940:4;1916:34;;;;;;;;;;;;;-1:-1:-1::0;;;1916:34:5::1;;::::0;:23:::1;:34::i;1601:62:6:-:0;6931:20:2;:18;:20::i;1847:127:0:-;6931:20:2;:18;:20::i;:::-;1929:38:0::1;1954:12;1929:24;:38::i;8733:208:4:-:0;-1:-1:-1;;;;;8803:21:4;;8799:91;;8847:32;;-1:-1:-1;;;8847:32:4;;8876:1;8847:32;;;4019:51:35;3992:18;;8847:32:4;3873:203:35;8799:91:4;8899:35;8915:1;8919:7;8928:5;8899:7;:35::i;4603:312:3:-;4683:4;-1:-1:-1;;;;;4692:6:3;4675:23;;;:120;;;4789:6;-1:-1:-1;;;;;4753:42:3;:32;-1:-1:-1;;;;;;;;;;;1519:53:17;-1:-1:-1;;;;;1519:53:17;;1441:138;4753:32:3;-1:-1:-1;;;;;4753:42:3;;;4675:120;4658:251;;;4869:29;;-1:-1:-1;;;4869:29:3;;;;;;;;;;;1844:112:34;2334:13:0;:11;:13::i;6057:538:3:-;6174:17;-1:-1:-1;;;;;6156:50:3;;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6156:52:3;;;;;;;;-1:-1:-1;;6156:52:3;;;;;;;;;;;;:::i;:::-;;;6152:437;;6518:60;;-1:-1:-1;;;6518:60:3;;-1:-1:-1;;;;;4037:32:35;;6518:60:3;;;4019:51:35;3992:18;;6518:60:3;3873:203:35;6152:437:3;-1:-1:-1;;;;;;;;;;;6250:40:3;;6246:120;;6317:34;;-1:-1:-1;;;6317:34:3;;;;;1545:25:35;;;1518:18;;6317:34:3;1399:177:35;6246:120:3;6379:54;6409:17;6428:4;6379:29;:54::i;5032:213::-;5106:4;-1:-1:-1;;;;;5115:6:3;5098:23;;5094:145;;5199:29;;-1:-1:-1;;;5199:29:3;;;;;;;;;;;7899:367:1;-1:-1:-1;;;;;;;;;;;7981:22:1;8056:18;8066:7;8056:9;:18::i;:::-;-1:-1:-1;;;;;8084:21:1;;;:12;:21;;;;;;;;;;;:33;;-1:-1:-1;;;;;;8084:33:1;;;;;;;;;;8133:48;;8034:40;;-1:-1:-1;8084:33:1;8133:48;;;;;;8084:12;8133:48;8191:68;8210:11;8223:9;8234:24;8250:7;8234:15;:24::i;:::-;8191:18;:68::i;9963:217::-;-1:-1:-1;;;;;10132:31:1;;10036:6;10132:31;;;:22;:31;;;;;11240:24:32;-1:-1:-1;;;;;;;;;;;3058:20:1;10114:59;;:17;:59::i;2658:162:0:-;966:10:7;2717:7:0;1313:22;2570:8;-1:-1:-1;;;;;2570:8:0;;2441:144;2717:7;-1:-1:-1;;;;;2717:23:0;;2713:101;;2763:40;;-1:-1:-1;;;2763:40:0;;966:10:7;2763:40:0;;;4019:51:35;3992:18;;2763:40:0;3873:203:35;3774:248:0;1313:22;3923:8;;-1:-1:-1;;;;;;3941:19:0;;-1:-1:-1;;;;;3941:19:0;;;;;;;;3975:40;;3923:8;;;;;3975:40;;3847:24;;3975:40;3837:185;;3774:248;:::o;2824:154:5:-;2926:7;2952:19;2965:5;2952:12;:19::i;6300:155:9:-;6441:7;6434:14;;6354:13;;-1:-1:-1;;;;;;;;;;;2839:21:9;6434:14;;;:::i;6682:161::-;6739:13;6764:23;-1:-1:-1;;;;;;;;;;;6790:19:9;2720:156;10310:206:32;10405:24;;10372:7;;10446:8;;:63;;10461:41;10475:4;10494:7;10500:1;10494:3;:7;:::i;10461:41::-;:48;-1:-1:-1;;;10461:48:32;;-1:-1:-1;;;;;10461:48:32;10446:63;;;10457:1;10439:70;10310:206;-1:-1:-1;;;10310:206:32:o;4946:176:9:-;5023:7;5049:66;5082:20;:18;:20::i;:::-;5104:10;3501:4:28;3495:11;-1:-1:-1;;;3519:23:28;;3571:4;3562:14;;3555:39;;;;3623:4;3614:14;;3607:34;3679:4;3664:20;;;3326:374;6887:260:27;6972:7;6992:17;7011:18;7031:16;7051:25;7062:4;7068:1;7071;7074;7051:10;:25::i;:::-;6991:85;;;;;;7086:28;7098:5;7105:8;7086:11;:28::i;:::-;-1:-1:-1;7131:9:27;;6887:260;-1:-1:-1;;;;;;6887:260:27:o;2100:222:8:-;2183:15;2201:16;2211:5;2201:9;:16::i;:::-;2183:34;;2240:7;2231:5;:16;2227:89;;2270:35;;-1:-1:-1;;;2270:35:8;;-1:-1:-1;;;;;13176:32:35;;2270:35:8;;;13158:51:35;13225:18;;;13218:34;;;13131:18;;2270:35:8;12984:274:35;1537:452:8;-1:-1:-1;;;;;1954:16:8;1597:7;1954:16;;;1005:21;1954:16;;;;;:18;;;;;;;;;1537:452::o;10257:254:1:-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;10465:31:1;;;;:22;:31;;;;;;-1:-1:-1;;;;;;;;;;;3058:20:1;10465:39;;10500:3;10465:34;:39::i;:::-;10458:46;10257:254;-1:-1:-1;;;;10257:254:1:o;10976:487:4:-;-1:-1:-1;;;;;;;;;;;;;;;;11141:19:4;;11137:89;;11183:32;;-1:-1:-1;;;11183:32:4;;11212:1;11183:32;;;4019:51:35;3992:18;;11183:32:4;3873:203:35;11137:89:4;-1:-1:-1;;;;;11239:21:4;;11235:90;;11283:31;;-1:-1:-1;;;11283:31:4;;11311:1;11283:31;;;4019:51:35;3992:18;;11283:31:4;3873:203:35;11235:90:4;-1:-1:-1;;;;;11334:20:4;;;;;;;:13;;;:20;;;;;;;;:29;;;;;;;;;:37;;;11381:76;;;;11431:7;-1:-1:-1;;;;;11415:31:4;11424:5;-1:-1:-1;;;;;11415:31:4;;11440:5;11415:31;;;;1545:25:35;;1533:2;1518:18;;1399:177;11415:31:4;;;;;;;;11381:76;11074:389;10976:487;;;;:::o;2030:184:34:-;2177:30;2191:4;2197:2;2201:5;2177:13;:30::i;4130:191:9:-;4185:7;2073:95;4243:17;:15;:17::i;:::-;4262:20;:18;:20::i;:::-;4221:92;;;;;;13522:25:35;;;;13563:18;;13556:34;;;;13606:18;;;13599:34;4284:13:9;13649:18:35;;;13642:34;4307:4:9;13692:19:35;;;13685:61;13494:19;;4221:92:9;;;;;;;;;;;;4211:103;;;;;;4204:110;;4130:191;:::o;14296:213:30:-;14352:6;14382:16;14374:24;;14370:103;;;14421:41;;-1:-1:-1;;;14421:41:30;;14452:2;14421:41;;;13938:36:35;13990:18;;;13983:34;;;13911:18;;14421:41:30;13757:266:35;14370:103:30;-1:-1:-1;14496:5:30;14296:213::o;18080:5181:29:-;18128:7;18246:1;18241;:6;18237:53;;-1:-1:-1;18274:1:29;18080:5181::o;18237:53::-;19230:1;19258;-1:-1:-1;;;19278:16:29;;19274:92;;19321:3;19314:10;;;;;19349:2;19342:9;19274:92;-1:-1:-1;;;19383:2:29;:15;19379:90;;19425:2;19418:9;;;;;19452:2;19445:9;19379:90;19493:7;19486:2;:15;19482:90;;19528:2;19521:9;;;;;19555:2;19548:9;19482:90;19596:7;19589:2;:15;19585:89;;19631:2;19624:9;;;;;19658:1;19651:8;19585:89;19698:6;19691:2;:14;19687:87;;19732:1;19725:8;;;;;19758:1;19751:8;19687:87;19798:6;19791:2;:14;19787:87;;19832:1;19825:8;;;;;19858:1;19851:8;19787:87;19898:6;19891:2;:14;19887:61;;19932:1;19925:8;19887:61;20374:1;:6;20385:1;20373:13;;;;;22284:1;20373:13;22284:6;;;;:::i;:::-;;22279:2;:11;22278:18;;22273:23;;22404:1;22397:2;22393:1;:6;;;;;:::i;:::-;;22388:2;:11;22387:18;;22382:23;;22515:1;22508:2;22504:1;:6;;;;;:::i;:::-;;22499:2;:11;22498:18;;22493:23;;22624:1;22617:2;22613:1;:6;;;;;:::i;:::-;;22608:2;:11;22607:18;;22602:23;;22734:1;22727:2;22723:1;:6;;;;;:::i;:::-;;22718:2;:11;22717:18;;22712:23;;22844:1;22837:2;22833:1;:6;;;;;:::i;:::-;;22828:2;:11;22827:18;;22822:23;;23216:28;23241:2;23237:1;:6;;;;;:::i;:::-;;23232:11;;;34795:145:30;23216:28:29;23211:33;;;18080:5181;-1:-1:-1;;;18080:5181:29:o;12929:433:32:-;13086:7;13105:230;13118:4;13112:3;:10;13105:230;;;13138:11;13152:23;13165:3;13170:4;13152:12;:23::i;:::-;14399:28;14462:20;;;14527:4;14514:18;;13138:37;;-1:-1:-1;13193:35:32;;;;14510:28;;13193:29;;;:35;13189:136;;;13255:3;13248:10;;13189:136;;;13303:7;:3;13309:1;13303:7;:::i;:::-;13297:13;;13189:136;13124:211;13105:230;;;-1:-1:-1;13351:4:32;12929:433;-1:-1:-1;;;12929:433:32:o;7084:141:2:-;8870:21;8560:40;-1:-1:-1;;;8560:40:2;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:2;;;;;;;;;;;2435:216:4;6931:20:2;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;2600:7:4;:15:::1;2610:5:::0;2600:7;:15:::1;:::i;:::-;-1:-1:-1::0;2625:9:4::1;::::0;::::1;:19;2637:7:::0;2625:9;:19:::1;:::i;3599:330:9:-:0;6931:20:2;:18;:20::i;:::-;-1:-1:-1;;;;;;;;;;;3766:7:9;:14:::1;3776:4:::0;3766:7;:14:::1;:::i;:::-;-1:-1:-1::0;3790:10:9::1;::::0;::::1;:20;3803:7:::0;3790:10;:20:::1;:::i;:::-;-1:-1:-1::0;3891:1:9::1;3875:17:::0;;;3902:16:::1;::::0;;::::1;:20:::0;-1:-1:-1;;3599:330:9:o;1980:235:0:-;6931:20:2;:18;:20::i;2264:344:17:-;2355:37;2374:17;2355:18;:37::i;:::-;2407:36;;-1:-1:-1;;;;;2407:36:17;;;;;;;;2458:11;;:15;2454:148;;2489:53;2518:17;2537:4;2489:28;:53::i;2454:148::-;2573:18;:16;:18::i;3351:133:6:-;3433:7;3459:18;3469:7;3459:9;:18::i;9042:846:1:-;-1:-1:-1;;;;;;;;;;;;;;;;9196:10:1;;;;;;;;;;:24;;;9219:1;9210:6;:10;9196:24;9192:690;;;-1:-1:-1;;;;;9240:18:1;;;9236:317;;-1:-1:-1;;;;;9344:28:1;;9279:16;9344:28;;;:22;;;:28;;;;;9279:16;;9317:152;;9394:9;9425:26;9444:6;9425:18;:26::i;:::-;9317:5;:152::i;:::-;-1:-1:-1;;;;;9278:191:1;;;-1:-1:-1;;;;;9278:191:1;;;9513:4;-1:-1:-1;;;;;9492:46:1;;9519:8;9529;9492:46;;;;;;16504:25:35;;;16560:2;16545:18;;16538:34;16492:2;16477:18;;16330:248;9492:46:1;;;;;;;;9260:293;;9236:317;-1:-1:-1;;;;;9570:16:1;;;9566:306;;-1:-1:-1;;;;;9672:26:1;;9607:16;9672:26;;;:22;;;:26;;;;;9607:16;;9645:145;;9720:4;9746:26;9765:6;9746:18;:26::i;9645:145::-;-1:-1:-1;;;;;9606:184:1;;;-1:-1:-1;;;;;9606:184:1;;;9834:2;-1:-1:-1;;;;;9813:44:1;;9838:8;9848;9813:44;;;;;;16504:25:35;;;16560:2;16545:18;;16538:34;16492:2;16477:18;;16330:248;9813:44:1;;;;;;;;9588:284;;9129:759;9042:846;;;:::o;15296:213:30:-;15352:6;15382:16;15374:24;;15370:103;;;15421:41;;-1:-1:-1;;;15421:41:30;;15452:2;15421:41;;;13938:36:35;13990:18;;;13983:34;;;13911:18;;15421:41:30;13757:266:35;1259:164:8;1319:7;;1005:21;1364:19;886:156;5203:1551:27;5329:17;;;6283:66;6270:79;;6266:164;;;-1:-1:-1;6381:1:27;;-1:-1:-1;6385:30:27;;-1:-1:-1;6417:1:27;6365:54;;6266:164;6541:24;;;6524:14;6541:24;;;;;;;;;17081:25:35;;;17154:4;17142:17;;17122:18;;;17115:45;;;;17176:18;;;17169:34;;;17219:18;;;17212:34;;;6541:24:27;;17053:19:35;;6541:24:27;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6541:24:27;;-1:-1:-1;;6541:24:27;;;-1:-1:-1;;;;;;;6579:20:27;;6575:113;;-1:-1:-1;6631:1:27;;-1:-1:-1;6635:29:27;;-1:-1:-1;6631:1:27;;-1:-1:-1;6615:62:27;;6575:113;6706:6;-1:-1:-1;6714:20:27;;-1:-1:-1;6714:20:27;;-1:-1:-1;5203:1551:27;;;;;;;;;:::o;7280:532::-;7375:20;7366:5;:29;;;;;;;;:::i;:::-;;7362:444;;7280:532;;:::o;7362:444::-;7471:29;7462:5;:38;;;;;;;;:::i;:::-;;7458:348;;7523:23;;-1:-1:-1;;;7523:23:27;;;;;;;;;;;7458:348;7576:35;7567:5;:44;;;;;;;;:::i;:::-;;7563:243;;7634:46;;-1:-1:-1;;;7634:46:27;;;;;1545:25:35;;;1518:18;;7634:46:27;1399:177:35;7563:243:27;7710:30;7701:5;:39;;;;;;;;:::i;:::-;;7697:109;;7763:32;;-1:-1:-1;;;7763:32:27;;;;;1545:25:35;;;1518:18;;7763:32:27;1399:177:35;11343:138:32;-1:-1:-1;;;;;;;;;;;;;;;;;11452:4:32;:17;;11470:3;11452:22;;;;;;;;;;:::i;:::-;;;;;;;;;;11445:29;;;;;;;;;11452:22;;11445:29;;;;;;-1:-1:-1;;;11445:29:32;;-1:-1:-1;;;;;11445:29:32;;;;;;;;;11343:138;-1:-1:-1;;;11343:138:32:o;2678:413:6:-;2772:30;2786:4;2792:2;2796:5;2772:13;:30::i;:::-;-1:-1:-1;;;;;2816:18:6;;2812:226;;2850:14;2867:13;4027:14:4;;;3896:152;2867:13:6;2850:30;-1:-1:-1;;;;;;2938:12:6;;;2934:94;;;2977:36;;-1:-1:-1;;;2977:36:6;;;;;16504:25:35;;;16545:18;;;16538:34;;;16477:18;;2977:36:6;16330:248:35;2934:94:6;2836:202;;2812:226;3047:37;3068:4;3074:2;3078:5;3047:20;:37::i;7058:687:9:-;7108:7;-1:-1:-1;;;;;;;;;;;7108:7:9;7203:13;:11;:13::i;:::-;7230:18;;7182:34;;-1:-1:-1;7230:22:9;7226:513;;7275:22;;;;;;;;7058:687;-1:-1:-1;;7058:687:9:o;7226:513::-;7572:13;;7603:15;;7599:130;;7645:10;7058:687;-1:-1:-1;;;7058:687:9:o;7599:130::-;7701:13;7694:20;;;;;7058:687;:::o;7966:723::-;8019:7;-1:-1:-1;;;;;;;;;;;8019:7:9;8117:16;:14;:16::i;:::-;8147:21;;8093:40;;-1:-1:-1;8147:25:9;8143:540;;8195:25;;;;;;;;7966:723;-1:-1:-1;;7966:723:9:o;8143:540::-;8507:16;;;;8541:18;;8537:136;;8586:13;7966:723;-1:-1:-1;;;7966:723:9:o;3595:153:29:-;3657:7;3730:11;3740:1;3731:5;;;3730:11;:::i;:::-;3720:21;;3721:5;;;3720:21;:::i;1671:281:17:-;1748:17;-1:-1:-1;;;;;1748:29:17;;1781:1;1748:34;1744:119;;1805:47;;-1:-1:-1;;;1805:47:17;;-1:-1:-1;;;;;4037:32:35;;1805:47:17;;;4019:51:35;3992:18;;1805:47:17;3873:203:35;1744:119:17;-1:-1:-1;;;;;;;;;;;1872:73:17;;-1:-1:-1;;;;;;1872:73:17;-1:-1:-1;;;;;1872:73:17;;;;;;;;;;1671:281::o;3916:253:22:-;3999:12;4024;4038:23;4065:6;-1:-1:-1;;;;;4065:19:22;4085:4;4065:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4023:67;;;;4107:55;4134:6;4142:7;4151:10;4107:26;:55::i;:::-;4100:62;3916:253;-1:-1:-1;;;;;3916:253:22:o;6113:122:17:-;6163:9;:13;6159:70;;6199:19;;-1:-1:-1;;;6199:19:17;;;;;;;;;;;10898:101:1;10961:7;10987:5;10991:1;10987;:5;:::i;4174:218:30:-;4231:7;-1:-1:-1;;;;;4254:25:30;;4250:105;;;4302:42;;-1:-1:-1;;;4302:42:30;;4333:3;4302:42;;;13938:36:35;13990:18;;;13983:34;;;13911:18;;4302:42:30;13757:266:35;10517:273:1;10684:16;;10737:46;1649:15:34;10757:25:1;10760:14;:5;:12;:14::i;:::-;10776:5;10757:2;:25;;:::i;:::-;10737:5;;:46;:10;:46::i;:::-;10730:53;;;;10517:273;;;;;;;:::o;10796:96::-;10854:7;10880:5;10884:1;10880;:5;:::i;7220:1170:4:-;-1:-1:-1;;;;;;;;;;;;;;;;7362:18:4;;7358:546;;7516:5;7498:1;:14;;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;7358:546:4;;-1:-1:-1;7358:546:4;;-1:-1:-1;;;;;7574:17:4;;7552:19;7574:17;;;;;;;;;;;7609:19;;;7605:115;;;7655:50;;-1:-1:-1;;;7655:50:4;;-1:-1:-1;;;;;12130:32:35;;7655:50:4;;;12112:51:35;12179:18;;;12172:34;;;12222:18;;;12215:34;;;12085:18;;7655:50:4;11910:345:35;7605:115:4;-1:-1:-1;;;;;7840:17:4;;:11;:17;;;;;;;;;;7860:19;;;;7840:39;;7358:546;-1:-1:-1;;;;;7918:16:4;;7914:429;;8081:14;;;:23;;;;;;;7914:429;;;-1:-1:-1;;;;;8294:15:4;;:11;:15;;;;;;;;;;:24;;;;;;7914:429;8373:2;-1:-1:-1;;;;;8358:25:4;8367:4;-1:-1:-1;;;;;8358:25:4;;8377:5;8358:25;;;;1545::35;;1533:2;1518:18;;1399:177;8358:25:4;;;;;;;;7295:1095;7220:1170;;;:::o;8500:456:1:-;-1:-1:-1;;;;;;;;;;;;;;;;8656:18:1;;8652:109;;8690:60;8696:1;:19;;8717:4;8723:26;8742:6;8723:18;:26::i;8690:60::-;;;8652:109;-1:-1:-1;;;;;8774:16:1;;8770:112;;8806:65;8812:1;:19;;8833:9;8844:26;8863:6;8844:18;:26::i;8806:65::-;;;8770:112;8891:58;8910:15;8920:4;8910:9;:15::i;:::-;8927:13;8937:2;8927:9;:13::i;:::-;8942:6;8891:18;:58::i;4437:582:22:-;4581:12;4610:7;4605:408;;4633:19;4641:10;4633:7;:19::i;:::-;4605:408;;;4857:17;;:22;:49;;;;-1:-1:-1;;;;;;4883:18:22;;;:23;4857:49;4853:119;;;4933:24;;-1:-1:-1;;;4933:24:22;;-1:-1:-1;;;;;4037:32:35;;4933:24:22;;;4019:51:35;3992:18;;4933:24:22;3873:203:35;4853:119:22;-1:-1:-1;4992:10:22;4985:17;;8145:210:32;8257:16;;8310:38;8318:4;8337:3;8342:5;8310:7;:38::i;5559:487:22:-;5690:17;;:21;5686:354;;5887:10;5881:17;5943:15;5930:10;5926:2;5922:19;5915:44;5686:354;6010:19;;-1:-1:-1;;;6010:19:22;;;;;;;;;;;11657:922:32;11838:11;;11778:16;;;;11864:7;;11860:713;;11887:26;11916:28;11930:4;11936:7;11942:1;11936:3;:7;:::i;11916:28::-;11975:9;;;;-1:-1:-1;11975:9:32;;;;;-1:-1:-1;;;12018:11:32;;-1:-1:-1;;;;;12018:11:32;;12103:13;;;;12099:89;;;12143:30;;-1:-1:-1;;;12143:30:32;;;;;;;;;;;12099:89;12262:3;12251:14;;:7;:14;;;12247:163;;12285:19;;;;-1:-1:-1;;;;;;;;12285:19:32;;;;;;12247:163;;;12353:41;;;;;;;;;;;;;;;-1:-1:-1;;;;;12353:41:32;;;;;;;;;;12343:52;;;;;;;-1:-1:-1;12343:52:32;;;;;;;;;;;;;;-1:-1:-1;;;12343:52:32;;;;;;;;;;12247:163;12431:9;-1:-1:-1;12442:5:32;;-1:-1:-1;12423:25:32;;-1:-1:-1;;;12423:25:32;11860:713;-1:-1:-1;;12489:41:32;;;;;;;;;;;;;;;-1:-1:-1;;;;;12489:41:32;;;;;;;;;;12479:52;;;;;;;-1:-1:-1;12479:52:32;;;;;;;;;;;;;-1:-1:-1;;;12479:52:32;;;;;;;;;;;;-1:-1:-1;;12523:5:32;12545:17;;14:250:35;99:1;109:113;123:6;120:1;117:13;109:113;;;199:11;;;193:18;180:11;;;173:39;145:2;138:10;109:113;;;-1:-1:-1;;256:1:35;238:16;;231:27;14:250::o;269:271::-;311:3;349:5;343:12;376:6;371:3;364:19;392:76;461:6;454:4;449:3;445:14;438:4;431:5;427:16;392:76;:::i;:::-;522:2;501:15;-1:-1:-1;;497:29:35;488:39;;;;529:4;484:50;;269:271;-1:-1:-1;;269:271:35:o;545:220::-;694:2;683:9;676:21;657:4;714:45;755:2;744:9;740:18;732:6;714:45;:::i;770:173::-;838:20;;-1:-1:-1;;;;;887:31:35;;877:42;;867:70;;933:1;930;923:12;867:70;770:173;;;:::o;948:254::-;1016:6;1024;1077:2;1065:9;1056:7;1052:23;1048:32;1045:52;;;1093:1;1090;1083:12;1045:52;1116:29;1135:9;1116:29;:::i;:::-;1106:39;1192:2;1177:18;;;;1164:32;;-1:-1:-1;;;948:254:35:o;1581:328::-;1658:6;1666;1674;1727:2;1715:9;1706:7;1702:23;1698:32;1695:52;;;1743:1;1740;1733:12;1695:52;1766:29;1785:9;1766:29;:::i;:::-;1756:39;;1814:38;1848:2;1837:9;1833:18;1814:38;:::i;:::-;1804:48;;1899:2;1888:9;1884:18;1871:32;1861:42;;1581:328;;;;;:::o;2285:260::-;2353:6;2361;2414:2;2402:9;2393:7;2389:23;2385:32;2382:52;;;2430:1;2427;2420:12;2382:52;2453:29;2472:9;2453:29;:::i;:::-;2443:39;;2501:38;2535:2;2524:9;2520:18;2501:38;:::i;:::-;2491:48;;2285:260;;;;;:::o;2550:127::-;2611:10;2606:3;2602:20;2599:1;2592:31;2642:4;2639:1;2632:15;2666:4;2663:1;2656:15;2682:995;2759:6;2767;2820:2;2808:9;2799:7;2795:23;2791:32;2788:52;;;2836:1;2833;2826:12;2788:52;2859:29;2878:9;2859:29;:::i;:::-;2849:39;;2939:2;2928:9;2924:18;2911:32;2962:18;3003:2;2995:6;2992:14;2989:34;;;3019:1;3016;3009:12;2989:34;3057:6;3046:9;3042:22;3032:32;;3102:7;3095:4;3091:2;3087:13;3083:27;3073:55;;3124:1;3121;3114:12;3073:55;3160:2;3147:16;3182:2;3178;3175:10;3172:36;;;3188:18;;:::i;:::-;3263:2;3257:9;3231:2;3317:13;;-1:-1:-1;;3313:22:35;;;3337:2;3309:31;3305:40;3293:53;;;3361:18;;;3381:22;;;3358:46;3355:72;;;3407:18;;:::i;:::-;3447:10;3443:2;3436:22;3482:2;3474:6;3467:18;3522:7;3517:2;3512;3508;3504:11;3500:20;3497:33;3494:53;;;3543:1;3540;3533:12;3494:53;3599:2;3594;3590;3586:11;3581:2;3573:6;3569:15;3556:46;3644:1;3639:2;3634;3626:6;3622:15;3618:24;3611:35;3665:6;3655:16;;;;;;;2682:995;;;;;:::o;3682:186::-;3741:6;3794:2;3782:9;3773:7;3769:23;3765:32;3762:52;;;3810:1;3807;3800:12;3762:52;3833:29;3852:9;3833:29;:::i;4278:1259::-;4684:3;4679;4675:13;4667:6;4663:26;4652:9;4645:45;4626:4;4709:2;4747:3;4742:2;4731:9;4727:18;4720:31;4774:46;4815:3;4804:9;4800:19;4792:6;4774:46;:::i;:::-;4868:9;4860:6;4856:22;4851:2;4840:9;4836:18;4829:50;4902:33;4928:6;4920;4902:33;:::i;:::-;4966:2;4951:18;;4944:34;;;-1:-1:-1;;;;;5015:32:35;;5009:3;4994:19;;4987:61;5035:3;5064:19;;5057:35;;;5129:22;;;5123:3;5108:19;;5101:51;5201:13;;5223:22;;;5273:2;5299:15;;;;-1:-1:-1;5261:15:35;;;;-1:-1:-1;5342:169:35;5356:6;5353:1;5350:13;5342:169;;;5417:13;;5405:26;;5486:15;;;;5451:12;;;;5378:1;5371:9;5342:169;;;-1:-1:-1;5528:3:35;;4278:1259;-1:-1:-1;;;;;;;;;;;;4278:1259:35:o;5542:180::-;5601:6;5654:2;5642:9;5633:7;5629:23;5625:32;5622:52;;;5670:1;5667;5660:12;5622:52;-1:-1:-1;5693:23:35;;5542:180;-1:-1:-1;5542:180:35:o;5928:156::-;5994:20;;6054:4;6043:16;;6033:27;;6023:55;;6074:1;6071;6064:12;6089:531;6191:6;6199;6207;6215;6223;6231;6284:3;6272:9;6263:7;6259:23;6255:33;6252:53;;;6301:1;6298;6291:12;6252:53;6324:29;6343:9;6324:29;:::i;:::-;6314:39;;6400:2;6389:9;6385:18;6372:32;6362:42;;6451:2;6440:9;6436:18;6423:32;6413:42;;6474:36;6506:2;6495:9;6491:18;6474:36;:::i;:::-;6464:46;;6557:3;6546:9;6542:19;6529:33;6519:43;;6609:3;6598:9;6594:19;6581:33;6571:43;;6089:531;;;;;;;;:::o;6625:606::-;6736:6;6744;6752;6760;6768;6776;6784;6837:3;6825:9;6816:7;6812:23;6808:33;6805:53;;;6854:1;6851;6844:12;6805:53;6877:29;6896:9;6877:29;:::i;:::-;6867:39;;6925:38;6959:2;6948:9;6944:18;6925:38;:::i;:::-;6915:48;;7010:2;6999:9;6995:18;6982:32;6972:42;;7061:2;7050:9;7046:18;7033:32;7023:42;;7084:37;7116:3;7105:9;7101:19;7084:37;:::i;:::-;7074:47;;7168:3;7157:9;7153:19;7140:33;7130:43;;7220:3;7209:9;7205:19;7192:33;7182:43;;6625:606;;;;;;;;;;:::o;7236:350::-;7303:6;7311;7364:2;7352:9;7343:7;7339:23;7335:32;7332:52;;;7380:1;7377;7370:12;7332:52;7403:29;7422:9;7403:29;:::i;:::-;7393:39;;7482:2;7471:9;7467:18;7454:32;7526:10;7519:5;7515:22;7508:5;7505:33;7495:61;;7552:1;7549;7542:12;7495:61;7575:5;7565:15;;;7236:350;;;;;:::o;7952:380::-;8031:1;8027:12;;;;8074;;;8095:61;;8149:4;8141:6;8137:17;8127:27;;8095:61;8202:2;8194:6;8191:14;8171:18;8168:38;8165:161;;8248:10;8243:3;8239:20;8236:1;8229:31;8283:4;8280:1;8273:15;8311:4;8308:1;8301:15;8165:161;;7952:380;;;:::o;8337:127::-;8398:10;8393:3;8389:20;8386:1;8379:31;8429:4;8426:1;8419:15;8453:4;8450:1;8443:15;8469:416;8558:1;8595:5;8558:1;8609:270;8630:7;8620:8;8617:21;8609:270;;;8689:4;8685:1;8681:6;8677:17;8671:4;8668:27;8665:53;;;8698:18;;:::i;:::-;8748:7;8738:8;8734:22;8731:55;;;8768:16;;;;8731:55;8847:22;;;;8807:15;;;;8609:270;;;8613:3;8469:416;;;;;:::o;8890:806::-;8939:5;8969:8;8959:80;;-1:-1:-1;9010:1:35;9024:5;;8959:80;9058:4;9048:76;;-1:-1:-1;9095:1:35;9109:5;;9048:76;9140:4;9158:1;9153:59;;;;9226:1;9221:130;;;;9133:218;;9153:59;9183:1;9174:10;;9197:5;;;9221:130;9258:3;9248:8;9245:17;9242:43;;;9265:18;;:::i;:::-;-1:-1:-1;;9321:1:35;9307:16;;9336:5;;9133:218;;9435:2;9425:8;9422:16;9416:3;9410:4;9407:13;9403:36;9397:2;9387:8;9384:16;9379:2;9373:4;9370:12;9366:35;9363:77;9360:159;;;-1:-1:-1;9472:19:35;;;9504:5;;9360:159;9551:34;9576:8;9570:4;9551:34;:::i;:::-;9621:6;9617:1;9613:6;9609:19;9600:7;9597:32;9594:58;;;9632:18;;:::i;:::-;9670:20;;8890:806;-1:-1:-1;;;8890:806:35:o;9701:140::-;9759:5;9788:47;9829:4;9819:8;9815:19;9809:4;9788:47;:::i;9846:168::-;9919:9;;;9950;;9967:15;;;9961:22;;9947:37;9937:71;;9988:18;;:::i;12532:128::-;12599:9;;;12620:11;;;12617:37;;;12634:18;;:::i;12665:125::-;12730:9;;;12751:10;;;12748:36;;;12764:18;;:::i;12795:184::-;12865:6;12918:2;12906:9;12897:7;12893:23;12889:32;12886:52;;;12934:1;12931;12924:12;12886:52;-1:-1:-1;12957:16:35;;12795:184;-1:-1:-1;12795:184:35:o;14028:127::-;14089:10;14084:3;14080:20;14077:1;14070:31;14120:4;14117:1;14110:15;14144:4;14141:1;14134:15;14286:518;14388:2;14383:3;14380:11;14377:421;;;14424:5;14421:1;14414:16;14468:4;14465:1;14455:18;14538:2;14526:10;14522:19;14519:1;14515:27;14509:4;14505:38;14574:4;14562:10;14559:20;14556:47;;;-1:-1:-1;14597:4:35;14556:47;14652:2;14647:3;14643:12;14640:1;14636:20;14630:4;14626:31;14616:41;;14707:81;14725:2;14718:5;14715:13;14707:81;;;14784:1;14770:16;;14751:1;14740:13;14707:81;;14980:1345;15106:3;15100:10;15133:18;15125:6;15122:30;15119:56;;;15155:18;;:::i;:::-;15184:97;15274:6;15234:38;15266:4;15260:11;15234:38;:::i;:::-;15228:4;15184:97;:::i;:::-;15336:4;;15393:2;15382:14;;15410:1;15405:663;;;;16112:1;16129:6;16126:89;;;-1:-1:-1;16181:19:35;;;16175:26;16126:89;-1:-1:-1;;14937:1:35;14933:11;;;14929:24;14925:29;14915:40;14961:1;14957:11;;;14912:57;16228:81;;15375:944;;15405:663;14233:1;14226:14;;;14270:4;14257:18;;-1:-1:-1;;15441:20:35;;;15559:236;15573:7;15570:1;15567:14;15559:236;;;15662:19;;;15656:26;15641:42;;15754:27;;;;15722:1;15710:14;;;;15589:19;;15559:236;;;15563:3;15823:6;15814:7;15811:19;15808:201;;;15884:19;;;15878:26;-1:-1:-1;;15967:1:35;15963:14;;;15979:3;15959:24;15955:37;15951:42;15936:58;15921:74;;15808:201;;;16055:1;16046:6;16043:1;16039:14;16035:22;16029:4;16022:36;15375:944;;;;;14980:1345;;:::o;17257:127::-;17318:10;17313:3;17309:20;17306:1;17299:31;17349:4;17346:1;17339:15;17373:4;17370:1;17363:15;17389:127;17450:10;17445:3;17441:20;17438:1;17431:31;17481:4;17478:1;17471:15;17505:4;17502:1;17495:15;17521:217;17561:1;17587;17577:132;;17631:10;17626:3;17622:20;17619:1;17612:31;17666:4;17663:1;17656:15;17694:4;17691:1;17684:15;17577:132;-1:-1:-1;17723:9:35;;17521:217::o;17743:287::-;17872:3;17910:6;17904:13;17926:66;17985:6;17980:3;17973:4;17965:6;17961:17;17926:66;:::i;:::-;18008:16;;;;;17743:287;-1:-1:-1;;17743:287:35:o;18035:185::-;-1:-1:-1;;;;;18156:10:35;;;18144;;;18140:27;;18179:12;;;18176:38;;;18194:18;;:::i;:::-;18176:38;18035:185;;;;:::o;18497:182::-;-1:-1:-1;;;;;18604:10:35;;;18616;;;18600:27;;18639:11;;;18636:37;;;18653:18;;:::i"
	},
	"Assembly": ".code\n  PUSH A0\t\t\tcontract NextProVista is Initi...\n  PUSH 40\t\t\tcontract NextProVista is Initi...\n  MSTORE \t\t\tcontract NextProVista is Initi...\n  ADDRESS \t\t\t    \n  PUSH 80\t\t\tsafe-allow constructor\\n    co...\n  MSTORE \t\t\tsafe-allow constructor\\n    co...\n  CALLVALUE \t\t\tconstructor() {\\n        _disa...\n  DUP1 \t\t\tconstructor() {\\n        _disa...\n  ISZERO \t\t\tconstructor() {\\n        _disa...\n  PUSH [tag] 1\t\t\tconstructor() {\\n        _disa...\n  JUMPI \t\t\tconstructor() {\\n        _disa...\n  PUSH 0\t\t\tconstructor() {\\n        _disa...\n  DUP1 \t\t\tconstructor() {\\n        _disa...\n  REVERT \t\t\tconstructor() {\\n        _disa...\ntag 1\t\t\tconstructor() {\\n        _disa...\n  JUMPDEST \t\t\tconstructor() {\\n        _disa...\n  POP \t\t\t\n  PUSH [tag] 4\t\t\t_disableInitializers()\n  PUSH [tag] 5\t\t\t_disableInitializers\n  JUMP \t\t\t_disableInitializers()\ntag 4\t\t\t_disableInitializers()\n  JUMPDEST \t\t\t_disableInitializers()\n  PUSH [tag] 15\t\t\tcontract NextProVista is Initi...\n  JUMP \t\t\tcontract NextProVista is Initi...\ntag 5\t\t\t\n  JUMPDEST \t\t\t\n  PUSH F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00\t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 10000000000000000\t\t\t\n  SWAP1 \t\t\t\n  DIV \t\t\t\n  PUSH FF\t\t\t\n  AND \t\t\t\n  ISZERO \t\t\t\n  PUSH [tag] 10\t\t\t\n  JUMPI \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  PUSH F92EE8A9\t\t\t\n  PUSH E0\t\t\t\n  SHL \t\t\t\n  DUP2 \t\t\t\n  MSTORE \t\t\t\n  PUSH 4\t\t\t\n  ADD \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  REVERT \t\t\t\ntag 10\t\t\t\n  JUMPDEST \t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  AND \t\t\t\n  EQ \t\t\t\n  PUSH [tag] 11\t\t\t\n  JUMPI \t\t\t\n  DUP1 \t\t\t\n  SLOAD \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  NOT \t\t\t\n  AND \t\t\t\n  PUSH 1\t\t\t\n  PUSH 1\t\t\t\n  PUSH 40\t\t\t\n  SHL \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  DUP2 \t\t\t\n  OR \t\t\t\n  DUP3 \t\t\t\n  SSTORE \t\t\t\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  SWAP1 \t\t\tacts-upgradeable@5.2.0/token/E...\n  DUP2 \t\t\tacts-upgradeable@5.2.0/token/E...\n  MSTORE \t\t\tacts-upgradeable@5.2.0/token/E...\n  PUSH C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2\t\t\t\n  SWAP1 \t\t\t\n  PUSH 20\t\t\tpp\n  ADD \t\t\t} from \"@openzeppe\n  PUSH 40\t\t\t\n  MLOAD \t\t\t\n  DUP1 \t\t\t\n  SWAP2 \t\t\t\n  SUB \t\t\t\n  SWAP1 \t\t\t\n  LOG1 \t\t\t\ntag 11\t\t\t\n  JUMPDEST \t\t\t\n  POP \t\t\t\n  JUMP \t\t\t\ntag 15\t\t\te-Identifier: MIT\\n// Compatib...\n  JUMPDEST \t\t\te-Identifier: MIT\\n// Compatib...\n  PUSH 80\t\t\tcontract NextProVista is Initi...\n  MLOAD \t\t\tcontract NextProVista is Initi...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract NextProVista is Initi...\n  PUSH [$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract NextProVista is Initi...\n  PUSH 0\t\t\tcontract NextProVista is Initi...\n  CODECOPY \t\t\tcontract NextProVista is Initi...\n  PUSH 0\t\t\tcontract NextProVista is Initi...\n  ASSIGNIMMUTABLE 1113\t\t\tcontract NextProVista is Initi...\n  PUSH #[$] 0000000000000000000000000000000000000000000000000000000000000000\t\t\tcontract NextProVista is Initi...\n  PUSH 0\t\t\tcontract NextProVista is Initi...\n  RETURN \t\t\tcontract NextProVista is Initi...\n.data\n  0:\n    .code\n      PUSH 80\t\t\tcontract NextProVista is Initi...\n      PUSH 40\t\t\tcontract NextProVista is Initi...\n      MSTORE \t\t\tcontract NextProVista is Initi...\n      PUSH 4\t\t\tcontract NextProVista is Initi...\n      CALLDATASIZE \t\t\tcontract NextProVista is Initi...\n      LT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 1\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      CALLDATALOAD \t\t\tcontract NextProVista is Initi...\n      PUSH E0\t\t\tcontract NextProVista is Initi...\n      SHR \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 715018A6\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 32\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 9AB24EB0\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 33\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH D505ACCF\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 34\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH D505ACCF\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 28\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH DD62ED3E\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 29\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH F1127ED8\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 30\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH F2FDE38B\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 31\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 34\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 9AB24EB0\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 24\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH A9059CBB\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 25\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH AD3CB1CC\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 26\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH C3CDA520\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 27\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 33\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 8DA5CB5B\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 35\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 8DA5CB5B\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 20\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 8E539E8C\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 21\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 91DDADF4\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 22\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 95D89B41\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 23\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 35\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 715018A6\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 17\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 7ECEBE00\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 18\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 84B0196E\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 19\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 32\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 485CC955\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 36\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 587CDE1E\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 37\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 587CDE1E\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 13\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 5C19A95C\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 14\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 6FCFFF45\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 15\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 70A08231\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 16\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 37\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 485CC955\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 9\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 4BF5D7E9\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 10\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 4F1EF286\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 11\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 52D1902D\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 12\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 36\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 23B872DD\t\t\tcontract NextProVista is Initi...\n      GT \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 38\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 23B872DD\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 5\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 313CE567\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 6\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 3644E515\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 7\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 3A46B1A8\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 8\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 38\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 6FDDE03\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 2\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 95EA7B3\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 3\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      PUSH 18160DDD\t\t\tcontract NextProVista is Initi...\n      EQ \t\t\tcontract NextProVista is Initi...\n      PUSH [tag] 4\t\t\tcontract NextProVista is Initi...\n      JUMPI \t\t\tcontract NextProVista is Initi...\n    tag 1\t\t\tcontract NextProVista is Initi...\n      JUMPDEST \t\t\tcontract NextProVista is Initi...\n      PUSH 0\t\t\tcontract NextProVista is Initi...\n      DUP1 \t\t\tcontract NextProVista is Initi...\n      REVERT \t\t\tcontract NextProVista is Initi...\n    tag 2\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 39\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 39\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 40\t\t\t\n      PUSH [tag] 41\t\t\t\n      JUMP \t\t\t\n    tag 40\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 42\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 43\t\t\t\n      JUMP \t\t\t\n    tag 42\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      RETURN \t\t\t\n    tag 3\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 44\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 44\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 45\t\t\t\n      PUSH [tag] 46\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 46\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 48\t\t\t\n      JUMP \t\t\t\n    tag 45\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\trmit_init(\"Nex\n      ISZERO \t\t\trmit_init(\"Nex\n      ISZERO \t\t\tERC20Permit_init(\"Next\n      DUP2 \t\t\t\"NPV\");\\n        __ERC20Permit...\n      MSTORE \t\t\t\"NPV\");\\n        __ERC20Permit...\n      PUSH 20\t\t\tPr\n      ADD \t\t\tC20_init(\"Next Pro\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t}\\n\\n    function initialize(a...\n    tag 4\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 51\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 51\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02\t\t\t\n      SLOAD \t\t\t\n    tag 52\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t decimals());\\n    }\\n\\n    \n      DUP2 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 20\t\t\t47\n      ADD \t\t\tecipient, 38165472\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 5\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 56\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 56\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 45\t\t\t\n      PUSH [tag] 58\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 59\t\t\t\n      JUMP \t\t\t\n    tag 58\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 60\t\t\t\n      JUMP \t\t\t\n    tag 6\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 62\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 62\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 12\t\t\t\n      DUP2 \t\t\trom, address to, uint256 value...\n      MSTORE \t\t\trom, address to, uint256 value...\n      PUSH 20\t\t\tte\n      ADD \t\t\t function _update(\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\\n        override\\n        on...\n    tag 7\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 67\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 67\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 69\t\t\t\n      JUMP \t\t\t\n    tag 8\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 72\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 72\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 74\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 74\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 75\t\t\t\n      JUMP \t\t\t\n    tag 9\t\t\tfunction initialize(address re...\n      JUMPDEST \t\t\tfunction initialize(address re...\n      CALLVALUE \t\t\tfunction initialize(address re...\n      DUP1 \t\t\tfunction initialize(address re...\n      ISZERO \t\t\tfunction initialize(address re...\n      PUSH [tag] 77\t\t\tfunction initialize(address re...\n      JUMPI \t\t\tfunction initialize(address re...\n      PUSH 0\t\t\tfunction initialize(address re...\n      DUP1 \t\t\tfunction initialize(address re...\n      REVERT \t\t\tfunction initialize(address re...\n    tag 77\t\t\tfunction initialize(address re...\n      JUMPDEST \t\t\tfunction initialize(address re...\n      POP \t\t\t\n      PUSH [tag] 78\t\t\tfunction initialize(address re...\n      PUSH [tag] 79\t\t\tfunction initialize(address re...\n      CALLDATASIZE \t\t\tfunction initialize(address re...\n      PUSH 4\t\t\tfunction initialize(address re...\n      PUSH [tag] 80\t\t\tfunction initialize(address re...\n      JUMP \t\t\tfunction initialize(address re...\n    tag 79\t\t\tfunction initialize(address re...\n      JUMPDEST \t\t\tfunction initialize(address re...\n      PUSH [tag] 81\t\t\tfunction initialize(address re...\n      JUMP \t\t\tfunction initialize(address re...\n    tag 78\t\t\tfunction initialize(address re...\n      JUMPDEST \t\t\tfunction initialize(address re...\n      STOP \t\t\tfunction initialize(address re...\n    tag 10\t\t\tfunction CLOCK_MODE() public p...\n      JUMPDEST \t\t\tfunction CLOCK_MODE() public p...\n      CALLVALUE \t\t\tfunction CLOCK_MODE() public p...\n      DUP1 \t\t\tfunction CLOCK_MODE() public p...\n      ISZERO \t\t\tfunction CLOCK_MODE() public p...\n      PUSH [tag] 82\t\t\tfunction CLOCK_MODE() public p...\n      JUMPI \t\t\tfunction CLOCK_MODE() public p...\n      PUSH 0\t\t\tfunction CLOCK_MODE() public p...\n      DUP1 \t\t\tfunction CLOCK_MODE() public p...\n      REVERT \t\t\tfunction CLOCK_MODE() public p...\n    tag 82\t\t\tfunction CLOCK_MODE() public p...\n      JUMPDEST \t\t\tfunction CLOCK_MODE() public p...\n      POP \t\t\t\n      PUSH 40\t\t\treturn \"mode=timestamp\"\n      DUP1 \t\t\treturn \"mode=timestamp\"\n      MLOAD \t\t\treturn \"mode=timestamp\"\n      DUP1 \t\t\treturn \"mode=timestamp\"\n      DUP3 \t\t\treturn \"mode=timestamp\"\n      ADD \t\t\treturn \"mode=timestamp\"\n      SWAP1 \t\t\treturn \"mode=timestamp\"\n      SWAP2 \t\t\treturn \"mode=timestamp\"\n      MSTORE \t\t\treturn \"mode=timestamp\"\n      PUSH E\t\t\treturn \"mode=timestamp\"\n      DUP2 \t\t\treturn \"mode=timestamp\"\n      MSTORE \t\t\treturn \"mode=timestamp\"\n      PUSH 6D6F64653D74696D657374616D7\t\t\t\n      PUSH 94\t\t\t\n      SHL \t\t\t\n      PUSH 20\t\t\treturn \"mode=timestamp\"\n      DUP3 \t\t\treturn \"mode=timestamp\"\n      ADD \t\t\treturn \"mode=timestamp\"\n      MSTORE \t\t\treturn \"mode=timestamp\"\n      PUSH [tag] 40\t\t\tfunction CLOCK_MODE() public p...\n      JUMP \t\t\tfunction CLOCK_MODE() public p...\n    tag 11\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 78\t\t\t\n      PUSH [tag] 87\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 88\t\t\t\n      JUMP \t\t\t\n    tag 87\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 89\t\t\t\n      JUMP \t\t\t\n    tag 12\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 90\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 90\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 92\t\t\t\n      JUMP \t\t\t\n    tag 13\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 94\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 94\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 95\t\t\t\n      PUSH [tag] 96\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 96\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 98\t\t\t\n      JUMP \t\t\t\n    tag 95\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 14\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 101\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 101\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 78\t\t\t\n      PUSH [tag] 103\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 103\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 104\t\t\t\n      JUMP \t\t\t\n    tag 15\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 105\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 105\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 106\t\t\t\n      PUSH [tag] 107\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 107\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 108\t\t\t\n      JUMP \t\t\t\n    tag 106\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 16\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 111\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 111\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 113\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 113\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 114\t\t\t\n      JUMP \t\t\t\n    tag 17\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 116\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 116\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 78\t\t\t\n      PUSH [tag] 118\t\t\t\n      JUMP \t\t\t\n    tag 18\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      CALLVALUE \t\t\tfunction nonces(address owner)...\n      DUP1 \t\t\tfunction nonces(address owner)...\n      ISZERO \t\t\tfunction nonces(address owner)...\n      PUSH [tag] 119\t\t\tfunction nonces(address owner)...\n      JUMPI \t\t\tfunction nonces(address owner)...\n      PUSH 0\t\t\tfunction nonces(address owner)...\n      DUP1 \t\t\tfunction nonces(address owner)...\n      REVERT \t\t\tfunction nonces(address owner)...\n    tag 119\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      POP \t\t\t\n      PUSH [tag] 52\t\t\tfunction nonces(address owner)...\n      PUSH [tag] 121\t\t\tfunction nonces(address owner)...\n      CALLDATASIZE \t\t\tfunction nonces(address owner)...\n      PUSH 4\t\t\tfunction nonces(address owner)...\n      PUSH [tag] 97\t\t\tfunction nonces(address owner)...\n      JUMP \t\t\tfunction nonces(address owner)...\n    tag 121\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      PUSH [tag] 122\t\t\tfunction nonces(address owner)...\n      JUMP \t\t\tfunction nonces(address owner)...\n    tag 19\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 124\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 124\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 125\t\t\t\n      PUSH [tag] 126\t\t\t\n      JUMP \t\t\t\n    tag 125\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 42\t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 128\t\t\t\n      JUMP \t\t\t\n    tag 20\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 129\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 129\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300\t\t\t   __ERC20_init(\"Next \n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 95\t\t\t\n      JUMP \t\t\t\n    tag 21\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 133\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 133\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 135\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 136\t\t\t\n      JUMP \t\t\t\n    tag 135\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 137\t\t\t\n      JUMP \t\t\t\n    tag 22\t\t\tfunction clock() public view o...\n      JUMPDEST \t\t\tfunction clock() public view o...\n      CALLVALUE \t\t\tfunction clock() public view o...\n      DUP1 \t\t\tfunction clock() public view o...\n      ISZERO \t\t\tfunction clock() public view o...\n      PUSH [tag] 139\t\t\tfunction clock() public view o...\n      JUMPI \t\t\tfunction clock() public view o...\n      PUSH 0\t\t\tfunction clock() public view o...\n      DUP1 \t\t\tfunction clock() public view o...\n      REVERT \t\t\tfunction clock() public view o...\n    tag 139\t\t\tfunction clock() public view o...\n      JUMPDEST \t\t\tfunction clock() public view o...\n      POP \t\t\t\n      PUSH 40\t\t\tfunction clock() public view o...\n      MLOAD \t\t\tfunction clock() public view o...\n      PUSH FFFFFFFFFFFF\t\t\t\n      TIMESTAMP \t\t\tblock.timestamp\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 42\t\t\tfunction clock() public view o...\n      JUMP \t\t\t\n    tag 23\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 144\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 144\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 40\t\t\t\n      PUSH [tag] 146\t\t\t\n      JUMP \t\t\t\n    tag 24\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 148\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 148\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 150\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 150\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 151\t\t\t\n      JUMP \t\t\t\n    tag 25\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 153\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 153\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 45\t\t\t\n      PUSH [tag] 155\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 47\t\t\t\n      JUMP \t\t\t\n    tag 155\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 156\t\t\t\n      JUMP \t\t\t\n    tag 26\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      JUMPDEST \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      CALLVALUE \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      DUP1 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      ISZERO \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH [tag] 158\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      JUMPI \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 0\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      DUP1 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      REVERT \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n    tag 158\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      JUMPDEST \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      POP \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH [tag] 40\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 40\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      MLOAD \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      DUP1 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 40\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      ADD \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 40\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      MSTORE \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      DUP1 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 5\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      DUP2 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      MSTORE \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 20\t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      ADD \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      PUSH 352E302E3\t\t\t\n      PUSH DC\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      MSTORE \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      POP \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      DUP2 \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n      JUMP \t\t\te=timestamp\";\\n    }\\n\\n    fu...\n    tag 27\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 162\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 162\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 78\t\t\t\n      PUSH [tag] 164\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 165\t\t\t\n      JUMP \t\t\t\n    tag 164\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 166\t\t\t\n      JUMP \t\t\t\n    tag 28\t\t\tternal\\n        override(ERC20...\n      JUMPDEST \t\t\tternal\\n        override(ERC20...\n      CALLVALUE \t\t\tternal\\n        override(ERC20...\n      DUP1 \t\t\tternal\\n        override(ERC20...\n      ISZERO \t\t\tternal\\n        override(ERC20...\n      PUSH [tag] 167\t\t\tternal\\n        override(ERC20...\n      JUMPI \t\t\tternal\\n        override(ERC20...\n      PUSH 0\t\t\tternal\\n        override(ERC20...\n      DUP1 \t\t\tternal\\n        override(ERC20...\n      REVERT \t\t\tternal\\n        override(ERC20...\n    tag 167\t\t\tternal\\n        override(ERC20...\n      JUMPDEST \t\t\tternal\\n        override(ERC20...\n      POP \t\t\t\n      PUSH [tag] 78\t\t\tternal\\n        override(ERC20...\n      PUSH [tag] 169\t\t\tternal\\n        override(ERC20...\n      CALLDATASIZE \t\t\tternal\\n        override(ERC20...\n      PUSH 4\t\t\tternal\\n        override(ERC20...\n      PUSH [tag] 170\t\t\tternal\\n        override(ERC20...\n      JUMP \t\t\tternal\\n        override(ERC20...\n    tag 169\t\t\tternal\\n        override(ERC20...\n      JUMPDEST \t\t\tternal\\n        override(ERC20...\n      PUSH [tag] 171\t\t\tternal\\n        override(ERC20...\n      JUMP \t\t\tternal\\n        override(ERC20...\n    tag 29\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 172\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 172\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 52\t\t\t\n      PUSH [tag] 174\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 80\t\t\t\n      JUMP \t\t\t\n    tag 174\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 30\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 177\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 177\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 178\t\t\t\n      PUSH [tag] 179\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 180\t\t\t\n      JUMP \t\t\t\n    tag 179\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 181\t\t\t\n      JUMP \t\t\t\n    tag 178\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP3 \t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP3 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 42\t\t\t\n      JUMP \t\t\t\n    tag 31\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 184\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 184\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 78\t\t\t\n      PUSH [tag] 186\t\t\t\n      CALLDATASIZE \t\t\t\n      PUSH 4\t\t\t\n      PUSH [tag] 97\t\t\t\n      JUMP \t\t\t\n    tag 186\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 187\t\t\t\n      JUMP \t\t\t\n    tag 41\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n    tag 189\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      PUSH 3\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 191\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 191\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 193\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 193\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      LT \t\t\t\n      PUSH [tag] 195\t\t\t\n      JUMPI \t\t\t\n      PUSH 100\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SLOAD \t\t\t\n      DIV \t\t\t\n      MUL \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 194\t\t\t\n      JUMP \t\t\t\n    tag 195\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n    tag 196\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 196\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      PUSH 1F\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n    tag 194\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 48\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\txtProVista\n      PUSH [tag] 200\t\t\t\n      DUP2 \t\t\txtProVista\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 201\t\t\t\n      JUMP \t\t\t\n    tag 200\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 197\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 60\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\txtProVista\n      PUSH [tag] 206\t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\txtProVista\n      DUP6 \t\t\t\n      PUSH [tag] 207\t\t\t\n      JUMP \t\t\t\n    tag 206\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 208\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 208\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 204\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 69\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 212\t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMP \t\t\t\n    tag 212\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 75\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 217\t\t\t\n      PUSH [tag] 218\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 218\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMP \t\t\t\n    tag 217\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 81\t\t\tfunction initialize(address re...\n      JUMPDEST \t\t\tfunction initialize(address re...\n      PUSH F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      DIV \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 224\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n    tag 224\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 225\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      ADDRESS \t\t\t\n      EXTCODESIZE \t\t\t\n      ISZERO \t\t\t\n    tag 225\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 226\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n    tag 226\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 227\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH F92EE8A9\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 227\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      OR \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 228\t\t\t\n      JUMPI \t\t\t\n      DUP5 \t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      OR \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n    tag 228\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 230\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 40\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MLOAD \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      DUP1 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 40\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      ADD \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 40\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MSTORE \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      DUP1 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH E\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      DUP2 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MSTORE \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 20\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      ADD \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 4E6578742050726F205669737461\t\t\t\n      PUSH 90\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MSTORE \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      POP \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 40\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MLOAD \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      DUP1 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 40\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      ADD \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 40\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MSTORE \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      DUP1 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 3\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      DUP2 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MSTORE \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 20\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      ADD \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH 27282B\t\t\t\n      PUSH E9\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      MSTORE \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      POP \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH [tag] 231\t\t\t__ERC20_init\n      JUMP \t\t\t__ERC20_init(\"Next Pro Vista\",...\n    tag 230\t\t\t__ERC20_init(\"Next Pro Vista\",...\n      JUMPDEST \t\t\t__ERC20_init(\"Next Pro Vista\",...\n      PUSH [tag] 232\t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH 40\t\t\t__ERC20Permit_init(\"Next Pro V...\n      MLOAD \t\t\t__ERC20Permit_init(\"Next Pro V...\n      DUP1 \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH 40\t\t\t__ERC20Permit_init(\"Next Pro V...\n      ADD \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH 40\t\t\t__ERC20Permit_init(\"Next Pro V...\n      MSTORE \t\t\t__ERC20Permit_init(\"Next Pro V...\n      DUP1 \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH E\t\t\t__ERC20Permit_init(\"Next Pro V...\n      DUP2 \t\t\t__ERC20Permit_init(\"Next Pro V...\n      MSTORE \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH 20\t\t\t__ERC20Permit_init(\"Next Pro V...\n      ADD \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH 4E6578742050726F205669737461\t\t\t\n      PUSH 90\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t__ERC20Permit_init(\"Next Pro V...\n      MSTORE \t\t\t__ERC20Permit_init(\"Next Pro V...\n      POP \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH [tag] 233\t\t\t__ERC20Permit_init\n      JUMP \t\t\t__ERC20Permit_init(\"Next Pro V...\n    tag 232\t\t\t__ERC20Permit_init(\"Next Pro V...\n      JUMPDEST \t\t\t__ERC20Permit_init(\"Next Pro V...\n      PUSH [tag] 234\t\t\t__ERC20Votes_init()\n      PUSH [tag] 235\t\t\t__ERC20Votes_init\n      JUMP \t\t\t__ERC20Votes_init()\n    tag 234\t\t\t__ERC20Votes_init()\n      JUMPDEST \t\t\t__ERC20Votes_init()\n      PUSH [tag] 236\t\t\t__Ownable_init(initialOwner)\n      DUP7 \t\t\tinitialOwner\n      PUSH [tag] 237\t\t\t__Ownable_init\n      JUMP \t\t\t__Ownable_init(initialOwner)\n    tag 236\t\t\t__Ownable_init(initialOwner)\n      JUMPDEST \t\t\t__Ownable_init(initialOwner)\n      PUSH [tag] 238\t\t\t__UUPSUpgradeable_init()\n      PUSH [tag] 235\t\t\t__UUPSUpgradeable_init\n      JUMP \t\t\t__UUPSUpgradeable_init()\n    tag 238\t\t\t__UUPSUpgradeable_init()\n      JUMPDEST \t\t\t__UUPSUpgradeable_init()\n      PUSH [tag] 240\t\t\t_mint(recipient, 381654729 * 1...\n      DUP8 \t\t\trecipient\n      PUSH [tag] 242\t\t\t10 ** decimals()\n      PUSH 12\t\t\t\n      PUSH A\t\t\t10\n      PUSH [tag] 243\t\t\t10 ** decimals()\n      JUMP \t\t\t10 ** decimals()\n    tag 242\t\t\t10 ** decimals()\n      JUMPDEST \t\t\t10 ** decimals()\n      PUSH [tag] 244\t\t\t381654729 * 10 ** decimals()\n      SWAP1 \t\t\t381654729 * 10 ** decimals()\n      PUSH 16BF96C9\t\t\t381654729\n      PUSH [tag] 245\t\t\t381654729 * 10 ** decimals()\n      JUMP \t\t\t381654729 * 10 ** decimals()\n    tag 244\t\t\t381654729 * 10 ** decimals()\n      JUMPDEST \t\t\t381654729 * 10 ** decimals()\n      PUSH [tag] 246\t\t\t_mint\n      JUMP \t\t\t_mint(recipient, 381654729 * 1...\n    tag 240\t\t\t_mint(recipient, 381654729 * 1...\n      JUMPDEST \t\t\t_mint(recipient, 381654729 * 1...\n      DUP4 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 247\t\t\t\n      JUMPI \t\t\t\n      DUP5 \t\t\t\n      SLOAD \t\t\t\n      PUSH FF\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2\t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG1 \t\t\t\n    tag 247\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\tfunction initialize(address re...\n      POP \t\t\tfunction initialize(address re...\n      JUMP \t\t\tfunction initialize(address re...\n    tag 89\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 252\t\t\t\n      PUSH [tag] 253\t\t\t\n      JUMP \t\t\t\n    tag 252\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 255\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 256\t\t\t\n      JUMP \t\t\t\n    tag 255\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 257\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 258\t\t\t\n      JUMP \t\t\t\n    tag 257\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 92\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 260\t\t\t\n      PUSH [tag] 261\t\t\t\n      JUMP \t\t\t\n    tag 260\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 98\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 104\t\t\t\n      JUMPDEST \t\t\t\n      CALLER \t\t\txtProVista\n      PUSH [tag] 257\t\t\t\n      DUP2 \t\t\txtProVista\n      DUP4 \t\t\t\n      PUSH [tag] 268\t\t\t\n      JUMP \t\t\t\n    tag 108\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 197\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 271\t\t\t\n      JUMP \t\t\t\n    tag 114\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n    tag 273\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      MSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 118\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 275\t\t\tble)\\n        \n      PUSH [tag] 276\t\t\tble)\\n      \n      JUMP \t\t\tble)\\n        \n    tag 275\t\t\tble)\\n        \n      JUMPDEST \t\t\tble)\\n        \n      PUSH [tag] 278\t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 278\t\t\t\n      JUMPDEST \t\t\t\n      JUMP \t\t\t\n    tag 122\t\t\tfunction nonces(address owner)...\n      JUMPDEST \t\t\tfunction nonces(address owner)...\n      PUSH 0\t\t\tuint256\n      PUSH [tag] 197\t\t\tsuper.nonces(owner)\n      DUP3 \t\t\towner\n      PUSH [tag] 282\t\t\tsuper.nonces\n      JUMP \t\t\tsuper.nonces(owner)\n    tag 126\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 60\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 286\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      ISZERO \t\t\t\n    tag 286\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 287\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 461BCD\t\t\t\n      PUSH E5\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 15\t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 1152540DCC4C8E88155B9A5B9A5D1A585B1A5E9959\t\t\t\n      PUSH 5A\t\t\t\n      SHL \t\t\t\n      PUSH 44\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n    tag 288\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 287\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 290\t\t\t\n      PUSH [tag] 291\t\t\t\n      JUMP \t\t\t\n    tag 290\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 292\t\t\t\n      PUSH [tag] 293\t\t\t\n      JUMP \t\t\t\n    tag 292\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH F\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      SWAP13 \t\t\t\n      SWAP4 \t\t\t\n      SWAP12 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP10 \t\t\t\n      POP \t\t\t\n      CHAINID \t\t\t\n      SWAP9 \t\t\t\n      POP \t\t\t\n      ADDRESS \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 137\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 303\t\t\t\n      PUSH [tag] 304\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 219\t\t\t\n      JUMP \t\t\t\n    tag 304\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 220\t\t\t\n      JUMP \t\t\t\n    tag 303\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 146\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE04\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 60\t\t\t\n      SWAP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\tress to, uint256 val\n      PUSH [tag] 191\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 151\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH E8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 303\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 156\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      CALLER \t\t\txtProVista\n      PUSH [tag] 200\t\t\t\n      DUP2 \t\t\txtProVista\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 209\t\t\t\n      JUMP \t\t\t\n    tag 166\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      TIMESTAMP \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 321\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2341D787\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t decimals());\\n    }\\n\\n    \n      SWAP1 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 24\t\t\tecipient, 38165472\n      ADD \t\t\tecipient, 38165472\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 321\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH E48329057BFD03D55E49B547132E39CFFD9C1820AD7B9D4C5307691425D15ADF\t\t\t  returns (uint256)\\n    {\\n  ...\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 323\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 324\t\t\t\n      SWAP1 \t\t\t\n      PUSH A0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      PUSH [tag] 327\t\t\t\n      JUMP \t\t\t\n    tag 324\t\t\t\n      JUMPDEST \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 323\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 329\t\t\t\n      DUP2 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 330\t\t\t\n      JUMP \t\t\t\n    tag 329\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 247\t\t\t\n      DUP2 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 268\t\t\t\n      JUMP \t\t\t\n    tag 171\t\t\tternal\\n        override(ERC20...\n      JUMPDEST \t\t\tternal\\n        override(ERC20...\n      DUP4 \t\t\t NoncesU\n      TIMESTAMP \t\t\tPermitUpgradeab\n      GT \t\t\tPermitUpgradeable, NoncesU\n      ISZERO \t\t\tRC20PermitUpgradeable, NoncesU...\n      PUSH [tag] 333\t\t\tRC20PermitUpgradeable, NoncesU...\n      JUMPI \t\t\tRC20PermitUpgradeable, NoncesU...\n      PUSH 40\t\t\turns (uint256)\\n    {\\n       ...\n      MLOAD \t\t\turns (uint256)\\n    {\\n       ...\n      PUSH 313C8981\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\turns (uint256)\\n    {\\n       ...\n      MSTORE \t\t\turns (uint256)\\n    {\\n       ...\n      PUSH 4\t\t\turns (uint256)\\n    {\\n       ...\n      DUP2 \t\t\turns (uint256)\\n    {\\n       ...\n      ADD \t\t\turns (uint256)\\n    {\\n       ...\n      DUP6 \t\t\t decimals());\\n    }\\n\\n    \n      SWAP1 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 24\t\t\tecipient, 38165472\n      ADD \t\t\tecipient, 38165472\n      PUSH [tag] 288\t\t\turns (uint256)\\n    {\\n       ...\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 333\t\t\tRC20PermitUpgradeable, NoncesU...\n      JUMPDEST \t\t\tRC20PermitUpgradeable, NoncesU...\n      PUSH 0\t\t\t);\\n    }\\n}\\n\n      PUSH 6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9\t\t\t    public initializer\\n    {\\...\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 335\t\t\t\n      DUP13 \t\t\t\n      PUSH [tag] 336\t\t\t\n      JUMP \t\t\t\n    tag 335\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP7 \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP5 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      AND \t\t\t\n      PUSH 60\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH C0\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH E0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t);\\n    }\\n}\\n\n      POP \t\t\t);\\n    }\\n}\\n\n      PUSH 0\t\t\t\n      PUSH [tag] 339\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 327\t\t\t\n      JUMP \t\t\t\n    tag 339\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 340\t\t\t\n      DUP3 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 328\t\t\t\n      JUMP \t\t\t\n    tag 340\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP10 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 341\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 25C00723\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP12 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 341\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 344\t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 201\t\t\t\n      JUMP \t\t\t\n    tag 344\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\toverride(ERC20PermitUpgradeabl...\n      POP \t\t\toverride(ERC20PermitUpgradeabl...\n      POP \t\t\toverride(ERC20PermitUpgradeabl...\n      POP \t\t\tternal\\n        override(ERC20...\n      POP \t\t\tternal\\n        override(ERC20...\n      POP \t\t\tternal\\n        override(ERC20...\n      POP \t\t\tternal\\n        override(ERC20...\n      POP \t\t\tternal\\n        override(ERC20...\n      POP \t\t\tternal\\n        override(ERC20...\n      POP \t\t\tternal\\n        override(ERC20...\n      JUMP \t\t\tternal\\n        override(ERC20...\n    tag 175\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE01\t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 181\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 351\t\t\t\n      JUMP \t\t\t\n    tag 187\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 353\t\t\tble)\\n        \n      PUSH [tag] 276\t\t\tble)\\n      \n      JUMP \t\t\tble)\\n        \n    tag 353\t\t\tble)\\n        \n      JUMPDEST \t\t\tble)\\n        \n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 355\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1E4FBDF7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 355\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 357\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 279\t\t\t\n      JUMP \t\t\t\n    tag 357\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 201\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 361\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 362\t\t\t\n      JUMP \t\t\t\n    tag 361\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 207\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 364\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 175\t\t\t\n      JUMP \t\t\t\n    tag 364\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 369\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 366\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7DC7A0D9\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 366\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 369\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 362\t\t\t\n      JUMP \t\t\t\n    tag 369\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 209\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 371\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4B637E8F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 371\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 373\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 373\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 361\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 376\t\t\t\n      JUMP \t\t\t\n    tag 213\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 212\t\t\t\n      PUSH [tag] 379\t\t\t\n      JUMP \t\t\t\n    tag 219\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      TIMESTAMP \t\t\tblock.timestamp\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 383\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 7669FC0F\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 24\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 383\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 387\t\t\t\n      JUMP \t\t\t\n    tag 220\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      PUSH 5\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 389\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 390\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 391\t\t\t\n      JUMP \t\t\t\n    tag 390\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 392\t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMP \t\t\t\n    tag 392\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP9 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP8 \t\t\t\n      AND \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 396\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 397\t\t\t\n      JUMP \t\t\t\n    tag 396\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 398\t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 399\t\t\t\n      JUMP \t\t\t\n    tag 398\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n    tag 397\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n    tag 389\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 400\t\t\t\n      DUP8 \t\t\t\n      DUP8 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 401\t\t\t\n      JUMP \t\t\t\n    tag 400\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 402\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 403\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 404\t\t\t\n      PUSH 1\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMP \t\t\t\n    tag 404\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      KECCAK256 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 403\t\t\t\n      JUMPDEST \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 405\t\t\t\n      JUMP \t\t\t\n    tag 402\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 405\t\t\t\n      JUMPDEST \t\t\t\n      SWAP8 \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 231\t\t\t     override(ERC20PermitUpgra...\n      JUMPDEST \t\t\t     override(ERC20PermitUpgra...\n      PUSH [tag] 408\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 408\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 257\t\t\tn super.nonces(owner);\\n    }\\...\n      DUP3 \t\t\t    }\n      DUP3 \t\t\t\\n\n      PUSH [tag] 412\t\t\tn super.nonces(owner);\n      JUMP \t\t\tn super.nonces(owner);\\n    }\\...\n    tag 233\t\t\t\\n    }\\n\\n    function _autho...\n      JUMPDEST \t\t\t\\n    }\\n\\n    function _autho...\n      PUSH [tag] 414\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 414\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 357\t\t\t       override\\n        onlyO...\n      DUP2 \t\t\tonly\n      PUSH 40\t\t\t       override\\n        onlyO...\n      MLOAD \t\t\t       override\\n        onlyO...\n      DUP1 \t\t\t       override\\n        onlyO...\n      PUSH 40\t\t\t       override\\n        onlyO...\n      ADD \t\t\t       override\\n        onlyO...\n      PUSH 40\t\t\t       override\\n        onlyO...\n      MSTORE \t\t\t       override\\n        onlyO...\n      DUP1 \t\t\t       override\\n        onlyO...\n      PUSH 1\t\t\t       override\\n        onlyO...\n      DUP2 \t\t\t       override\\n        onlyO...\n      MSTORE \t\t\t       override\\n        onlyO...\n      PUSH 20\t\t\t       override\\n        onlyO...\n      ADD \t\t\t       override\\n        onlyO...\n      PUSH 31\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t       override\\n        onlyO...\n      MSTORE \t\t\t       override\\n        onlyO...\n      POP \t\t\t       override\\n        onlyO...\n      PUSH [tag] 417\t\t\t       override\\n       \n      JUMP \t\t\t       override\\n        onlyO...\n    tag 235\t\t\terride returns (uint48) {\\n   ...\n      JUMPDEST \t\t\terride returns (uint48) {\\n   ...\n      PUSH [tag] 278\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 237\t\t\tction _authorizeUpgrade(addres...\n      JUMPDEST \t\t\tction _authorizeUpgrade(addres...\n      PUSH [tag] 422\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 422\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 357\t\t\tde\\n        onlyOwner\\n    {}\\...\n      DUP2 \t\t\t{}\\n\\n    // T\n      PUSH [tag] 425\t\t\tde\\n        onlyOwner\\n   \n      JUMP \t\t\tde\\n        onlyOwner\\n    {}\\...\n    tag 246\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 430\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH EC442F05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 430\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 257\t\t\t\n      PUSH 0\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 376\t\t\t\n      JUMP \t\t\t\n    tag 253\t\t\t\n      JUMPDEST \t\t\t\n      ADDRESS \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      PUSHIMMUTABLE 1113\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 434\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSHIMMUTABLE 1113\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 435\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SLOAD \t\t\tcipient, 381654729 * 10 ** dec...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\tcipient, 381654729 * 10 ** dec...\n      SWAP1 \t\t\tcipient, 381654729 * 10 ** dec...\n      JUMP \t\t\twnable_init(initialOwner);\\n  ...\n    tag 435\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      ISZERO \t\t\t\n    tag 434\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 703E46DD\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 256\t\t\tfunction _authorizeUpgrade(add...\n      JUMPDEST \t\t\tfunction _authorizeUpgrade(add...\n      PUSH [tag] 357\t\t\tble)\\n        \n      PUSH [tag] 276\t\t\tble)\\n      \n      JUMP \t\t\tble)\\n        \n    tag 258\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 52D1902D\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP2 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      DUP7 \t\t\t\n      GAS \t\t\t\n      STATICCALL \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 442\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      RETURNDATASIZE \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 443\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 444\t\t\t\n      JUMP \t\t\t\n    tag 443\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n    tag 442\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 445\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4C9C8CE3\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 445\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 451\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2A875269\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t decimals());\\n    }\\n\\n    \n      SWAP1 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 24\t\t\tecipient, 38165472\n      ADD \t\t\tecipient, 38165472\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 451\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 361\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 454\t\t\t\n      JUMP \t\t\t\n    tag 261\t\t\t\n      JUMPDEST \t\t\t\n      ADDRESS \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      PUSHIMMUTABLE 1113\t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 703E46DD\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 268\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 459\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 98\t\t\t\n      JUMP \t\t\t\n    tag 459\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP10 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      OR \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      SWAP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP5 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      PUSH 3134E8A2E6D97E929A7E54011EA5485D7D196DD5F0BA4D4EF95803E8E3FC257F\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      LOG4 \t\t\t\n      PUSH [tag] 369\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 461\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 462\t\t\t\n      JUMP \t\t\t\n    tag 461\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 463\t\t\t\n      JUMP \t\t\t\n    tag 271\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH E8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01\t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 204\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 469\t\t\t\n      JUMP \t\t\t\n    tag 276\t\t\t\n      JUMPDEST \t\t\t\n      CALLER \t\t\txtProVista\n      PUSH [tag] 472\t\t\t\n      PUSH 9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300\t\t\t   __ERC20_init(\"Next \n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 472\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 118CDAA7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      CALLER \t\t\txtProVista\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 279\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300\t\t\t   __ERC20_init(\"Next \n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      OR \t\t\t\n      DUP5 \t\t\t\n      SSTORE \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      PUSH 8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0\t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 282\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 197\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 480\t\t\t\n      JUMP \t\t\t\n    tag 291\t\t\t\n      JUMPDEST \t\t\t\n      PUSH A16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D102\t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 60\t\t\t\n      SWAP2 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      PUSH [tag] 191\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 293\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 189\t\t\t\n      JUMP \t\t\t\n    tag 316\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 498\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 499\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 404\t\t\t\n      PUSH 1\t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMP \t\t\t\n    tag 499\t\t\t\n      JUMPDEST \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH [tag] 204\t\t\t\n      JUMP \t\t\t\n    tag 498\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 327\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 197\t\t\t\n      PUSH [tag] 504\t\t\t\n      PUSH [tag] 213\t\t\t\n      JUMP \t\t\t\n    tag 504\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1901\t\t\t\n      PUSH F0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 42\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 328\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 507\t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 508\t\t\t\n      JUMP \t\t\t\n    tag 507\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 509\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 510\t\t\t\n      JUMP \t\t\t\n    tag 509\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP7 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 330\t\t\trnal\\n        override(ERC20Up...\n      JUMPDEST \t\t\trnal\\n        override(ERC20Up...\n      PUSH 0\t\t\t_update(from, t\n      PUSH [tag] 512\t\t\tvalue);\\n    }\\n\\n \n      DUP4 \t\t\t  }\\n\\n\n      PUSH [tag] 336\t\t\tvalue);\\n \n      JUMP \t\t\tvalue);\\n    }\\n\\n \n    tag 512\t\t\tvalue);\\n    }\\n\\n \n      JUMPDEST \t\t\tvalue);\\n    }\\n\\n \n      SWAP1 \t\t\t_update(from, to, value);\\n   ...\n      POP \t\t\t_update(from, to, value);\\n   ...\n      DUP1 \t\t\tess own\n      DUP3 \t\t\tnces(\n      EQ \t\t\tnces(address own\n      PUSH [tag] 361\t\t\tn nonces(address owner)\\n     ...\n      JUMPI \t\t\tn nonces(address owner)\\n     ...\n      PUSH 40\t\t\t    view\\n        override(ERC...\n      MLOAD \t\t\t    view\\n        override(ERC...\n      PUSH 1D4B623\t\t\t\n      PUSH E6\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t    view\\n        override(ERC...\n      MSTORE \t\t\t    view\\n        override(ERC...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t    view\\n        override(ERC...\n      DUP3 \t\t\t    view\\n        override(ERC...\n      ADD \t\t\t    view\\n        override(ERC...\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t    view\\n        override(ERC...\n      JUMP \t\t\t\n    tag 336\t\t\t * 10 ** decimals());\\n    }\\n...\n      JUMPDEST \t\t\t * 10 ** decimals());\\n    }\\n...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t{}\\n\\n    // The f\n      PUSH 0\t\t\tw overr\n      SWAP1 \t\t\t{}\\n\\n    // The f\n      DUP2 \t\t\t{}\\n\\n    // The f\n      MSTORE \t\t\t{}\\n\\n    // The f\n      PUSH 5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00\t\t\tdeable, ERC20PermitUp\n      PUSH 20\t\t\t{}\\n\\n    // The f\n      MSTORE \t\t\t{}\\n\\n    // The f\n      PUSH 40\t\t\t{}\\n\\n    // The f\n      SWAP1 \t\t\t{}\\n\\n    // The f\n      KECCAK256 \t\t\t{}\\n\\n    // The f\n      DUP1 \t\t\t{}\\n\\n    // The fol\n      SLOAD \t\t\t{}\\n\\n    // The fol\n      PUSH 1\t\t\t{}\\n\\n    // The fol\n      DUP2 \t\t\t{}\\n\\n    // The fol\n      ADD \t\t\t{}\\n\\n    // The fol\n      SWAP1 \t\t\t{}\\n\\n    // The fol\n      SWAP2 \t\t\t{}\\n\\n    // The fol\n      SSTORE \t\t\t{}\\n\\n    // The fol\n      SWAP1 \t\t\t{}\\n\\n    // The fol\n      JUMP \t\t\t * 10 ** decimals());\\n    }\\n...\n    tag 351\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH E8B26C30FAD74198956032A3533D903385D56DD795AF560196F9C78D4AF40D01\t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 522\t\t\t\n      SWAP1 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 523\t\t\t\n      JUMP \t\t\t\n    tag 522\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 362\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 526\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E602DF05\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 526\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 528\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 4A1406B1\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 528\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP4 \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      KECCAK256 \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 530\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP6 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH 8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925\t\t\t\n      DUP6 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 531\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 20\t\t\t47\n      ADD \t\t\tecipient, 38165472\n      SWAP1 \t\t\tecipient, 38165472\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 531\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n    tag 530\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 376\t\t\tfunction _update(address from,...\n      JUMPDEST \t\t\tfunction _update(address from,...\n      PUSH [tag] 361\t\t\tsuper._update(from, to, value)\n      DUP4 \t\t\tfrom\n      DUP4 \t\t\tto\n      DUP4 \t\t\tvalue\n      PUSH [tag] 534\t\t\tsuper._update\n      JUMP \t\t\tsuper._update(from, to, value)\n    tag 379\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F\t\t\tuint256 value)\\n        intern...\n      PUSH [tag] 536\t\t\t\n      PUSH [tag] 537\t\t\t\n      JUMP \t\t\t\n    tag 536\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 538\t\t\t\n      PUSH [tag] 539\t\t\t\n      JUMP \t\t\t\n    tag 538\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP5 \t\t\t\n      SWAP1 \t\t\t\n      SWAP5 \t\t\t\n      MSTORE \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      CHAINID \t\t\t\n      PUSH 80\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      ADDRESS \t\t\t\n      PUSH A0\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH C0\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 387\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 543\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 6DFCC65\t\t\t\n      PUSH E4\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 30\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 543\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 391\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      PUSH [tag] 547\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 547\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH 80\t\t\t\n      SHL \t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 548\t\t\t\n      JUMPI \t\t\t\n      PUSH 80\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n    tag 548\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 549\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      PUSH 20\t\t\t\n      SHL \t\t\t\n    tag 549\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 100000000\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 550\t\t\t\n      JUMPI \t\t\t\n      PUSH 20\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      PUSH 10\t\t\t\n      SHL \t\t\t\n    tag 550\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 10000\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 551\t\t\t\n      JUMPI \t\t\t\n      PUSH 10\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      PUSH 8\t\t\t\n      SHL \t\t\t\n    tag 551\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 100\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 552\t\t\t\n      JUMPI \t\t\t\n      PUSH 8\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      PUSH 4\t\t\t\n      SHL \t\t\t\n    tag 552\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 10\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 553\t\t\t\n      JUMPI \t\t\t\n      PUSH 4\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      PUSH 2\t\t\t\n      SHL \t\t\t\n    tag 553\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 554\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      SHL \t\t\t\n    tag 554\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      MUL \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 556\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 556\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 556\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 559\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 559\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 559\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 561\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 561\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 561\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 563\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 563\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 563\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 565\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 565\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 565\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 567\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 567\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 567\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 568\t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 570\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 570\t\t\t\n      PUSH [tag] 557\t\t\t\n      JUMP \t\t\t\n    tag 570\t\t\t\n      JUMPDEST \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 568\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 401\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n    tag 574\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 575\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 576\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 577\t\t\t\n      JUMP \t\t\t\n    tag 576\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP8 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 579\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 580\t\t\t\n      JUMP \t\t\t\n    tag 579\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 581\t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 399\t\t\t\n      JUMP \t\t\t\n    tag 581\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n    tag 580\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH [tag] 574\t\t\t\n      JUMP \t\t\t\n    tag 575\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 409\t\t\t\n      JUMPDEST \t\t\t\n      PUSH F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00\t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      PUSH 40\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH FF\t\t\t\n      AND \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1AFCD79F\t\t\t\n      PUSH E3\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 412\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 587\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 587\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE03\t\t\t\n      PUSH [tag] 590\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 591\t\t\t\n      JUMP \t\t\t\n    tag 590\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 369\t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 591\t\t\t\n      JUMP \t\t\t\n    tag 417\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 594\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 594\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH A16A46D94261C7517CC8FF89F61C0CE93598E3C849801011DEE649A6A557D102\t\t\t\n      PUSH [tag] 597\t\t\t\n      DUP5 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 591\t\t\t\n      JUMP \t\t\t\n    tag 597\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 598\t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 591\t\t\t\n      JUMP \t\t\t\n    tag 598\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      SSTORE \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 425\t\t\tunctions are overrides require...\n      JUMPDEST \t\t\tunctions are overrides require...\n      PUSH [tag] 353\t\t\t\n      PUSH [tag] 409\t\t\t\n      JUMP \t\t\t\n    tag 454\t\t\tc\\n        view\\n        overr...\n      JUMPDEST \t\t\tc\\n        view\\n        overr...\n      PUSH [tag] 609\t\t\t(uint256)\\n    {\\n        retu...\n      DUP3 \t\t\t     return super\n      PUSH [tag] 610\t\t\t(uint256)\\n    {\\n  \n      JUMP \t\t\t(uint256)\\n    {\\n        retu...\n    tag 609\t\t\t(uint256)\\n    {\\n        retu...\n      JUMPDEST \t\t\t(uint256)\\n    {\\n        retu...\n      PUSH 40\t\t\t    }\\n}\\n\n      MLOAD \t\t\t    }\\n}\\n\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t    }\\n}\\n\n      AND \t\t\t    }\\n}\\n\n      SWAP1 \t\t\t    }\\n}\\n\n      PUSH BC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B\t\t\t    }\\n}\\n\n      SWAP1 \t\t\t    }\\n}\\n\n      PUSH 0\t\t\t    }\\n}\\n\n      SWAP1 \t\t\t    }\\n}\\n\n      LOG2 \t\t\t    }\\n}\\n\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 611\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 361\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 613\t\t\t\n      JUMP \t\t\t\n    tag 611\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 257\t\t\t\n      PUSH [tag] 616\t\t\t\n      JUMP \t\t\t\n    tag 462\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 197\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 114\t\t\t\n      JUMP \t\t\t\n    tag 463\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      EQ \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 621\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n    tag 621\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 369\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 623\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 624\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 625\t\t\t\n      PUSH [tag] 626\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 627\t\t\t\n      JUMP \t\t\t\n    tag 626\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 628\t\t\t\n      JUMP \t\t\t\n    tag 624\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 629\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 629\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 623\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 369\t\t\t\n      JUMPI \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 632\t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 633\t\t\t\n      PUSH [tag] 626\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 627\t\t\t\n      JUMP \t\t\t\n    tag 632\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DEC2BACDD2F05B59DE34DA9B523DFF8BE42E5E38E818C82FDB0BAE774387A724\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 635\t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 635\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 469\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH FFFFFFFF\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 543\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 6DFCC65\t\t\t\n      PUSH E4\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 480\t\t\ts initialOwner)\\n        publi...\n      JUMPDEST \t\t\ts initialOwner)\\n        publi...\n      PUSH 0\t\t\tRC20_in\n      DUP1 \t\t\tRC20_in\n      PUSH 5AB42CED628888259C08AC98DB1EB0CF702FC1501344311D8B100CD1BFE4BB00\t\t\tdeable, ERC20PermitUp\n      PUSH [tag] 273\t\t\t_ERC20Permit_init(\"\n      JUMP \t\t\tradeable.sol\";\\n\\n/// @custom:...\n    tag 508\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP1 \t\t\t\n      PUSH 7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 645\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 3\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 644\t\t\t\n      JUMP \t\t\t\n    tag 645\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      MSTORE \t\t\t\n      DUP11 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH FF\t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      SWAP3 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 60\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 80\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      PUSH A0\t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP6 \t\t\t\n      GAS \t\t\t\n      STATICCALL \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 649\t\t\t\n      JUMPI \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      RETURNDATACOPY \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 649\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 650\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 644\t\t\t\n      JUMP \t\t\t\n    tag 650\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n    tag 644\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      SWAP5 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 510\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 656\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 656\t\t\t\n      PUSH [tag] 654\t\t\t\n      JUMP \t\t\t\n    tag 656\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 657\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 657\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 662\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 662\t\t\t\n      PUSH [tag] 654\t\t\t\n      JUMP \t\t\t\n    tag 662\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 663\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH F645EEDF\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 663\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 2\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 668\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 668\t\t\t\n      PUSH [tag] 654\t\t\t\n      JUMP \t\t\t\n    tag 668\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 669\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH FCE698F7\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t decimals());\\n    }\\n\\n    \n      SWAP1 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 24\t\t\tecipient, 38165472\n      ADD \t\t\tecipient, 38165472\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 669\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 3\t\t\t\n      DUP3 \t\t\t\n      PUSH 3\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 675\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 675\t\t\t\n      PUSH [tag] 654\t\t\t\n      JUMP \t\t\t\n    tag 675\t\t\t\n      JUMPDEST \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 257\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 35E2F383\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t decimals());\\n    }\\n\\n    \n      SWAP1 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 24\t\t\tecipient, 38165472\n      ADD \t\t\tecipient, 38165472\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 523\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP3 \t\t\t\n      PUSH 0\t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      PUSH [tag] 682\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 682\t\t\t\n      PUSH [tag] 683\t\t\t\n      JUMP \t\t\t\n    tag 682\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 534\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 686\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 687\t\t\t\n      JUMP \t\t\t\n    tag 686\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 688\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 689\t\t\t\n      PUSH 52C63247E1F47DB19D5CE0460030C497F067CA4CEBF71BA98EEADABE20BACE02\t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 689\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 692\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH E58AE93\t\t\t\n      PUSH E1\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 692\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 688\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 361\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 695\t\t\t\n      JUMP \t\t\t\n    tag 537\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 698\t\t\t\n      PUSH [tag] 291\t\t\t\n      JUMP \t\t\t\n    tag 698\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 699\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 699\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      SLOAD \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 701\t\t\t\n      JUMPI \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 701\t\t\t\n      JUMPDEST \t\t\t\n      PUSH C5D2460186F7233C927E7DB2DCC703C0E500B653CA82273B7BFAD8045D85A470\t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 539\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 705\t\t\t\n      PUSH [tag] 293\t\t\t\n      JUMP \t\t\t\n    tag 705\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 706\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      KECCAK256 \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 706\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SLOAD \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 701\t\t\t\n      JUMPI \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 577\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 712\t\t\t\n      PUSH 2\t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      XOR \t\t\t\n      PUSH [tag] 713\t\t\t\n      JUMP \t\t\t\n    tag 712\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 204\t\t\t\n      SWAP1 \t\t\t\n      DUP5 \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 399\t\t\t\n      JUMP \t\t\t\n    tag 610\t\t\t}\\n\\n    // solhint-disable-ne...\n      JUMPDEST \t\t\t}\\n\\n    // solhint-disable-ne...\n      DUP1 \t\t\tDE() public pure \n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\tDE() public pure override ret\n      EXTCODESIZE \t\t\tDE() public pure override ret\n      PUSH 0\t\t\t \n      SUB \t\t\tDE() public pure override retu...\n      PUSH [tag] 719\t\t\tK_MODE() public pure override ...\n      JUMPI \t\t\tK_MODE() public pure override ...\n      PUSH 40\t\t\t   return \"mode=timestamp\";\\n ...\n      MLOAD \t\t\t   return \"mode=timestamp\";\\n ...\n      PUSH 4C9C8CE3\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t   return \"mode=timestamp\";\\n ...\n      MSTORE \t\t\t   return \"mode=timestamp\";\\n ...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t   return \"mode=timestamp\";\\n ...\n      DUP3 \t\t\t   return \"mode=timestamp\";\\n ...\n      ADD \t\t\t   return \"mode=timestamp\";\\n ...\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t   return \"mode=timestamp\";\\n ...\n      JUMP \t\t\t\n    tag 719\t\t\tK_MODE() public pure override ...\n      JUMPDEST \t\t\tK_MODE() public pure override ...\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\tddress newImplementation)\\n   ...\n      SLOAD \t\t\tddress newImplementation)\\n   ...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      NOT \t\t\t\n      AND \t\t\tddress newImplementation)\\n   ...\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      SWAP3 \t\t\tddress newImplementation)\\n   ...\n      SWAP1 \t\t\tddress newImplementation)\\n   ...\n      SWAP3 \t\t\tddress newImplementation)\\n   ...\n      AND \t\t\tddress newImplementation)\\n   ...\n      SWAP2 \t\t\tddress newImplementation)\\n   ...\n      SWAP1 \t\t\tddress newImplementation)\\n   ...\n      SWAP2 \t\t\tddress newImplementation)\\n   ...\n      OR \t\t\tddress newImplementation)\\n   ...\n      SWAP1 \t\t\tddress newImplementation)\\n   ...\n      SSTORE \t\t\tddress newImplementation)\\n   ...\n      JUMP \t\t\t}\\n\\n    // solhint-disable-ne...\n    tag 613\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 723\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 724\t\t\t\n      JUMP \t\t\t\n    tag 723\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP4 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      GAS \t\t\t\n      DELEGATECALL \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      RETURNDATASIZE \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 727\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      PUSH 3F\t\t\t\n      RETURNDATASIZE \t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      RETURNDATASIZE \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      RETURNDATASIZE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      RETURNDATACOPY \t\t\t\n      PUSH [tag] 726\t\t\t\n      JUMP \t\t\t\n    tag 727\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 726\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 728\t\t\t\n      DUP6 \t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 729\t\t\t\n      JUMP \t\t\t\n    tag 728\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 616\t\t\t\n      JUMPDEST \t\t\t\n      CALLVALUE \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 278\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH B398979F\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 625\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 734\t\t\t\n      JUMP \t\t\t\n    tag 627\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 543\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 6DFCC65\t\t\t\n      PUSH E4\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH D0\t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 628\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 740\t\t\t\n      TIMESTAMP \t\t\tblock.timestamp\n      PUSH [tag] 742\t\t\t\n      PUSH [tag] 743\t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 316\t\t\t\n      JUMP \t\t\t\n    tag 743\t\t\t\n      JUMPDEST \t\t\t\n      DUP7 \t\t\t\n      DUP9 \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      AND \t\t\t\n      JUMP \t\t\t\n    tag 742\t\t\t\n      JUMPDEST \t\t\t\n      DUP8 \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 744\t\t\t\n      JUMP \t\t\t\n    tag 740\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 739\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP4 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 633\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 747\t\t\t\n      JUMP \t\t\t\n    tag 687\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 750\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      PUSH 2\t\t\t\n      ADD \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 751\t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 399\t\t\t\n      JUMP \t\t\t\n    tag 751\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      POP \t\t\t\n      PUSH [tag] 752\t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 750\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SLOAD \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 753\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 391434E3\t\t\t\n      PUSH E2\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 44\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP5 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 64\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 753\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 752\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 755\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP4 \t\t\t\n      SWAP1 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 756\t\t\t\n      JUMP \t\t\t\n    tag 755\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 40\t\t\t\n      SWAP1 \t\t\t\n      KECCAK256 \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SSTORE \t\t\t\n    tag 756\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      PUSH DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF\t\t\t\n      DUP5 \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 757\t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t decimals());\\n    }\\n\\n    \n      MSTORE \t\t\t decimals());\\n    }\\n\\n    \n      PUSH 20\t\t\t47\n      ADD \t\t\tecipient, 38165472\n      SWAP1 \t\t\tecipient, 38165472\n      JUMP \t\t\t;\\n        __ERC20Votes_init()...\n    tag 757\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      LOG3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 695\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      PUSH 20\t\t\t\n      PUSH data 23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46\t\t\t\n      DUP4 \t\t\t\n      CODECOPY \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 761\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 762\t\t\t\n      DUP2 \t\t\t\n      PUSH 2\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 633\t\t\t\n      PUSH [tag] 626\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 627\t\t\t\n      JUMP \t\t\t\n    tag 762\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 761\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP4 \t\t\t\n      AND \t\t\t\n      PUSH [tag] 764\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 765\t\t\t\n      DUP2 \t\t\t\n      PUSH 2\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 625\t\t\t\n      PUSH [tag] 626\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 627\t\t\t\n      JUMP \t\t\t\n    tag 765\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n    tag 764\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 369\t\t\t\n      PUSH [tag] 768\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 98\t\t\t\n      JUMP \t\t\t\n    tag 768\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 769\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 98\t\t\t\n      JUMP \t\t\t\n    tag 769\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 463\t\t\t\n      JUMP \t\t\t\n    tag 729\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 771\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 772\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 773\t\t\t\n      JUMP \t\t\t\n    tag 772\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 204\t\t\t\n      JUMP \t\t\t\n    tag 771\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      ISZERO \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 775\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      EXTCODESIZE \t\t\t\n      ISZERO \t\t\t\n    tag 775\t\t\t\n      JUMPDEST \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 776\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 9996B315\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 4\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 288\t\t\t\n      JUMP \t\t\t\n    tag 776\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 204\t\t\t\n      JUMP \t\t\t\n    tag 744\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 740\t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 780\t\t\t\n      JUMP \t\t\t\n    tag 773\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 782\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      ADD \t\t\t\n      REVERT \t\t\t\n    tag 782\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH D6BDA275\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 780\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH 0\t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 785\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 786\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 404\t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      PUSH [tag] 393\t\t\t\n      JUMP \t\t\t\n    tag 786\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      SWAP1 \t\t\t\n      DIV \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      AND \t\t\t\n      SWAP1 \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 788\t\t\t\n      JUMPI \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 2520601D\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 4\t\t\t\n      ADD \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      REVERT \t\t\t\n    tag 788\t\t\t\n      JUMPDEST \t\t\t\n      DUP8 \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 789\t\t\t\n      JUMPI \t\t\t\n      DUP3 \t\t\t\n      SLOAD \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP10 \t\t\t\n      AND \t\t\t\n      MUL \t\t\t\n      OR \t\t\t\n      DUP4 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 790\t\t\t\n      JUMP \t\t\t\n    tag 789\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP11 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP11 \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP14 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP16 \t\t\t\n      SSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP16 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP5 \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      MUL \t\t\t\n      SWAP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      OR \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SSTORE \t\t\t\n    tag 790\t\t\t\n      JUMPDEST \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 739\t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 785\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP1 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH FFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      DUP9 \t\t\t\n      SLOAD \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      DUP11 \t\t\t\n      SSTORE \t\t\t\n      PUSH 0\t\t\t\n      DUP11 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      SWAP2 \t\t\t\n      DUP3 \t\t\t\n      KECCAK256 \t\t\t\n      SWAP6 \t\t\t\n      MLOAD \t\t\t\n      SWAP3 \t\t\t\n      MLOAD \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      PUSH 30\t\t\t\n      SHL \t\t\t\n      MUL \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP4 \t\t\t\n      AND \t\t\t\n      OR \t\t\t\n      SWAP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      SSTORE \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 739\t\t\t\n      JUMP \t\t\t\n    tag 794\t\t\te-Identifier: MIT\\n// Compatib...\n      JUMPDEST \t\t\te-Identifier: MIT\\n// Compatib...\n      PUSH 0\t\t\t.\n    tag 806\t\t\tport {ERC20Upgradeable} from \"...\n      JUMPDEST \t\t\tport {ERC20Upgradeable} from \"...\n      DUP4 \t\t\tradeab\n      DUP2 \t\t\tU\n      LT \t\t\tC20Upgradeabl\n      ISZERO \t\t\tport {ERC20Upgradeable} from \"...\n      PUSH [tag] 808\t\t\tport {ERC20Upgradeable} from \"...\n      JUMPI \t\t\tport {ERC20Upgradeable} from \"...\n      DUP2 \t\t\tpgradeable.\n      DUP2 \t\t\tpgradeable.\n      ADD \t\t\tpgradeable.\n      MLOAD \t\t\tERC20Upgradeable.s\n      DUP4 \t\t\t/token/ERC2\n      DUP3 \t\t\t/token/ERC2\n      ADD \t\t\t/token/ERC2\n      MSTORE \t\t\te@5.2.0/token/ERC20/ERC20Upgra...\n      PUSH 20\t\t\tep\n      ADD \t\t\t\"@openzepp\n      PUSH [tag] 806\t\t\tport {ERC20Upgradeable} from \"...\n      JUMP \t\t\tport {ERC20Upgradeable} from \"...\n    tag 808\t\t\tport {ERC20Upgradeable} from \"...\n      JUMPDEST \t\t\tport {ERC20Upgradeable} from \"...\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\tp\n      SWAP2 \t\t\tradeable} from \"\n      ADD \t\t\tradeable} from \"\n      MSTORE \t\t\trmitUpgradeable} from \"@ope\n      JUMP \t\t\te-Identifier: MIT\\n// Compatib...\n    tag 795\t\t\tontracts-upgradeable@5.2.0/tok...\n      JUMPDEST \t\t\tontracts-upgradeable@5.2.0/tok...\n      PUSH 0\t\t\tens\n      DUP2 \t\t\tmport\n      MLOAD \t\t\tol\";\\nimport \n      DUP1 \t\t\te} fro\n      DUP5 \t\t\tdea\n      MSTORE \t\t\tesUpgradeable} from\n      PUSH [tag] 810\t\t\tppelin/contracts-upgradeable@5...\n      DUP2 \t\t\tpgrade\n      PUSH 20\t\t\t0Vot\n      DUP7 \t\t\t/ER\n      ADD \t\t\tions/ERC20Vote\n      PUSH 20\t\t\t/ext\n      DUP7 \t\t\tn/ERC\n      ADD \t\t\ttoken/ERC20/exte\n      PUSH [tag] 794\t\t\tppelin/contracts-upgradeable@5...\n      JUMP \t\t\tppelin/contracts-upgradeable@5...\n    tag 810\t\t\tppelin/contracts-upgradeable@5...\n      JUMPDEST \t\t\tppelin/contracts-upgradeable@5...\n      PUSH 1F\t\t\ton\n      ADD \t\t\tfrom \"@openzepp\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      AND \t\t\tle} from \"@openzeppelin/contr\n      SWAP3 \t\t\titializable} from \"@openzeppel...\n      SWAP1 \t\t\titializable} from \"@openzeppel...\n      SWAP3 \t\t\titializable} from \"@openzeppel...\n      ADD \t\t\titializable} from \"@openzeppel...\n      PUSH 20\t\t\ts-up\n      ADD \t\t\t {Initializable} from \"@openze...\n      SWAP3 \t\t\t {Initializable} from \"@openze...\n      SWAP2 \t\t\tontracts-upgradeable@5.2.0/tok...\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\tontracts-upgradeable@5.2.0/tok...\n    tag 43\t\t\t2.0/proxy/utils/Initializable....\n      JUMPDEST \t\t\t2.0/proxy/utils/Initializable....\n      PUSH 20\t\t\tOw\n      DUP2 \t\t\t\";\\nimport\n      MSTORE \t\t\tble.sol\";\\nimport {Own\n      PUSH 0\t\t\ttils\n      PUSH [tag] 204\t\t\tfrom \"@openzeppelin/contracts-...\n      PUSH 20\t\t\t@5\n      DUP4 \t\t\tupgradeab\n      ADD \t\t\tcts-upgradeable@5.\n      DUP5 \t\t\tn/cont\n      PUSH [tag] 795\t\t\tfrom \"@openzeppelin/contracts-...\n      JUMP \t\t\tfrom \"@openzeppelin/contracts-...\n    tag 796\t\t\twnableUpgradeable.sol\";\\nimpor...\n      JUMPDEST \t\t\twnableUpgradeable.sol\";\\nimpor...\n      DUP1 \t\t\t/contracts-upgradeab\n      CALLDATALOAD \t\t\t/contracts-upgradeab\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\tadeable.sol\";\\n\\n/// @custom:s...\n      AND \t\t\tadeable.sol\";\\n\\n/// @custom:s...\n      DUP2 \t\t\ts/UUPSUpgradeable.sol\";\\n\\n///...\n      EQ \t\t\ts/UUPSUpgradeable.sol\";\\n\\n///...\n      PUSH [tag] 814\t\t\tproxy/utils/UUPSUpgradeable.so...\n      JUMPI \t\t\tproxy/utils/UUPSUpgradeable.so...\n      PUSH 0\t\t\tc\n      DUP1 \t\t\t \n      REVERT \t\t\tcontact rucr\n    tag 814\t\t\tproxy/utils/UUPSUpgradeable.so...\n      JUMPDEST \t\t\tproxy/utils/UUPSUpgradeable.so...\n      SWAP2 \t\t\twnableUpgradeable.sol\";\\nimpor...\n      SWAP1 \t\t\twnableUpgradeable.sol\";\\nimpor...\n      POP \t\t\twnableUpgradeable.sol\";\\nimpor...\n      JUMP \t\t\twnableUpgradeable.sol\";\\nimpor...\n    tag 47\t\t\til.com\\ncontract NextProVista ...\n      JUMPDEST \t\t\til.com\\ncontract NextProVista ...\n      PUSH 0\t\t\t20Perm\n      DUP1 \t\t\tUpgrad\n      PUSH 40\t\t\te,\n      DUP4 \t\t\tleUpgrade\n      DUP6 \t\t\tle, Own\n      SUB \t\t\tdeable, OwnableUpgradea\n      SLT \t\t\tpgradeable, OwnableUpgradeable...\n      ISZERO \t\t\tesUpgradeable, OwnableUpgradea...\n      PUSH [tag] 816\t\t\tesUpgradeable, OwnableUpgradea...\n      JUMPI \t\t\tesUpgradeable, OwnableUpgradea...\n      PUSH 0\t\t\tl\n      DUP1 \t\t\te\n      REVERT \t\t\tSUpgradeable\n    tag 816\t\t\tesUpgradeable, OwnableUpgradea...\n      JUMPDEST \t\t\tesUpgradeable, OwnableUpgradea...\n      PUSH [tag] 817\t\t\t-upgrades-unsafe-allow constr\n      DUP4 \t\t\tlow const\n      PUSH [tag] 796\t\t\t-upgrades-unsafe-allow constr\n      JUMP \t\t\t-upgrades-unsafe-allow constr\n    tag 817\t\t\t-upgrades-unsafe-allow constr\n      JUMPDEST \t\t\t-upgrades-unsafe-allow constr\n      SWAP5 \t\t\t@custom:oz-upgrades-unsafe-all...\n      PUSH 20\t\t\tal\n      SWAP4 \t\t\t  _disableInitiali\n      SWAP1 \t\t\t  _disableInitiali\n      SWAP4 \t\t\t  _disableInitiali\n      ADD \t\t\t  _disableInitiali\n      CALLDATALOAD \t\t\tor() {\\n        _disableInitia...\n      SWAP4 \t\t\tor() {\\n        _disableInitia...\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\til.com\\ncontract NextProVista ...\n    tag 59\t\t\tock() public view override ret...\n      JUMPDEST \t\t\tock() public view override ret...\n      PUSH 0\t\t\testamp\n      DUP1 \t\t\t\\n    }\n      PUSH 0\t\t\t    //\n      PUSH 60\t\t\t  \n      DUP5 \t\t\te-mixedca\n      DUP7 \t\t\t func-n\n      SUB \t\t\tline func-name-mixedcas\n      SLT \t\t\text-line func-name-mixedcase\\n...\n      ISZERO \t\t\te-next-line func-name-mixedcas...\n      PUSH [tag] 821\t\t\te-next-line func-name-mixedcas...\n      JUMPI \t\t\te-next-line func-name-mixedcas...\n      PUSH 0\t\t\tC\n      DUP1 \t\t\tC\n      REVERT \t\t\tnction CLOCK\n    tag 821\t\t\te-next-line func-name-mixedcas...\n      JUMPDEST \t\t\te-next-line func-name-mixedcas...\n      PUSH [tag] 822\t\t\tverride returns (string memor\n      DUP5 \t\t\tring memo\n      PUSH [tag] 796\t\t\tverride returns (string memor\n      JUMP \t\t\tverride returns (string memor\n    tag 822\t\t\tverride returns (string memor\n      JUMPDEST \t\t\tverride returns (string memor\n      SWAP3 \t\t\tlic pure override returns (str...\n      POP \t\t\tlic pure override returns (str...\n      PUSH [tag] 823\t\t\t \"mode=timestamp\";\\n    }\\n\\n ...\n      PUSH 20\t\t\tti\n      DUP6 \t\t\t}\\n\\n    fu\n      ADD \t\t\t    }\\n\\n    functio\n      PUSH [tag] 796\t\t\t \"mode=timestamp\";\\n    }\\n\\n ...\n      JUMP \t\t\t \"mode=timestamp\";\\n    }\\n\\n ...\n    tag 823\t\t\t \"mode=timestamp\";\\n    }\\n\\n ...\n      JUMPDEST \t\t\t \"mode=timestamp\";\\n    }\\n\\n ...\n      SWAP2 \t\t\t    return \"mode=timestamp\";\\n...\n      POP \t\t\t    return \"mode=timestamp\";\\n...\n      PUSH 40\t\t\t  \n      DUP5 \t\t\tentation)\n      ADD \t\t\tplementation)\\n    \n      CALLDATALOAD \t\t\taddress newImplementation)\\n  ...\n      SWAP1 \t\t\tzeUpgrade(address newImplement...\n      POP \t\t\tzeUpgrade(address newImplement...\n      SWAP3 \t\t\tock() public view override ret...\n      POP \t\t\tock() public view override ret...\n      SWAP3 \t\t\tock() public view override ret...\n      POP \t\t\tock() public view override ret...\n      SWAP3 \t\t\tock() public view override ret...\n      JUMP \t\t\tock() public view override ret...\n    tag 80\t\t\t  override(ERC20PermitUpgradea...\n      JUMPDEST \t\t\t  override(ERC20PermitUpgradea...\n      PUSH 0\t\t\ts (uin\n      DUP1 \t\t\t56)\\n  \n      PUSH 40\t\t\t\\n\n      DUP4 \t\t\ter);\\n    \n      DUP6 \t\t\tonces(o\n      SUB \t\t\ter.nonces(owner);\\n    }\n      SLT \t\t\t super.nonces(owner);\\n    }\\n...\n      ISZERO \t\t\turn super.nonces(owner);\\n    ...\n      PUSH [tag] 827\t\t\turn super.nonces(owner);\\n    ...\n      JUMPI \t\t\turn super.nonces(owner);\\n    ...\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 827\t\t\turn super.nonces(owner);\\n    ...\n      JUMPDEST \t\t\turn super.nonces(owner);\\n    ...\n      PUSH [tag] 828\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 828\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 829\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 829\t\t\t\n      JUMPDEST \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t  override(ERC20PermitUpgradea...\n      POP \t\t\t  override(ERC20PermitUpgradea...\n      SWAP3 \t\t\t  override(ERC20PermitUpgradea...\n      SWAP1 \t\t\t  override(ERC20PermitUpgradea...\n      POP \t\t\t  override(ERC20PermitUpgradea...\n      JUMP \t\t\t  override(ERC20PermitUpgradea...\n    tag 296\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 41\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 88\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 832\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 832\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 833\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 833\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 834\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 834\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      SLT \t\t\t\n      PUSH [tag] 835\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 835\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      CALLDATALOAD \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 837\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 837\t\t\t\n      PUSH [tag] 296\t\t\t\n      JUMP \t\t\t\n    tag 837\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 40\t\t\t\n      MLOAD \t\t\t\n      PUSH 1F\t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      SWAP1 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      PUSH 3F\t\t\t\n      ADD \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      DUP2 \t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 839\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 839\t\t\t\n      PUSH [tag] 296\t\t\t\n      JUMP \t\t\t\n    tag 839\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 40\t\t\t\n      MSTORE \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      DUP9 \t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 840\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 840\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      PUSH 20\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATACOPY \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP1 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 97\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 842\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 842\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 204\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 128\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      PUSH F8\t\t\t\n      SHL \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      PUSH E0\t\t\t\n      PUSH 20\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 847\t\t\t\n      PUSH E0\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 795\t\t\t\n      JUMP \t\t\t\n    tag 847\t\t\t\n      JUMPDEST \t\t\t\n      DUP4 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH 40\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH [tag] 848\t\t\t\n      DUP2 \t\t\t\n      DUP11 \t\t\t\n      PUSH [tag] 795\t\t\t\n      JUMP \t\t\t\n    tag 848\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 60\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      DUP10 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH A0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP9 \t\t\t\n      AND \t\t\t\n      PUSH 80\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      PUSH A0\t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      DUP8 \t\t\t\n      SWAP1 \t\t\t\n      MSTORE \t\t\t\n      DUP5 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH C0\t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MSTORE \t\t\t\n      DUP6 \t\t\t\n      MLOAD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      PUSH 0\t\t\t\n    tag 849\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 851\t\t\t\n      JUMPI \t\t\t\n      DUP4 \t\t\t\n      MLOAD \t\t\t\n      DUP4 \t\t\t\n      MSTORE \t\t\t\n      SWAP3 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 849\t\t\t\n      JUMP \t\t\t\n    tag 851\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP1 \t\t\t\n      SWAP13 \t\t\t\n      SWAP12 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 136\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 853\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 853\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 797\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 814\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 165\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH C0\t\t\t\n      DUP8 \t\t\t\n      DUP10 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 858\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 858\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 859\t\t\t\n      DUP8 \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 859\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 860\t\t\t\n      PUSH 60\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 797\t\t\t\n      JUMP \t\t\t\n    tag 860\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH 80\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH A0\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      JUMP \t\t\t\n    tag 170\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      PUSH E0\t\t\t\n      DUP9 \t\t\t\n      DUP11 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 862\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 862\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 863\t\t\t\n      DUP9 \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 863\t\t\t\n      JUMPDEST \t\t\t\n      SWAP7 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 864\t\t\t\n      PUSH 20\t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 864\t\t\t\n      JUMPDEST \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      PUSH 40\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP5 \t\t\t\n      POP \t\t\t\n      PUSH 60\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP4 \t\t\t\n      POP \t\t\t\n      PUSH [tag] 865\t\t\t\n      PUSH 80\t\t\t\n      DUP10 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 797\t\t\t\n      JUMP \t\t\t\n    tag 865\t\t\t\n      JUMPDEST \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      PUSH A0\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH C0\t\t\t\n      DUP9 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      SWAP9 \t\t\t\n      SWAP2 \t\t\t\n      SWAP5 \t\t\t\n      SWAP8 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP6 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 180\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      PUSH 40\t\t\t\n      DUP4 \t\t\t\n      DUP6 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 867\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 867\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 868\t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 796\t\t\t\n      JUMP \t\t\t\n    tag 868\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      CALLDATALOAD \t\t\t\n      PUSH FFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 869\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 869\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 192\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SHR \t\t\t\n      SWAP1 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      DUP1 \t\t\t\n      PUSH [tag] 872\t\t\t\n      JUMPI \t\t\t\n      PUSH 7F\t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 872\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      PUSH [tag] 873\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 22\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 873\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 798\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 11\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 799\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n    tag 876\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 878\t\t\t\n      JUMPI \t\t\t\n      DUP2 \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 880\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 880\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 880\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP6 \t\t\t\n      AND \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 881\t\t\t\n      JUMPI \t\t\t\n      SWAP2 \t\t\t\n      DUP2 \t\t\t\n      MUL \t\t\t\n      SWAP2 \t\t\t\n    tag 881\t\t\t\n      JUMPDEST \t\t\t\n      SWAP4 \t\t\t\n      DUP5 \t\t\t\n      SHR \t\t\t\n      SWAP4 \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      MUL \t\t\t\n      SWAP1 \t\t\t\n      PUSH [tag] 876\t\t\t\n      JUMP \t\t\t\n    tag 878\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 800\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 883\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 883\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 884\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 884\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 886\t\t\t\n      JUMPI \t\t\t\n      PUSH 2\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 887\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 885\t\t\t\n      JUMP \t\t\t\n    tag 886\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 887\t\t\t\n      JUMPDEST \t\t\t\n      PUSH FF\t\t\t\n      DUP5 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 889\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 889\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 889\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP3 \t\t\t\n      SHL \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 885\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      PUSH 20\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      PUSH 133\t\t\t\n      DUP4 \t\t\t\n      LT \t\t\t\n      AND \t\t\t\n      PUSH 4E\t\t\t\n      DUP5 \t\t\t\n      LT \t\t\t\n      PUSH B\t\t\t\n      DUP5 \t\t\t\n      LT \t\t\t\n      AND \t\t\t\n      OR \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 890\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      EXP \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMP \t\t\t\n    tag 890\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 891\t\t\t\n      DUP4 \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 799\t\t\t\n      JUMP \t\t\t\n    tag 891\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      DIV \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 893\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 893\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 893\t\t\t\n      JUMPDEST \t\t\t\n      MUL \t\t\t\n      SWAP4 \t\t\t\n      SWAP3 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 243\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH [tag] 204\t\t\t\n      PUSH FF\t\t\t\n      DUP5 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      PUSH [tag] 800\t\t\t\n      JUMP \t\t\t\n    tag 245\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      MUL \t\t\t\n      DUP2 \t\t\t\n      ISZERO \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      DIV \t\t\t\n      DUP5 \t\t\t\n      EQ \t\t\t\n      OR \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 197\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 393\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 197\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 399\t\t\t\n      JUMPDEST \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 197\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 197\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 444\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      PUSH 20\t\t\t\n      DUP3 \t\t\t\n      DUP5 \t\t\t\n      SUB \t\t\t\n      SLT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 913\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP1 \t\t\t\n      REVERT \t\t\t\n    tag 913\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      MLOAD \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 557\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 802\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1F\t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 361\t\t\t\n      JUMPI \t\t\t\n      DUP1 \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      PUSH 0\t\t\t\n      KECCAK256 \t\t\t\n      PUSH 1F\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH 5\t\t\t\n      SHR \t\t\t\n      DUP2 \t\t\t\n      ADD \t\t\t\n      PUSH 20\t\t\t\n      DUP6 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 921\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP1 \t\t\t\n    tag 921\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1F\t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH 5\t\t\t\n      SHR \t\t\t\n      DUP3 \t\t\t\n      ADD \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n    tag 922\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 530\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP2 \t\t\t\n      SSTORE \t\t\t\n      PUSH 1\t\t\t\n      ADD \t\t\t\n      PUSH [tag] 922\t\t\t\n      JUMP \t\t\t\n    tag 591\t\t\t\n      JUMPDEST \t\t\t\n      DUP2 \t\t\t\n      MLOAD \t\t\t\n      PUSH FFFFFFFFFFFFFFFF\t\t\t\n      DUP2 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 928\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 928\t\t\t\n      PUSH [tag] 296\t\t\t\n      JUMP \t\t\t\n    tag 928\t\t\t\n      JUMPDEST \t\t\t\n      PUSH [tag] 929\t\t\t\n      DUP2 \t\t\t\n      PUSH [tag] 930\t\t\t\n      DUP5 \t\t\t\n      SLOAD \t\t\t\n      PUSH [tag] 192\t\t\t\n      JUMP \t\t\t\n    tag 930\t\t\t\n      JUMPDEST \t\t\t\n      DUP5 \t\t\t\n      PUSH [tag] 802\t\t\t\n      JUMP \t\t\t\n    tag 929\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 20\t\t\t\n      DUP1 \t\t\t\n      PUSH 1F\t\t\t\n      DUP4 \t\t\t\n      GT \t\t\t\n      PUSH 1\t\t\t\n      DUP2 \t\t\t\n      EQ \t\t\t\n      PUSH [tag] 932\t\t\t\n      JUMPI \t\t\t\n      PUSH 0\t\t\t\n      DUP5 \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 933\t\t\t\n      JUMPI \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      DUP4 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n    tag 933\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      PUSH 3\t\t\t\n      DUP7 \t\t\t\n      SWAP1 \t\t\t\n      SHL \t\t\t\n      SHR \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      PUSH 1\t\t\t\n      DUP6 \t\t\t\n      SWAP1 \t\t\t\n      SHL \t\t\t\n      OR \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n      PUSH [tag] 931\t\t\t\n      JUMP \t\t\t\n    tag 932\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP6 \t\t\t\n      DUP2 \t\t\t\n      MSTORE \t\t\t\n      PUSH 20\t\t\t\n      DUP2 \t\t\t\n      KECCAK256 \t\t\t\n      PUSH 1F\t\t\t\n      NOT \t\t\t\n      DUP7 \t\t\t\n      AND \t\t\t\n      SWAP2 \t\t\t\n    tag 936\t\t\t\n      JUMPDEST \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 938\t\t\t\n      JUMPI \t\t\t\n      DUP9 \t\t\t\n      DUP7 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      DUP3 \t\t\t\n      SSTORE \t\t\t\n      SWAP5 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      SWAP5 \t\t\t\n      PUSH 1\t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP5 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 936\t\t\t\n      JUMP \t\t\t\n    tag 938\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DUP6 \t\t\t\n      DUP3 \t\t\t\n      LT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 939\t\t\t\n      JUMPI \t\t\t\n      DUP8 \t\t\t\n      DUP6 \t\t\t\n      ADD \t\t\t\n      MLOAD \t\t\t\n      PUSH 0\t\t\t\n      NOT \t\t\t\n      PUSH 3\t\t\t\n      DUP9 \t\t\t\n      SWAP1 \t\t\t\n      SHL \t\t\t\n      PUSH F8\t\t\t\n      AND \t\t\t\n      SHR \t\t\t\n      NOT \t\t\t\n      AND \t\t\t\n      DUP2 \t\t\t\n      SSTORE \t\t\t\n    tag 939\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      PUSH 1\t\t\t\n      DUP5 \t\t\t\n      PUSH 1\t\t\t\n      SHL \t\t\t\n      ADD \t\t\t\n      DUP6 \t\t\t\n      SSTORE \t\t\t\n    tag 931\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 654\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 21\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 683\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 32\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 713\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      PUSH [tag] 946\t\t\t\n      JUMPI \t\t\t\n      PUSH 4E487B71\t\t\t\n      PUSH E0\t\t\t\n      SHL \t\t\t\n      PUSH 0\t\t\t\n      MSTORE \t\t\t\n      PUSH 12\t\t\t\n      PUSH 4\t\t\t\n      MSTORE \t\t\t\n      PUSH 24\t\t\t\n      PUSH 0\t\t\t\n      REVERT \t\t\t\n    tag 946\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      DIV \t\t\t\n      SWAP1 \t\t\t\n      JUMP \t\t\t\n    tag 724\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 0\t\t\t\n      DUP3 \t\t\t\n      MLOAD \t\t\t\n      PUSH [tag] 948\t\t\t\n      DUP2 \t\t\t\n      DUP5 \t\t\t\n      PUSH 20\t\t\t\n      DUP8 \t\t\t\n      ADD \t\t\t\n      PUSH [tag] 794\t\t\t\n      JUMP \t\t\t\n    tag 948\t\t\t\n      JUMPDEST \t\t\t\n      SWAP2 \t\t\t\n      SWAP1 \t\t\t\n      SWAP2 \t\t\t\n      ADD \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 734\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP3 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP3 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      SUB \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 951\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 951\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    tag 951\t\t\t\n      JUMPDEST \t\t\t\n      POP \t\t\t\n      SWAP3 \t\t\t\n      SWAP2 \t\t\t\n      POP \t\t\t\n      POP \t\t\t\n      JUMP \t\t\t\n    tag 747\t\t\t\n      JUMPDEST \t\t\t\n      PUSH 1\t\t\t\n      PUSH 1\t\t\t\n      PUSH D0\t\t\t\n      SHL \t\t\t\n      SUB \t\t\t\n      DUP2 \t\t\t\n      DUP2 \t\t\t\n      AND \t\t\t\n      DUP4 \t\t\t\n      DUP3 \t\t\t\n      AND \t\t\t\n      ADD \t\t\t\n      SWAP1 \t\t\t\n      DUP1 \t\t\t\n      DUP3 \t\t\t\n      GT \t\t\t\n      ISZERO \t\t\t\n      PUSH [tag] 951\t\t\t\n      JUMPI \t\t\t\n      PUSH [tag] 951\t\t\t\n      PUSH [tag] 798\t\t\t\n      JUMP \t\t\t\n    .data\n      23484935BDF196CA31423939A31C04B740AF4DE11AC0940ED78D38B36817EC46:\n        e8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d00\n      3874827173E8DF9F34323B12B251D1D3C53926CE129E30A0D69F1D47C277041B:\n        52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00\n      60016240B4CAF95CE61FF2092E1488B3D1AFF76BEE1C89F54239447D6827D736:\n        a16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100\n      75B20EEF8615DE99C108B05F0DBDA081C91897128CAA336D75DFFB97C4132B4D:\n        360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\n"
}